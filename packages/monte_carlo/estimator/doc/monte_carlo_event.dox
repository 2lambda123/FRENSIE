// This file is used to add material to the monte carlo event subpackage page

/*! \page monte_carlo_event Monte Carlo Event Subpackage
 *
 * \tableofcontents
 *
 * \section mc_event_overview_sec Overview
 * The event subpackage provides all of the functions and classes necessary
 * to calculate quantities of interest and summarize certain charateristics
 * of a Monte Carlo particle simulation. This subpackage can be divided into
 * four distinct catagories: Events, the particle history observers,
 * the event handler and the module interface.
 * \image html Event_Module_High_Level.jpg
 * \image latex Event_Module_High_Level.eps
 *
 * \section mc_events_subsec Events
 * There are currently two catagories of events: entity events and global
 * events. Entity events occur with respect to a geometric entity (cell 
 * or surface) while global events occur independent of the geometry. There
 * are currently five entity events and one global event that are tracked by
 * the event subpackage. Entity events have the following general layout:
 * \image html Entity_Events.jpg
 * \image latex Entity_Events.eps
 *
 * Global events have the following general layout:
 * \image html Global_Events.jpg
 * \image latex Global_Events.eps
 * 
 * Note that the infrastructure used to account for an event consists of
 * an event observer interface (abstract base class), a dispatcher class
 * and a handler class. To efficiently pass event information to the 
 * appropriate observers a variant of the observer-sender design pattern was
 * chosen, which was called the observer-dispatcher pattern. When an event
 * occurs, a method in the handler for the particular event gets called. The
 * dispatcher is then used to send the event info to all of the registered
 * observers (and only those observers). Note that with entity events there is
 * also a local dispatcher. The local dispatcher is assigned to a single 
 * geometric entity (a cell or surface). When an entity event dispatcher is
 * used it first checks if there is a local dispatcher assigned to the 
 * geometric entity where the event occurred. If there is a dispatcher
 * assigned it will then be used to send the event info to its registered
 * observers. 
 *
 * From all of the event handlers, the general event handler is constructed
 * (it is a mixin class). The general event handler was designed in this way
 * so that new events can be easily added in the future. 
 * 
 * \subsection mc_particle_colliding_in_cell_event The Particle Colliding In Cell Event
 * Any class that will observe particle colliding in cell events must
 * inherit from the MonteCarlo::ParticleCollidingInCellEventObserver and 
 * implement the pure virtual interface. 
 *
 * The class must declare a type called "EventTags" that stores the event tags 
 * of all of the events it will observe in a boost::mpl::vector type. The 
 * MonteCarlo::ParticleCollidingInCellEventObserver::EventTag must be added to 
 * this vector so that objects of the class will be automatically registered 
 * with the required MonteCarlo::ParticleCollidingInCellEventLocalDispatcher 
 * and the MonteCarlo::ParticleCollidingInCellEventDispatcher. Note that this 
 * automatic registration process occurs when an object is added to the 
 * MonteCarlo::EventHandler using the addEntityEventObserver method. See the 
 * \ref particle_colliding_in_cell_event "particle colliding in cell event"
 * API page and the figure below for more information on this event.
 * \image html ParticleCollidingInCellEvent.jpg
 * \image latex ParticleCollidingInCellEvent.eps
 *
 * \subsection mc_particle_subtrack_ending_in_cell_event The Particle Subtrack Ending In Cell Event
 * \image html ParticleSubtrackEndingInCellEvent.jpg
 * \image latex ParticleSubtrackEndingInCellEvent.eps
 *
 * \subsection mc_particle_entering_cell_event The Particle Entering Cell Event
 * \image html ParticleEnteringCellEvent.jpg
 * \image latex ParticleEnteringCellEvent.eps
 *
 * \subsection mc_particle_leaving_cell_event The Particle Leaving Cell Event
 * \image html ParticleLeavingCellEvent.jpg
 * \image latex ParticleLeavingCellEvent.eps
 *
 * \subsection mc_particle_crossing_surface_event The Particle Crossing Surface Event
 * \image html ParticleCrossingSurfaceEvent.jpg
 * \image latex ParticleCrossingSurfaceEvent.eps
 *
 * \subsection mc_particle_subtrack_ending_global_event The Particle Subtrack Ending Global Event
 * \image html ParticleSubtrackEndingGlobalEvent.jpg
 * \image latex ParticleSubtrackEndingGlobalEvent.eps
 *
 * \section mc_particle_history_observers Particle History Observers
 *
 * \subsection mc_estimators Estimators
 * \image html Estimator.jpg
 * \image latex Estimator.eps
 *
 * \subsubsection mc_cell_pulse_height_estimator Cell Pulse Height Estimator
 *
 * \subsubsection mc_cell_collision_flux_estimator Cell Collision Flux Estimator
 * 
 * \subsubsection mc_cell_track_length_flux_estimator Cell Track-Length Flux Estimator
 *
 * \subsubsection mc_surface_flux_estimator Surface Flux Estimator
 *
 * \subsubsection mc_surface_current_estimator Surface Current Estimator
 *
 * \subsubsection mc_tet_mesh_track_length_flux_estimator Tet Mesh Track-Length Flux Estimator
 *
 * \subsubsection mc_hex_mesh_track_length_flux_estimator Hex Mesh Track-Length Flux Estimator
 *
 * \subsection mc_particle_tracker Particle Tracker
 *
 * \subsection mc_summary_tables Summary Tables
 *
 * \section mc_event_handler The Event Handler
 *
 * \section mc_event_module_interface The Event Module Interface
 */ 

/*! \defgroup entity_events Entity Events
 *
 * Events that occur with respect to a geometric entity (cell or surface).
 */

/*! \defgroup global_events Global Events
 *
 * Events that are independent of geometric entities.
 */
