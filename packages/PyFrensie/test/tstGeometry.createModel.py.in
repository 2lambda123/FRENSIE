#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Geometry.createModel method unit tests
#  \file   tstGeometry.createModel.py
#  \author Alex Robinson
#  \brief  Unit tests for the Geometry.createModel method
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-d", "--dagmc_xmlfile", type="string", dest="dagmc_xmlfile", default="",
                  help="set the dagmc xml file that will be used to create the model")
parser.add_option("-r", "--root_xmlfile", type="string", dest="root_xmlfile", default="",
                  help="set the root xml file that will be used to create the model")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')

advanced_dagmc_model = ""
basic_dagmc_model = ""

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the createAdvancedModel method with a DagMC geometry
class CreateAdvancedModelTestCase(unittest.TestCase):
    "TestCase class for Geometry.createAdvancedModel method using a DagMC geometry"

    def testCreateAdvancedModel(self):
        "*Test Geometry.createAdvancedModel"
        global advanced_dagmc_model
        
        # Will throw an error if the model cannot be created
        advanced_dagmc_model = Geometry.createAdvancedModel( options.dagmc_xmlfile )

#-----------------------------------------------------------------------------#
# Test the makeModelBasic method with a DagMC geometry
class MakeModelBasicTestCase(unittest.TestCase):
    "TestCase class for Geometry.makeModelBasic method using a DagMC geometry"

    def testMakeModelBasic(self):
        "*Test Geometry.makeModelBasic"
        global basic_dagmc_model

        # Will throw an error if the model cannot be converted
        basic_dagmc_model = Geometry.makeModelBasic( advanced_dagmc_model )
        
        # Make sure that the model is still the same
        self.assertEqual( basic_dagmc_model, advanced_dagmc_model )

#-----------------------------------------------------------------------------#
# Test the makeModelAdvanced method with a DagMC geometry
class MakeModelAdvancedTestCase(unittest.TestCase):
    "TestCase class for Geometry.makeModelAdvanced method using a DagMC geometry"

    def testMakeModelAdvanced(self):
        "*Test Geometry.makeModelAdvanced"
        global basic_dagmc_model
        global advanced_dagmc_model

        # Will throw an error if the model cannot be converted
        advanced_dagmc_model_copy = Geometry.makeModelAdvanced( basic_dagmc_model )

        # Make sure that the model is still the same
        self.assertEqual( advanced_dagmc_model_copy, basic_dagmc_model )
        self.assertEqual( advanced_dagmc_model_copy, advanced_dagmc_model )

#-----------------------------------------------------------------------------#
# Test the createModel method with a Root geometry
class CreateModelTestCase(unittest.TestCase):
    "TestCase class for Geometry.createModel method using a Root geometry"

    def testCreateModel(self):
        "*Test Geometry.createModel"

        # Will throw an error if the model cannot be created
        root_model = Geometry.createModel( options.root_xmlfile )

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    if len(options.dagmc_xmlfile) > 0:
        suite.addTest(unittest.makeSuite(CreateAdvancedModelTestCase))
        suite.addTest(unittest.makeSuite(MakeModelBasicTestCase))
        suite.addTest(unittest.makeSuite(MakeModelAdvancedTestCase))

    if len(options.root_xmlfile) > 0:
        suite.addTest(unittest.makeSuite(CreateModelTestCase))

    print >>sys.stderr, \
        "\n**************************************\n" + \
        "Testing Geometry.createModel \n" + \
        "**************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)
    
    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstGeometry.createModel.py
#-----------------------------------------------------------------------------#
