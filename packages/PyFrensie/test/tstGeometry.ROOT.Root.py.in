#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Geometry.ROOT.Root class unit tests
#  \file   tstGeometry.ROOT.Root.py
#  \author Alex Robinson
#  \brief  Unit tests for the Geometry.ROOT.Root class 
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-r", "--rootfile", type="string", dest="rootfile",
                  help="set the Root file that Root will read")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')
ROOT = importPyFrensieModuleFromBuildDir('Geometry.ROOT')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Root class (pre-initialization)
class RootPreInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.ROOT.Root class (pre-initialization)"

    def setUp(self):
        self.geom = ROOT.Root

    def testSetMaterialPropertyName(self):
        "*Test Geometry.ROOT.Root setMaterialPropertyName method"
        default_property = self.geom.getMaterialPropertyName()
        self.geom.setMaterialPropertyName( "material" )
        self.assertEqual(self.geom.getMaterialPropertyName(), "material")
        self.geom.setMaterialPropertyName( default_property )

    def testSetVoidMaterialName(self):
        "*Test Geometry.ROOT.Root setVoidMaterialName method"
        default_name = self.geom.getVoidMaterialName()
        self.geom.setVoidMaterialName( "empty" )
        self.assertEqual(self.geom.getVoidMaterialName(), "empty")
        self.geom.setVoidMaterialName( default_name )

    def testSetTerminalMaterialName(self):
        "*Test Geometry.ROOT.Root setTerminalMaterialName method"
        default_name = self.geom.getTerminalMaterialName()
        self.geom.setTerminalMaterialName( "terminal_mat" )
        self.assertEqual(self.geom.getTerminalMaterialName(), "terminal_mat")
        self.geom.setTerminalMaterialName( default_name )

#-----------------------------------------------------------------------------#
# Test the Root class (post-initialization)
class RootPostInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.ROOT.Root class (post-initialization)"
    @classmethod
    def setUpClass(cls):
        cls.geom = ROOT.Root
        cls.geom.initialize(options.rootfile)

    def testGetMaterialIds(self):
        "*Test Geometry.ROOT.Root getMaterialIds method"
        mat_ids = self.geom.getMaterialIds()
        self.assertEqual(len(mat_ids), 1)
        self.assertTrue(1 in mat_ids)

    def testDoesCellExist(self):
        "*Test Geometry.ROOT.Root doesCellExist method"
        self.assertTrue(self.geom.doesCellExist( 1 ))
        self.assertTrue(self.geom.doesCellExist( 2 ))
        self.assertTrue(self.geom.doesCellExist( 3 ))
        self.assertFalse(self.geom.doesCellExist( 4 ))

    def testGetCellVolume(self):
        "*Test Geometry.ROOT.Root getCellVolume method"
        self.assertAlmostEqual(self.geom.getCellVolume( 1 ), 934.550153050213, delta=1e-9)
        self.assertAlmostEqual(self.geom.getCellVolume( 2 ), 65.4498469497874, delta=1e-9)
        self.assertAlmostEqual(self.geom.getCellVolume( 3 ), 1744.0, delta=1e-9)

    def testIsTerminationCell(self):
        "*Test Geometry.ROOT.Root getCellVolume method"
        self.assertFalse(self.geom.isTerminationCell( 1 ))
        self.assertFalse(self.geom.isTerminationCell( 2 ))
        self.assertTrue(self.geom.isTerminationCell( 3 ))

    def testIsVoidCell(self):
        "*Test Geometry.ROOT.Root isVoidCell method"
        self.assertTrue(self.geom.isVoidCell( 1 ))
        self.assertFalse(self.geom.isVoidCell( 2 ))
        self.assertFalse(self.geom.isVoidCell( 3 ))

    def testGetCells(self):
        "*Test Geometry.ROOT.Root getCells method"
        # All cells except termination cell
        cells = self.geom.getCells()
        self.assertEqual(len(cells), 2)
        self.assertTrue(1 in cells)
        self.assertTrue(2 in cells)
        
        # All cells except void and termination cells
        cells = self.geom.getCells( False )
        self.assertEqual(len(cells), 1)
        self.assertTrue(2 in cells)

        # All cells except void cells
        #cells = self.

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(RootPreInitTestCase))
    suite.addTest(unittest.makeSuite(RootPostInitTestCase))

    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing Geometry.ROOT.Root \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstGeometry.ROOT.Root.py
#-----------------------------------------------------------------------------#

