#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Collision electron scattering ace distribution helpers unit tests
#  \file   tstMonteCarlo.Collision.ElectronScatteringACEDistribution.py
#  \author Luke Kersting
#  \brief  Unit tests for the ACE MonteCarlo.Collision.ElectronScatteringDistribution helpers
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-a", "--acefile", type="string", dest="acefile",
                  help="set the ACE file to test.")
parser.add_option("-n", "--tablename", type="string", dest="tablename",
                  help="set the ACE table name (must be in the file).")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Collision = importPyFrensieModuleFromBuildDir('MonteCarlo.Collision')
Utility = importPyFrensieModuleFromBuildDir('Utility')
Prng = importPyFrensieModuleFromBuildDir('Utility.Prng')
ACE = importPyFrensieModuleFromBuildDir('Data.ACE')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the cutoff electron scattering distribution
class CutoffElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision cutoff elastic electron scattering distribution"

    def setUp(self):
        ace_file = ACE.ACEFileHandler( options.acefile, options.tablename, 1 )
        self.data = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )
        self.dist = Collision.createCutoffElasticDistribution( self.data )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                5.0189548148148151e-07,
                                delta=1e-12*5.0189548148148151e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.5912781249999995e-05,
                                delta=1e-12*9.5912781249999995e-05 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.2010714054054055e-02,
                                delta=1e-12*1.2010714054054055e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                1.08525,
                                delta=1e-12*1.08525 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                6.2249124879293620e-02,
                                delta=1e-12*6.2249124879293620e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.1895876567623404e+01,
                                delta=1e-12*1.1895876567623404e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.1023715396865266e-01,
                                delta=1e-12*1.1023715396865266e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.9606793406341421,
                                delta=1e-12*9.9606793406341421 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.9268620390297485e-02,
                                delta=1e-12*1.9268620390297485e-02)
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.4813136951078145e-02,
                                delta=1e-12*5.4813136951078145e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.0469874142979370e-01,
                                delta=1e-12*8.0469874142979370e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.2497684658603243e-01,
                                delta=1e-12*8.2497684658603243e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the screened rutherford electron scattering distribution
class ScreenedRutherfordElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision screened rutherford elastic electron scattering distribution"

    def setUp(self):
        ace_file = ACE.ACEFileHandler( options.acefile, options.tablename, 1 )
        self.data = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )
        self.dist = Collision.createScreenedRutherfordElasticDistribution( self.data )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                9.9999999994248878e-01,
                                delta=1e-12*9.9999999994248878e-01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9999995),
                                3.9999999926322096,
                                delta=1e-12*3.9999999926322096 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                9.9355053047417485e+17,
                                delta=1e-12*9.9355053047417485e+17 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                9.9999999999999944e-01,
                                delta=1e-12*9.9999999999999944e-01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9999995),
                                1.0000101255012976,
                                delta=1e-12*1.0000101255012976 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.0000202511563834,
                                delta=1e-12*1.0000202511563834 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.9999999994248878e-01,
                                delta=1e-12*9.9999999994248878e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9999995),
                                3.9999999926322096,
                                delta=1e-12*3.9999999926322096 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                9.9355053047417485e+17,
                                delta=1e-12*9.9355053047417485e+17 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.9999999999999944e-01,
                                delta=1e-12*9.9999999999999944e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9999995),
                                1.0000101255012976,
                                delta=1e-12*1.0000101255012976 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                1.0000202511563834,
                                delta=1e-12*1.0000202511563834 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9999995),
                                9.9999999899675951e-01,
                                delta=1e-12*9.9999999899675951e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                0.0,
                                delta=1e-12 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.00000000002876,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9999995),
                                5.0000253132778305e-01,
                                delta=1e-12*5.0000253132778305e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                0.0,
                                delta=1e-12 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)

        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999999999999900e-01,
                                delta=1e-12*9.9999999999999900e-01 )
        self.assertTrue( energy == outgoing_energy)

        energy = 1e-4
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999950000253135e-01,
                                delta=1e-12*9.9999950000253135e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the dipole bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_dipole(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision dipole bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        ace_file = ACE.ACEFileHandler( options.acefile, options.tablename, 1 )
        self.data = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )
        self.dist = Collision.createBremsstrahlungDistribution( self.data, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole sample method"
        random_numbers = [ 0.0, 0.0, 1.0-1e-15, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.978068268447441547e-02,
                                delta=1e-12*1.978068268447441547e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the 2bs bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_2bs(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        ace_file = ACE.ACEFileHandler( options.acefile, options.tablename, 1 )
        self.data = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )
        self.dist = Collision.createBremsstrahlungDistribution( self.data.extractAtomicNumber(), self.data, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs sample method"
        random_numbers = [ 0.0, 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -6.056998234653807600e-01,
                                delta=1e-12*-6.056998234653807600e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the electroionization subshell electron scattering distribution
class ElectroionizationSubshellElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision electroionization subshell elastic electron scattering distribution"

    def setUp(self):
        ace_file = ACE.ACEFileHandler( options.acefile, options.tablename, 1 )
        self.data = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )
        self.shell = 1
        self.dist = Collision.createElectroionizationSubshellDistribution( self.data, self.shell, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                2.587759256874347193e+04,
                                delta=1e-12*2.587759256874347193e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.130623166949873448e-06,
                                delta=1e-12*3.130623166949873448e-06 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.212783635119363305e-08,
                                delta=1e-12*3.212783635119363305e-08 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                7.767559992061280354e+04,
                                delta=1e-12*7.767559992061280354e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                3.846295593327409733e+03,
                                delta=1e-12*3.846295593327409733e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                1.463526974069022799e+03,
                                delta=1e-12*1.463526974069022799e+03 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                2.587759065237524919e+04,
                                delta=1e-12*2.587759065237524919e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.130622935111199349e-06,
                                delta=1e-12*3.130622935111199349e-06)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.212783397196286030e-08,
                                delta=1e-12*3.212783397196286030e-08 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                7.767557117248578288e+04,
                                delta=1e-12*7.767557117248578288e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                3.846294955897190448e+03,
                                delta=1e-12*3.846294955897190448e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                1.463527105823794500e+03,
                                delta=1e-12*1.463527105823794500e+03 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                6.765435226348609499e-01,
                                delta=1e-12*6.765435226348609499e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.999968490821977696e-01,
                                delta=1e-12*9.999968490821977696e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                9.999996800288486476e-01,
                                delta=1e-12*9.999996800288486476e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                3.025636899554207115e-01,
                                delta=1e-12*3.025636899554207115e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                8.979734178106185682e-01,
                                delta=1e-12*8.979734178106185682e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.999083950387432917e-01,
                                delta=1e-12*9.999083950387432917e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution sample method"
        random_numbers = [ 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.000489069268038246e-02,
                                delta=1e-12*1.000489069268038246e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                7.024524579189942441e-01,
                                delta=1e-12*7.024524579189942441e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.931949999999128134e-04,
                                1e-12*4.931949999999128134e-04)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                3.128075402514134454e-04,
                                delta=1e-12*3.128075402514134454e-04 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.999948900357620296e-01,
                                delta=1e-12*9.999948900357620296e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.999967451873526443e+04,
                                1e-12*4.999967451873526443e+04)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(CutoffElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(ScreenedRutherfordElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_dipole))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_2bs))
    suite.addTest(unittest.makeSuite(ElectroionizationSubshellElectronScatteringDistributionTestCase))


    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing MonteCarlo.Collision.ElectronScatteringACEDistribution \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)
    
#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Collision.ElectronScatteringACEDistribution.py
#-----------------------------------------------------------------------------#
