#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Utility.Distribution.BivariateDistribution class unit tests
#  \file   tstUtility.Distribution.BivariateDistribution.py
#  \author Alex Robinson
#  \brief  Unit tests for the Utility.Distribution.BivariateDistribution classes
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy
# from PyTrilinos.Teuchos import ParameterList

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Utility = importPyFrensieModuleFromBuildDir('Utility')
Distribution = importPyFrensieModuleFromBuildDir('Utility.Distribution')
tol = 1e-12

tab_linlin_1 = Distribution.TabularDistribution_LinLin( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
tab_linlin_2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
tab_linlin_5 = Distribution.TabularDistribution_LinLog( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
Distribution.upcastToTabularUnivariateDistribution( tab_linlin_5 )
test_dist = Distribution.upcastToTabularUnivariateDistribution( tab_linlin_1 )
print test_dist.evaluate(1.0)

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Interpolated Fully Tabular Basic Bivariate Distribution
class InterpolatedFullyTabularBasicBivariateDistributionTestCase(unittest.TestCase):
    "TestCase class for Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution class"

    def setUp(self):
        tab_dist1 = Distribution.TabularDistribution_LogLog( [1.0, 2.0, 3.0], [0.5, 0.5, 0.5] )
        tab_dist2 = Distribution.TabularDistribution_LinLin( [4.0, 5.0, 6.0, 7.0], [0.1, 0.5, 1.5, 3.5] )
        uni_tab_dist1 = Distribution.upcastToTabularUnivariateDistribution( tab_dist1 )
        uni_tab_dist2 = Distribution.upcastToTabularUnivariateDistribution( tab_dist2 )

        primary_indep = numpy.array([0.0,1.0])
        secondary_indep = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]]
        dep = [[0.5, 0.5, 0.5], [0.1, 0.5, 1.5, 3.5]]

        self.dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [uni_tab_dist1, uni_tab_dist2] )
        self.dist1 = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( [0.0,1.0], [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0, 7.0]], [[0.5, 0.5, 0.5], [0.1, 0.5, 1.5, 3.5]] )
        self.dist2 = Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase( primary_indep, secondary_indep, dep, 1e-3, 1e-7, 1e-16 )

    def testConstructor(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution constructor"
        self.assertTrue(isinstance(self.dist, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))
        self.assertTrue(isinstance(self.dist1, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))
        self.assertTrue(isinstance(self.dist2, Distribution.InterpolatedFullyTabularBasicBivariateDistribution_LinLinLin_UnitBase))

    def testEvaluate(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluate method"
        self.assertTrue(self.dist.evaluate( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual(self.dist.evaluate( 1.0, 4.0 ), 0.1, delta=0.1*tol)
        self.assertTrue(self.dist.evaluate( 1.0, 5.0 ) == 0.5)
        self.assertTrue(self.dist.evaluate( 1.0, 6.0 ) == 1.5)
        self.assertTrue(self.dist.evaluate( 1.0, 7.0 ) == 3.5)

    def testEvaluateSecondaryConditionalPDF(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalPDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 1.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 2.0 ) == 0.5)
        self.assertTrue(self.dist.evaluateSecondaryConditionalPDF( 0.0, 3.0 ) == 0.5)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 4.0 ),
                                2.6315789473684219e-02,
                                delta=2.6315789473684219e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 5.0 ),
                                1.3157894736842105e-01,
                                delta=1.3157894736842105e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 6.0 ),
                                3.9473684210526311e-01,
                                delta=3.9473684210526311e-01*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalPDF( 1.0, 7.0 ),
                                9.2105263157894735e-01,
                                delta=9.2105263157894735e-01*tol)

    def testEvaluateSecondaryConditionalCDF(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution evaluateSecondaryConditionalCDF method"
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 1.0 ) == 0.0)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 2.0 ) == 0.5 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 3.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 0.0, 4.0 ) == 1.0 )
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 4.0 ) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 5.0 ),
                                7.8947368421052641e-02,
                                delta=7.8947368421052641e-02*tol)
        self.assertAlmostEqual( self.dist.evaluateSecondaryConditionalCDF( 1.0, 6.0 ),
                                3.4210526315789475e-01,
                                delta=3.4210526315789475e-01*tol)
        self.assertTrue(self.dist.evaluateSecondaryConditionalCDF( 1.0, 7.0 ) == 1.0 )

    def testSampleSecondaryConditional(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditional method"
        sample = self.dist.sampleSecondaryConditional( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        sample = self.dist.sampleSecondaryConditional( 0.5 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        sample = self.dist.sampleSecondaryConditional( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)

    def testSampleSecondaryConditionalAndRecordTrials(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordTrials method"
        trials = 0
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.0, trials )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(trials == 1)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 0.5, trials )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        self.assertTrue(trials == 2)
        sample,trials = self.dist.sampleSecondaryConditionalAndRecordTrials( 1.0, trials )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(trials == 3)

    def testSampleSecondaryConditionalAndRecordBinIndices(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalAndRecordBinIndices method"
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 3.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 0.5 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 5.0)
        self.assertTrue(primary_bin_index == 0)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)
        sample,primary_bin_index,secondary_bin_index = self.dist.sampleSecondaryConditionalAndRecordBinIndices( 1.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 7.0)
        self.assertTrue(primary_bin_index == 1)
        self.assertTrue(secondary_bin_index >= 0)
        self.assertTrue(secondary_bin_index <= 3)

    def testSampleSecondaryConditionalWithRandomNumber(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumber method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 0.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.0, 1.0 )
        self.assertTrue(sample == 3.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 0.0 )
        self.assertTrue(sample == 2.5)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 0.5, 1.0 )
        self.assertTrue(sample == 5.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 0.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumber( 1.0, 1.0 )
        self.assertTrue(sample == 7.0)

    def testSampleSecondaryConditionalInSubrange(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalInSubrange method"
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.0, 2.0 )
        self.assertTrue(sample >= 1.0)
        self.assertTrue(sample <= 2.0)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 0.5, 4.0 )
        self.assertTrue(sample >= 2.5)
        self.assertTrue(sample <= 4.0)
        sample = self.dist.sampleSecondaryConditionalInSubrange( 1.0, 5.0 )
        self.assertTrue(sample >= 4.0)
        self.assertTrue(sample <= 5.0)

    def testSampleSecondaryConditionalWithRandomNumberInSubrange(self):
        "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution sampleSecondaryConditionalWithRandomNumberInSubrange method"
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 0.0, 2.0 )
        self.assertTrue(sample == 1.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.0, 1.0, 2.0 )
        self.assertTrue(sample == 2.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 0.0, 4.0 )
        self.assertTrue(sample == 2.5)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 0.5, 1.0, 4.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 0.0, 5.0 )
        self.assertTrue(sample == 4.0)
        sample = self.dist.sampleSecondaryConditionalWithRandomNumberInSubrange( 1.0, 1.0, 5.0 )
        self.assertTrue(sample == 5.0)

    # def testGetUpperBoundOfSecondaryIndepVar(self):
    #     "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getUpperBoundOfSecondaryIndepVar method"
    #     upper_bound = self.dist.getUpperBoundOfSecondaryIndepVar( 0.0 )
    #     self.assertTrue(upper_bound == 3.0)
    #     upper_bound = self.dist.getUpperBoundOfSecondaryIndepVar( 0.5 )
    #     self.assertTrue(upper_bound == 5.0)
    #     upper_bound = self.dist.getUpperBoundOfSecondaryIndepVar( 1.0 )
    #     self.assertTrue(upper_bound == 7.0)

    # def testGetLowerBoundOfSecondaryIndepVar(self):
    #     "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution getLowerBoundOfSecondaryIndepVar method"
    #     lower_bound = self.dist.getLowerBoundOfSecondaryIndepVar( 0.0 )
    #     self.assertTrue(lower_bound == 1.0)
    #     lower_bound = self.dist.getLowerBoundOfSecondaryIndepVar( 0.5 )
    #     self.assertTrue(lower_bound == 2.5)
    #     lower_bound = self.dist.getLowerBoundOfSecondaryIndepVar( 1.0 )
    #     self.assertTrue(lower_bound == 5.0)

    # def testIsSecondaryDimensionContinuous(self):
    #     "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution isSecondaryDimensionContinuous method"
    #     self.assertTrue(not self.dist.isSecondaryDimensionContinuous())

    # def testIsSecondaryDimensionTabular(self):
    #     "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution isSecondaryDimensionTabular method"
    #     self.assertTrue(self.dist.isSecondaryDimensionTabular())

    # def testEquality(self):
    #     "*Test Utility.Distribution.InterpolatedFullyTabularBasicBivariateDistribution ==,!= methods"
    #     diff_dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution( 1.0 )
    #     same_dist = Distribution.InterpolatedFullyTabularBasicBivariateDistribution( 0.0 )
    #     self.assertTrue(self.dist != diff_dist)
    #     self.assertTrue(self.dist == same_dist)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(InterpolatedFullyTabularBasicBivariateDistributionTestCase))


    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Utility.Distribution \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstUtility.Distribution.UnivariateDistribution.py
#-----------------------------------------------------------------------------#
