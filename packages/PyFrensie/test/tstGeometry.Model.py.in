#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Geometry.Model class unit tests
#  \file   tstGeometry.Model.py
#  \author Alex Robinson
#  \brief  Unit tests for the Geometry.Model class
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-d", "--dagmc_xmlfile", type="string", dest="dagmc_xmlfile", default="",
                  help="set the dagmc xml file that will be used to create the model")
parser.add_option("-r", "--root_xmlfile", type="string", dest="root_xmlfile", default="",
                  help="set the root xml file that will be used to create the model")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Model class with a DagMC geometry
class DagMCModelTestCase(unittest.TestCase):
    "TestCase class for Geometry.Model class using a DagMC geometry"

    @classmethod
    def setUpClass(cls):
        cls.model = Geometry.createAdvancedModel( options.dagmc_xmlfile )
    
    def testHasCellEstimatorData(self):
        "*Test Geometry.Model hasCellEstimatorData"
        self.assertTrue( self.model.hasCellEstimatorData() )

    def testHasSurfaceEstimatorData(self):
        "*Test Geometry.AdvancedModel hasSurfaceEstimatorData"
        self.assertTrue( self.model.hasSurfaceEstimatorData() )

    def testGetMaterialIds(self):
        "*Test Geometry.Model getMaterialIds"
        material_ids = self.model.getMaterialIds()

        self.assertEqual( len(material_ids), 8 )
        self.assertTrue( 1 in material_ids )
        self.assertTrue( 2 in material_ids )
        self.assertTrue( 3 in material_ids )
        self.assertTrue( 4 in material_ids )
        self.assertTrue( 7 in material_ids )
        self.assertTrue( 8 in material_ids )
        self.assertTrue( 9 in material_ids )
        self.assertTrue( 10 in material_ids )

    def testGetCells(self):
        "*Test Geometry.Model getCells"
        # Get all cells
        cells = self.model.getCells( True, True )
        self.assertEqual( len(cells), 56 )
        self.assertTrue( 188 in cells )
        self.assertTrue( 189 in cells )

        # Get all cells except the termination cell
        cells = self.model.getCells( True, False )
        self.assertEqual( len(cells), 55 )
        self.assertTrue( 188 not in cells )
        self.assertTrue( 189 in cells )

        # Get all cells except the void cells
        cells = self.model.getCells( False, True )
        self.assertEqual( len(cells), 55 )
        self.assertTrue( 188 in cells )
        self.assertTrue( 189 not in cells )

        # Get cells with a material only
        cells = self.model.getCells( False, False)
        self.assertEqual( len(cells), 54 )
        self.assertTrue( 188 not in cells )
        self.assertTrue( 189 not in cells )

    def testGetCellMaterialIds(self):
        "*Test Geometry.Model getCellMaterialIds"
        cell_id_mat_id_map = self.model.getCellMaterialIds()

        self.assertEqual( len(cell_id_mat_id_map), 54 )
        self.assertEqual( cell_id_mat_id_map[1], 8 );
        self.assertEqual( cell_id_mat_id_map[3], 4 );
        self.assertEqual( cell_id_mat_id_map[5], 10 );
        self.assertEqual( cell_id_mat_id_map[7], 4 );
        self.assertEqual( cell_id_mat_id_map[9], 1 );
        self.assertEqual( cell_id_mat_id_map[13], 7 );
        self.assertEqual( cell_id_mat_id_map[19], 3 );
        self.assertEqual( cell_id_mat_id_map[26], 9 );
        self.assertEqual( cell_id_mat_id_map[27], 9 );
        self.assertEqual( cell_id_mat_id_map[28], 9 );
        self.assertEqual( cell_id_mat_id_map[29], 9 );
        self.assertEqual( cell_id_mat_id_map[30], 9 );
        self.assertEqual( cell_id_mat_id_map[31], 9 );
        self.assertEqual( cell_id_mat_id_map[32], 9 );
        self.assertEqual( cell_id_mat_id_map[33], 9 );
        self.assertEqual( cell_id_mat_id_map[34], 9 );
        self.assertEqual( cell_id_mat_id_map[35], 9 );
        self.assertEqual( cell_id_mat_id_map[36], 9 );
        self.assertEqual( cell_id_mat_id_map[37], 9 );
        self.assertEqual( cell_id_mat_id_map[41], 3 );
        self.assertEqual( cell_id_mat_id_map[48], 9 );
        self.assertEqual( cell_id_mat_id_map[49], 9 );
        self.assertEqual( cell_id_mat_id_map[50], 9 );
        self.assertEqual( cell_id_mat_id_map[51], 9 );
        self.assertEqual( cell_id_mat_id_map[52], 9 );
        self.assertEqual( cell_id_mat_id_map[53], 9 );
        self.assertEqual( cell_id_mat_id_map[54], 9 );
        self.assertEqual( cell_id_mat_id_map[55], 9 );
        self.assertEqual( cell_id_mat_id_map[56], 9 );
        self.assertEqual( cell_id_mat_id_map[57], 9 );
        self.assertEqual( cell_id_mat_id_map[58], 9 );
        self.assertEqual( cell_id_mat_id_map[59], 9 );
        self.assertEqual( cell_id_mat_id_map[63], 3 );
        self.assertEqual( cell_id_mat_id_map[70], 9 );
        self.assertEqual( cell_id_mat_id_map[71], 9 );
        self.assertEqual( cell_id_mat_id_map[72], 9 );
        self.assertEqual( cell_id_mat_id_map[73], 9 );
        self.assertEqual( cell_id_mat_id_map[74], 9 );
        self.assertEqual( cell_id_mat_id_map[75], 9 );
        self.assertEqual( cell_id_mat_id_map[76], 9 );
        self.assertEqual( cell_id_mat_id_map[77], 9 );
        self.assertEqual( cell_id_mat_id_map[78], 9 );
        self.assertEqual( cell_id_mat_id_map[79], 9 );
        self.assertEqual( cell_id_mat_id_map[80], 9 );
        self.assertEqual( cell_id_mat_id_map[81], 9 );
        self.assertEqual( cell_id_mat_id_map[83], 7 );
        self.assertEqual( cell_id_mat_id_map[88], 1 );
        self.assertEqual( cell_id_mat_id_map[136], 2 );
        self.assertEqual( cell_id_mat_id_map[82], 3 );
        self.assertEqual( cell_id_mat_id_map[152], 3 );
        self.assertEqual( cell_id_mat_id_map[154], 7 );
        self.assertEqual( cell_id_mat_id_map[166], 3 );
        self.assertEqual( cell_id_mat_id_map[168], 7 );
        self.assertEqual( cell_id_mat_id_map[184], 3 );        
        
    def testGetCellDensities(self):
        "*Test Geometry.Model getCellDensities"
        cell_id_density_map = self.model.getCellDensities()
        
        self.assertEqual( len(cell_id_density_map), 54 )
        self.assertEqual( cell_id_density_map[1], -1.8583 );
        self.assertEqual( cell_id_density_map[3], -0.99823 );
        self.assertEqual( cell_id_density_map[5], -13.31 );
        self.assertEqual( cell_id_density_map[7], -0.99823 );
        self.assertEqual( cell_id_density_map[9], -8.027 );
        self.assertEqual( cell_id_density_map[13], -5.65 );
        self.assertEqual( cell_id_density_map[19], -0.001633 );
        self.assertEqual( cell_id_density_map[26], -7.83 );
        self.assertEqual( cell_id_density_map[27], -7.83 );
        self.assertEqual( cell_id_density_map[28], -7.83 );
        self.assertEqual( cell_id_density_map[29], -7.83 );
        self.assertEqual( cell_id_density_map[30], -7.83 );
        self.assertEqual( cell_id_density_map[31], -7.83 );
        self.assertEqual( cell_id_density_map[32], -7.83 );
        self.assertEqual( cell_id_density_map[33], -7.83 );
        self.assertEqual( cell_id_density_map[34], -7.83 );
        self.assertEqual( cell_id_density_map[35], -7.83 );
        self.assertEqual( cell_id_density_map[36], -7.83 );
        self.assertEqual( cell_id_density_map[37], -7.83 );
        self.assertEqual( cell_id_density_map[41], -0.001633 );
        self.assertEqual( cell_id_density_map[48], -7.83 );
        self.assertEqual( cell_id_density_map[49], -7.83 );
        self.assertEqual( cell_id_density_map[50], -7.83 );
        self.assertEqual( cell_id_density_map[51], -7.83 );
        self.assertEqual( cell_id_density_map[52], -7.83 );
        self.assertEqual( cell_id_density_map[53], -7.83 );
        self.assertEqual( cell_id_density_map[54], -7.83 );
        self.assertEqual( cell_id_density_map[55], -7.83 );
        self.assertEqual( cell_id_density_map[56], -7.83 );
        self.assertEqual( cell_id_density_map[57], -7.83 );
        self.assertEqual( cell_id_density_map[58], -7.83 );
        self.assertEqual( cell_id_density_map[59], -7.83 );
        self.assertEqual( cell_id_density_map[63], -0.001633 );
        self.assertEqual( cell_id_density_map[70], -7.83 );
        self.assertEqual( cell_id_density_map[71], -7.83 );
        self.assertEqual( cell_id_density_map[72], -7.83 );
        self.assertEqual( cell_id_density_map[73], -7.83 );
        self.assertEqual( cell_id_density_map[74], -7.83 );
        self.assertEqual( cell_id_density_map[75], -7.83 );
        self.assertEqual( cell_id_density_map[76], -7.83 );
        self.assertEqual( cell_id_density_map[77], -7.83 );
        self.assertEqual( cell_id_density_map[78], -7.83 );
        self.assertEqual( cell_id_density_map[79], -7.83 );
        self.assertEqual( cell_id_density_map[80], -7.83 );
        self.assertEqual( cell_id_density_map[81], -7.83 );
        self.assertEqual( cell_id_density_map[82], -0.001633 );
        self.assertEqual( cell_id_density_map[83], -5.65 );
        self.assertEqual( cell_id_density_map[88], -8.027 );  
        self.assertEqual( cell_id_density_map[136], -7.75 );
        self.assertEqual( cell_id_density_map[152], -0.001633 );
        self.assertEqual( cell_id_density_map[154], -5.65 );
        self.assertEqual( cell_id_density_map[166], -0.001633 );
        self.assertEqual( cell_id_density_map[168], -5.65 );
        self.assertEqual( cell_id_density_map[184], -0.001633 );

    def testGetCellEstimatorData(self):
        "*Test Geometry.Model getCellEstimatorData"
        cell_estimator_id_data_map = self.model.getCellEstimatorData()

        self.assertEqual( len(cell_estimator_id_data_map), 5 )
        self.assertTrue( 0 in cell_estimator_id_data_map )
        self.assertTrue( 1 in cell_estimator_id_data_map )
        self.assertTrue( 2 in cell_estimator_id_data_map )
        self.assertTrue( 3 in cell_estimator_id_data_map )
        self.assertTrue( 4 in cell_estimator_id_data_map )

        estimator_data = cell_estimator_id_data_map[0]
        self.assertEqual( estimator_data[0], Geometry.CELL_TRACK_LENGTH_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.NEUTRON )
        self.assertEqual( len(estimator_data[2]), 55 )

        estimator_data = cell_estimator_id_data_map[1]
        self.assertEqual( estimator_data[0], Geometry.CELL_TRACK_LENGTH_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.PHOTON )
        self.assertEqual( len(estimator_data[2]), 55 )

        estimator_data = cell_estimator_id_data_map[2]
        self.assertEqual( estimator_data[0], Geometry.CELL_COLLISION_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.NEUTRON )
        self.assertEqual( len(estimator_data[2]), 36 )

        estimator_data = cell_estimator_id_data_map[3]
        self.assertEqual( estimator_data[0], Geometry.CELL_COLLISION_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.PHOTON )
        self.assertEqual( len(estimator_data[2]), 36 )

        estimator_data = cell_estimator_id_data_map[4]
        self.assertEqual( estimator_data[0], Geometry.CELL_PULSE_HEIGHT_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.PHOTON )
        self.assertEqual( len(estimator_data[2]), 2 )

    def testDoesCellExist(self):
        "*Test Geometry.Model doesCellExist"
        
        self.assertFalse( self.model.doesCellExist( 0 ) )
        self.assertTrue( self.model.doesCellExist( 1 ) )
        self.assertFalse( self.model.doesCellExist( 2 ) )
        self.assertTrue( self.model.doesCellExist( 3 ) )
        self.assertFalse( self.model.doesCellExist( 4 ) )
        self.assertTrue( self.model.doesCellExist( 5 ) )
        self.assertFalse( self.model.doesCellExist( 6 ) )
        self.assertTrue( self.model.doesCellExist( 7 ) )
        self.assertFalse( self.model.doesCellExist( 8 ) )
        self.assertTrue( self.model.doesCellExist( 9 ) )
        self.assertTrue( self.model.doesCellExist( 13 ) )
        self.assertTrue( self.model.doesCellExist( 19 ) )
        self.assertTrue( self.model.doesCellExist( 26 ) )
        self.assertTrue( self.model.doesCellExist( 27 ) )
        self.assertTrue( self.model.doesCellExist( 28 ) )
        self.assertTrue( self.model.doesCellExist( 29 ) )
        self.assertTrue( self.model.doesCellExist( 30 ) )
        self.assertTrue( self.model.doesCellExist( 31 ) )
        self.assertTrue( self.model.doesCellExist( 32 ) )
        self.assertTrue( self.model.doesCellExist( 33 ) )
        self.assertTrue( self.model.doesCellExist( 34 ) )
        self.assertTrue( self.model.doesCellExist( 35 ) )
        self.assertTrue( self.model.doesCellExist( 36 ) )
        self.assertTrue( self.model.doesCellExist( 37 ) )
        self.assertTrue( self.model.doesCellExist( 41 ) )
        self.assertTrue( self.model.doesCellExist( 48 ) )
        self.assertTrue( self.model.doesCellExist( 49 ) )
        self.assertTrue( self.model.doesCellExist( 50 ) )
        self.assertTrue( self.model.doesCellExist( 51 ) )
        self.assertTrue( self.model.doesCellExist( 52 ) )
        self.assertTrue( self.model.doesCellExist( 53 ) )
        self.assertTrue( self.model.doesCellExist( 54 ) )
        self.assertTrue( self.model.doesCellExist( 55 ) )
        self.assertTrue( self.model.doesCellExist( 56 ) )
        self.assertTrue( self.model.doesCellExist( 57 ) )
        self.assertTrue( self.model.doesCellExist( 58 ) )
        self.assertTrue( self.model.doesCellExist( 59 ) )
        self.assertTrue( self.model.doesCellExist( 63 ) )
        self.assertTrue( self.model.doesCellExist( 70 ) )
        self.assertTrue( self.model.doesCellExist( 71 ) )
        self.assertTrue( self.model.doesCellExist( 72 ) )
        self.assertTrue( self.model.doesCellExist( 73 ) )
        self.assertTrue( self.model.doesCellExist( 74 ) )
        self.assertTrue( self.model.doesCellExist( 75 ) )
        self.assertTrue( self.model.doesCellExist( 76 ) )
        self.assertTrue( self.model.doesCellExist( 77 ) )
        self.assertTrue( self.model.doesCellExist( 78 ) )
        self.assertTrue( self.model.doesCellExist( 79 ) )
        self.assertTrue( self.model.doesCellExist( 80 ) )
        self.assertTrue( self.model.doesCellExist( 81 ) )
        self.assertTrue( self.model.doesCellExist( 82 ) )
        self.assertTrue( self.model.doesCellExist( 83 ) )
        self.assertTrue( self.model.doesCellExist( 88 ) )
        self.assertTrue( self.model.doesCellExist( 136 ) )
        self.assertTrue( self.model.doesCellExist( 152 ) )
        self.assertTrue( self.model.doesCellExist( 154 ) )
        self.assertTrue( self.model.doesCellExist( 166 ) )
        self.assertTrue( self.model.doesCellExist( 168 ) )
        self.assertTrue( self.model.doesCellExist( 184 ) )
        self.assertTrue( self.model.doesCellExist( 188 ) )
        self.assertTrue( self.model.doesCellExist( 189 ) )

    def testIsTerminationCell(self):
        "*Test Geometry.Model isTerminationCell"

        self.assertFalse( self.model.isTerminationCell( 1 ) )
        self.assertFalse( self.model.isTerminationCell( 3 ) )
        self.assertFalse( self.model.isTerminationCell( 5 ) )
        self.assertFalse( self.model.isTerminationCell( 7 ) )
        self.assertFalse( self.model.isTerminationCell( 9 ) )
        self.assertFalse( self.model.isTerminationCell( 13 ) )
        self.assertFalse( self.model.isTerminationCell( 19 ) )
        self.assertFalse( self.model.isTerminationCell( 26 ) )
        self.assertFalse( self.model.isTerminationCell( 27 ) )
        self.assertFalse( self.model.isTerminationCell( 28 ) )
        self.assertFalse( self.model.isTerminationCell( 29 ) )
        self.assertFalse( self.model.isTerminationCell( 30 ) )
        self.assertFalse( self.model.isTerminationCell( 31 ) )
        self.assertFalse( self.model.isTerminationCell( 32 ) )
        self.assertFalse( self.model.isTerminationCell( 33 ) )
        self.assertFalse( self.model.isTerminationCell( 34 ) )
        self.assertFalse( self.model.isTerminationCell( 35 ) )
        self.assertFalse( self.model.isTerminationCell( 36 ) )
        self.assertFalse( self.model.isTerminationCell( 37 ) )
        self.assertFalse( self.model.isTerminationCell( 41 ) )
        self.assertFalse( self.model.isTerminationCell( 48 ) )
        self.assertFalse( self.model.isTerminationCell( 49 ) )
        self.assertFalse( self.model.isTerminationCell( 50 ) )
        self.assertFalse( self.model.isTerminationCell( 51 ) )
        self.assertFalse( self.model.isTerminationCell( 52 ) )
        self.assertFalse( self.model.isTerminationCell( 53 ) )
        self.assertFalse( self.model.isTerminationCell( 54 ) )
        self.assertFalse( self.model.isTerminationCell( 55 ) )
        self.assertFalse( self.model.isTerminationCell( 56 ) )
        self.assertFalse( self.model.isTerminationCell( 57 ) )
        self.assertFalse( self.model.isTerminationCell( 58 ) )
        self.assertFalse( self.model.isTerminationCell( 59 ) )
        self.assertFalse( self.model.isTerminationCell( 63 ) )
        self.assertFalse( self.model.isTerminationCell( 70 ) )
        self.assertFalse( self.model.isTerminationCell( 71 ) )
        self.assertFalse( self.model.isTerminationCell( 72 ) )
        self.assertFalse( self.model.isTerminationCell( 73 ) )
        self.assertFalse( self.model.isTerminationCell( 74 ) )
        self.assertFalse( self.model.isTerminationCell( 75 ) )
        self.assertFalse( self.model.isTerminationCell( 76 ) )
        self.assertFalse( self.model.isTerminationCell( 77 ) )
        self.assertFalse( self.model.isTerminationCell( 78 ) )
        self.assertFalse( self.model.isTerminationCell( 79 ) )
        self.assertFalse( self.model.isTerminationCell( 80 ) )
        self.assertFalse( self.model.isTerminationCell( 81 ) )
        self.assertFalse( self.model.isTerminationCell( 82 ) )
        self.assertFalse( self.model.isTerminationCell( 83 ) )
        self.assertFalse( self.model.isTerminationCell( 88 ) )
        self.assertFalse( self.model.isTerminationCell( 136 ) )
        self.assertFalse( self.model.isTerminationCell( 152 ) )
        self.assertFalse( self.model.isTerminationCell( 154 ) )
        self.assertFalse( self.model.isTerminationCell( 166 ) )
        self.assertFalse( self.model.isTerminationCell( 168 ) )
        self.assertFalse( self.model.isTerminationCell( 184 ) )
        self.assertTrue( self.model.isTerminationCell( 188 ) )
        self.assertFalse( self.model.isTerminationCell( 189 ) )

    def testIsVoidCell(self):
        "*Test Geometry.Model isVoidCell"

        self.assertFalse( self.model.isVoidCell( 1 ) )
        self.assertFalse( self.model.isVoidCell( 3 ) )
        self.assertFalse( self.model.isVoidCell( 5 ) )
        self.assertFalse( self.model.isVoidCell( 7 ) )
        self.assertFalse( self.model.isVoidCell( 9 ) )
        self.assertFalse( self.model.isVoidCell( 13 ) )
        self.assertFalse( self.model.isVoidCell( 19 ) )
        self.assertFalse( self.model.isVoidCell( 26 ) )
        self.assertFalse( self.model.isVoidCell( 27 ) )
        self.assertFalse( self.model.isVoidCell( 28 ) )
        self.assertFalse( self.model.isVoidCell( 29 ) )
        self.assertFalse( self.model.isVoidCell( 30 ) )
        self.assertFalse( self.model.isVoidCell( 31 ) )
        self.assertFalse( self.model.isVoidCell( 32 ) )
        self.assertFalse( self.model.isVoidCell( 33 ) )
        self.assertFalse( self.model.isVoidCell( 34 ) )
        self.assertFalse( self.model.isVoidCell( 35 ) )
        self.assertFalse( self.model.isVoidCell( 36 ) )
        self.assertFalse( self.model.isVoidCell( 37 ) )
        self.assertFalse( self.model.isVoidCell( 41 ) )
        self.assertFalse( self.model.isVoidCell( 48 ) )
        self.assertFalse( self.model.isVoidCell( 49 ) )
        self.assertFalse( self.model.isVoidCell( 50 ) )
        self.assertFalse( self.model.isVoidCell( 51 ) )
        self.assertFalse( self.model.isVoidCell( 52 ) )
        self.assertFalse( self.model.isVoidCell( 53 ) )
        self.assertFalse( self.model.isVoidCell( 54 ) )
        self.assertFalse( self.model.isVoidCell( 55 ) )
        self.assertFalse( self.model.isVoidCell( 56 ) )
        self.assertFalse( self.model.isVoidCell( 57 ) )
        self.assertFalse( self.model.isVoidCell( 58 ) )
        self.assertFalse( self.model.isVoidCell( 59 ) )
        self.assertFalse( self.model.isVoidCell( 63 ) )
        self.assertFalse( self.model.isVoidCell( 70 ) )
        self.assertFalse( self.model.isVoidCell( 71 ) )
        self.assertFalse( self.model.isVoidCell( 72 ) )
        self.assertFalse( self.model.isVoidCell( 73 ) )
        self.assertFalse( self.model.isVoidCell( 74 ) )
        self.assertFalse( self.model.isVoidCell( 75 ) )
        self.assertFalse( self.model.isVoidCell( 76 ) )
        self.assertFalse( self.model.isVoidCell( 77 ) )
        self.assertFalse( self.model.isVoidCell( 78 ) )
        self.assertFalse( self.model.isVoidCell( 79 ) )
        self.assertFalse( self.model.isVoidCell( 80 ) )
        self.assertFalse( self.model.isVoidCell( 81 ) )
        self.assertFalse( self.model.isVoidCell( 82 ) )
        self.assertFalse( self.model.isVoidCell( 83 ) )
        self.assertFalse( self.model.isVoidCell( 88 ) )
        self.assertFalse( self.model.isVoidCell( 136 ) )
        self.assertFalse( self.model.isVoidCell( 152 ) )
        self.assertFalse( self.model.isVoidCell( 154 ) )
        self.assertFalse( self.model.isVoidCell( 166 ) )
        self.assertFalse( self.model.isVoidCell( 168 ) )
        self.assertFalse( self.model.isVoidCell( 184 ) )
        self.assertTrue( self.model.isVoidCell( 188 ) )
        self.assertTrue( self.model.isVoidCell( 189 ) )

    def testGetCellVolume(self):
        "*Test Geometry.Model getCellVolume"

        self.assertAlmostEqual( self.model.getCellVolume( 53 ), 98.322384, delta=1e-3 )

    def testGetSurfaces(self):
        "*Test Geometry.AdvancedModel getSurfaces"
        
        surfaces = self.model.getSurfaces()
        self.assertTrue( len(surfaces), 293 )

    def testGetSurfaceEstimatorData(self):
        "*Test Geometry.AdvancedModel getSurfaceEstimatorData"

        surface_estimator_id_data_map = self.model.getSurfaceEstimatorData()
        self.assertEqual( len(surface_estimator_id_data_map), 4 )
        self.assertTrue( 5 in surface_estimator_id_data_map )
        self.assertTrue( 6 in surface_estimator_id_data_map )
        self.assertTrue( 7 in surface_estimator_id_data_map )
        self.assertTrue( 8 in surface_estimator_id_data_map )

        estimator_data = surface_estimator_id_data_map[5]
        self.assertEqual( estimator_data[0], Geometry.SURFACE_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.NEUTRON )
        self.assertEqual( len(estimator_data[2]), 7 )

        estimator_data = surface_estimator_id_data_map[6]
        self.assertEqual( estimator_data[0], Geometry.SURFACE_FLUX_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.PHOTON )
        self.assertEqual( len(estimator_data[2]), 7 )

        estimator_data = surface_estimator_id_data_map[7]
        self.assertEqual( estimator_data[0], Geometry.SURFACE_CURRENT_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.NEUTRON )
        self.assertEqual( len(estimator_data[2]), 7 )

        estimator_data = surface_estimator_id_data_map[8]
        self.assertEqual( estimator_data[0], Geometry.SURFACE_CURRENT_ESTIMATOR )
        self.assertEqual( estimator_data[1], Geometry.PHOTON )
        self.assertEqual( len(estimator_data[2]), 7 )

    def testDoesSurfaceExist(self):
        "*Test Geometry.AdvancedModel doesSurfaceExist"

        self.assertFalse( self.model.doesSurfaceExist( 0 ) )
        self.assertTrue( self.model.doesSurfaceExist( 1 ) )
        self.assertFalse( self.model.doesSurfaceExist( 2 ) )
        self.assertFalse( self.model.doesSurfaceExist( 3 ) )
        self.assertFalse( self.model.doesSurfaceExist( 4 ) )
        self.assertFalse( self.model.doesSurfaceExist( 5 ) )
        self.assertFalse( self.model.doesSurfaceExist( 6 ) )
        self.assertTrue( self.model.doesSurfaceExist( 7 ) )
        self.assertTrue( self.model.doesSurfaceExist( 8 ) )
        self.assertTrue( self.model.doesSurfaceExist( 9 ) )

    def testGetSurfaceArea(self):
        "*Test Geometry.AdvancedModel getSurfaceArea"

        self.assertAlmostEqual( self.model.getSurfaceArea( 242 ), 38.7096, delta=1e-3 )

    def testIsReflectingSurface(self):
        "*Test Geometry.AdvancedModel isReflectingSurface"

        self.assertTrue( self.model.isReflectingSurface( 408 ) )
        self.assertFalse( self.model.isReflectingSurface( 1 ) )

    def testCreateNavigator(self):
        "*Test Geometry.Model createNavigator"

        # If this fails an error will be thrown
        navigator = self.model.createNavigator()
        
#-----------------------------------------------------------------------------#
# Test the Model class with a Root geometry
class RootModelTestCase(unittest.TestCase):
    "TestCase class for Goemetry.Model class using a Root geometry"

    @classmethod
    def setUpClass(cls):
        cls.model = Geometry.createModel( options.root_xmlfile )
        
    def testHasCellEstimatorData(self):
        "*Test Geometry.Model hasCellEstimatorData"
        self.assertFalse( self.model.hasCellEstimatorData() )

    def testGetMaterialIds(self):
        "*Test Geometry.Model getMaterialIds"
        material_ids = self.model.getMaterialIds()

        self.assertEqual( len(material_ids), 1 )
        self.assertTrue( 1 in material_ids )

    def testGetCells(self):
        "*Test Geometry.Model getCells"
        # Get all cells
        cells = self.model.getCells( True, True )

        self.assertEqual( len(cells), 3 )
        self.assertTrue( 1 in cells )
        self.assertTrue( 2 in cells )
        self.assertTrue( 3 in cells )

        # Get all cells except for termination cells
        cells = self.model.getCells( True, False )

        self.assertEqual( len(cells), 2 )
        self.assertTrue( 1 in cells )
        self.assertTrue( 2 in cells )
        self.assertTrue( 3 not in cells )

        # Get all cells except for void cells
        cells = self.model.getCells( False, True )

        self.assertEqual( len(cells), 2 )
        self.assertTrue( 1 not in cells )
        self.assertTrue( 2 in cells )
        self.assertTrue( 3 in cells )

        # Get all cells except for void and termination cells
        cells = self.model.getCells( False, False )

        self.assertEqual( len(cells), 1 )
        self.assertTrue( 1 not in cells )
        self.assertTrue( 2 in cells )
        self.assertTrue( 3 not in cells )

    def testGetCellMaterialIds(self):
        "*Test Geometry.Model getCellMaterialIds"
        cell_id_mat_id_map = self.model.getCellMaterialIds()

        self.assertEqual( len(cell_id_mat_id_map), 1 )
        self.assertTrue( 2 in cell_id_mat_id_map )
        self.assertEqual( cell_id_mat_id_map[2], 1 )

    def testGetCellDensities(self):
        "*Test Geometry.Model getCellDensities"
        cell_id_density_map = self.model.getCellDensities()

        self.assertEqual( len(cell_id_density_map), 1 )
        self.assertTrue( 2 in cell_id_density_map )
        self.assertEqual( cell_id_density_map[2], 1.0 )

    def testGetCellEstimatorData(self):
        "*Test Geometry.Model getCellEstimatorData"
        cell_estimator_id_data_map = self.model.getCellEstimatorData()

        self.assertEqual( len(cell_estimator_id_data_map), 0 )

    def testDoesCellExist(self):
        "*Test Geometry.Model doesCellExist"

        self.assertTrue( self.model.doesCellExist( 1 ) )
        self.assertTrue( self.model.doesCellExist( 2 ) )
        self.assertTrue( self.model.doesCellExist( 3 ) )
        self.assertFalse( self.model.doesCellExist( 4 ) )

    def testIsTerminationCell(self):
        "*Test Geometry.Model isTerminationCell"

        self.assertFalse( self.model.isTerminationCell( 1 ) )
        self.assertFalse( self.model.isTerminationCell( 2 ) )
        self.assertTrue( self.model.isTerminationCell( 3 ) )

    def testIsVoidCell(self):
        "*Test Geometry.Model isVoidCell"

        self.assertTrue( self.model.isVoidCell( 1 ) )
        self.assertFalse( self.model.isVoidCell( 2 ) )
        self.assertFalse( self.model.isVoidCell( 3 ) )

    def testGetCellVolume(self):
        "*Test Geometry.Model getCellVolume"

        self.assertAlmostEqual( self.model.getCellVolume( 1 ), 934.550153050213, delta=1e-6 )
        self.assertAlmostEqual( self.model.getCellVolume( 2 ), 65.4498469497874, delta=1e-6 )
        self.assertAlmostEqual( self.model.getCellVolume( 3 ), 1744.0, delta=1e-6 )

    def testCreateNavigator(self):
        "*Test Geometry.Model createNavigator"

        # If this fails an error will be thrown
        navigator = self.model.createNavigator()

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    if len(options.dagmc_xmlfile) > 0:
        suite.addTest(unittest.makeSuite(DagMCModelTestCase))

    if len(options.root_xmlfile) > 0:
        suite.addTest(unittest.makeSuite(RootModelTestCase))

    print >>sys.stderr, \
        "\n**************************************\n" + \
        "Testing Geometry.Model \n" + \
        "**************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstGeometry.Model.py
#-----------------------------------------------------------------------------#
