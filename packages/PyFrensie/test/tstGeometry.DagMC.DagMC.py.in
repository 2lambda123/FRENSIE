#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Geometry.DagMC.DagMC class unit tests
#  \file   tstGeometry.DagMC.DagMC.py
#  \author Alex Robinson
#  \brief  Unit tests for the Geometry.DagMC.DagMC class 
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-c", "--cadfile", type="string", dest="cadfile",
                  help="set the CAD (.sat) file that DagMC will read")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')
DagMC = importPyFrensieModuleFromBuildDir('Geometry.DagMC')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the DagMC class (pre initialization)
class DagMCPreInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.DagMC.DagMC class (pre initialization)"

    def setUp(self):
        self.geom = DagMC.DagMC

    def testSetTerminationCellPropertyName(self):
        "*Test Geometry.DagMC.DagMC setTerminationCellPropertyName method"
        default_property = self.geom.getTerminationCellPropertyName()
        self.geom.setTerminationCellPropertyName( 'graveyard' )
        self.assertEqual(self.geom.getTerminationCellPropertyName(), 'graveyard')
        self.geom.setTerminationCellPropertyName( default_property )

    def testSetReflectingSurfacePropertyName(self):
        "*Test Geometry.DagMC.DagMC setReflectingSurfacePropertyName method"
        default_property = self.geom.getReflectingSurfacePropertyName()
        self.geom.setReflectingSurfacePropertyName( 'spec.reflect' )
        self.assertEqual(self.geom.getReflectingSurfacePropertyName(), 'spec.reflect')
        self.geom.setReflectingSurfacePropertyName( default_property )

    def testSetMaterialPropertyName(self):
        "*Test Geometry.DagMC.DagMC setMaterialPropertyName method"
        default_property = self.geom.getMaterialPropertyName()
        self.geom.setMaterialPropertyName( 'mat' )
        self.assertEqual(self.geom.getMaterialPropertyName(), 'mat')
        self.geom.setMaterialPropertyName( default_property )

    def testSetDensityPropertyName(self):
        "*Test Geometry.DagMC.DagMC setDensityPropertyName method"
        default_property = self.geom.getDensityPropertyName()
        self.geom.setDensityPropertyName( 'rho' )
        self.assertEqual(self.geom.getDensityPropertyName(), 'rho')
        self.geom.setDensityPropertyName( default_property )

    def testSetEstimatorPropertyName(self):
        "*Test Geometry.DagMC.DagMC setEstimatorPropertyName method"
        default_property = self.geom.getEstimatorPropertyName()
        self.geom.setEstimatorPropertyName( 'tally' )
        self.assertEqual(self.geom.getEstimatorPropertyName(), 'tally')
        self.geom.setEstimatorPropertyName( default_property )

    def testSetSurfaceCurrentName(self):
        "*Test Geometry.DagMC.DagMC setSurfaceCurrentName method"
        default_name = self.geom.getSurfaceCurrentName()
        self.geom.setSurfaceCurrentName( 'surf.cur' )
        self.assertEqual(self.geom.getSurfaceCurrentName(), 'surf.cur')
        self.geom.setSurfaceCurrentName( default_name )

    def testSetSurfaceFluxName(self):
        "*Test Geometry.DagMC.DagMC setSurfaceFluxName method"
        default_name = self.geom.getSurfaceFluxName()
        self.geom.setSurfaceFluxName( 'surf.flux' )
        self.assertEqual(self.geom.getSurfaceFluxName(), 'surf.flux')
        self.geom.setSurfaceFluxName( default_name )

    def testSetCellPulseHeightName(self):
        "*Test Geometry.DagMC.DagMC setCellPulseHeightName method"
        default_name = self.geom.getCellPulseHeightName()
        self.geom.setCellPulseHeightName( 'cell.ph' )
        self.assertEqual(self.geom.getCellPulseHeightName(), 'cell.ph')
        self.geom.setCellPulseHeightName( default_name )

    def testSetCellTrackLengthFluxName(self):
        "*Test Geometry.DagMC.DagMC setCellTrackLengthFluxName method"
        default_name = self.geom.getCellTrackLengthFluxName()
        self.geom.setCellTrackLengthFluxName( 'cell.tl' )
        self.assertEqual(self.geom.getCellTrackLengthFluxName(), 'cell.tl')
        self.geom.setCellTrackLengthFluxName( default_name )

    def testSetCellCollisionFluxName(self):
        "*Test Geometry.DagMC.DagMC setCellCollisionFluxName method"
        default_name = self.geom.getCellCollisionFluxName()
        self.geom.setCellCollisionFluxName( 'cell.c' )
        self.assertEqual(self.geom.getCellCollisionFluxName(), 'cell.c')
        self.geom.setCellCollisionFluxName( default_name )

    def testIsEstimatorTypeValid(self):
        "*Test Geometry.DagMC.DagMC isEstimatorTypeValid method"
        self.assertTrue(self.geom.isEstimatorTypeValid( 'surface.current' ))
        self.assertTrue(self.geom.isEstimatorTypeValid( 'surface.flux' ))
        self.assertTrue(self.geom.isEstimatorTypeValid( 'cell.pulse.height' ))
        self.assertTrue(self.geom.isEstimatorTypeValid( 'cell.tl.flux' ))
        self.assertTrue(self.geom.isEstimatorTypeValid( 'cell.c.flux' ))
        self.assertFalse(self.geom.isEstimatorTypeValid( 'what?' ))

    def testIsCellEstimatorTypeValid(self):
        "*Test Geometry.DagMC.DagMC isCellEstimatorTypeValid method"
        self.assertFalse(self.geom.isCellEstimatorTypeValid( 'surface.current' ))
        self.assertFalse(self.geom.isCellEstimatorTypeValid( 'surface.flux' ))
        self.assertTrue(self.geom.isCellEstimatorTypeValid( 'cell.pulse.height' ))
        self.assertTrue(self.geom.isCellEstimatorTypeValid( 'cell.tl.flux' ))
        self.assertTrue(self.geom.isCellEstimatorTypeValid( 'cell.c.flux' ))
        self.assertFalse(self.geom.isCellEstimatorTypeValid( 'what?' ))

    def testIsSurfaceEstimatorTypeValid(self):
        "*Test Geometry.DagMC.DagMC isSurfaceEstimatorTypeValid method"
        self.assertTrue(self.geom.isSurfaceEstimatorTypeValid( 'surface.current' ))
        self.assertTrue(self.geom.isSurfaceEstimatorTypeValid( 'surface.flux' ))
        self.assertFalse(self.geom.isSurfaceEstimatorTypeValid( 'cell.pulse.height' ))
        self.assertFalse(self.geom.isSurfaceEstimatorTypeValid( 'cell.tl.flux' ))
        self.assertFalse(self.geom.isSurfaceEstimatorTypeValid( 'cell.c.flux' ))
        self.assertFalse(self.geom.isSurfaceEstimatorTypeValid( 'what?' ))

    def testIsParticleTypeValid(self):
        "*Test Geometry.DagMC.DagMC isParticleTypeValid method"
        self.assertTrue(self.geom.isParticleTypeValid( 'n' ))
        self.assertTrue(self.geom.isParticleTypeValid( 'p' ))
        self.assertTrue(self.geom.isParticleTypeValid( 'e' ))
        self.assertFalse(self.geom.isParticleTypeValid( 'z' ))
    
#-----------------------------------------------------------------------------#
# Test the DagMC class (post initialization)
class DagMCPostInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.DagMC.DagMC class (post initialization)"
    @classmethod
    def setUpClass(cls):
        cls.geom = DagMC.DagMC
        cls.geom.setTerminationCellPropertyName( "graveyard" )
        cls.geom.setMaterialPropertyName( "mat" )
        cls.geom.setDensityPropertyName( "rho" )
        cls.geom.setEstimatorPropertyName( "tally" )
        cls.geom.initialize(options.cadfile, 1e-3)

    def testGetMaterialIds(self):
        "*Test Geometry.DagMC.DagMC getMaterialIds method"
        mat_ids = self.geom.getMaterialIds()
        self.assertEqual(len(mat_ids), 8)
        self.assertTrue(1 in mat_ids)
        self.assertTrue(2 in mat_ids)
        self.assertTrue(3 in mat_ids)
        self.assertTrue(4 in mat_ids)
        self.assertTrue(7 in mat_ids)
        self.assertTrue(8 in mat_ids)
        self.assertTrue(9 in mat_ids)
        self.assertTrue(10 in mat_ids)

    def testGetCellEstimatorData(self):
        "*Test Geometry.DagMC.DagMC getCellEstimatorData method"
        cell_estimator_data_map = self.geom.getCellEstimatorData()
        self.assertEqual(len(cell_estimator_data_map), 5)
        self.assertTrue(0 in cell_estimator_data_map)
        self.assertTrue(1 in cell_estimator_data_map)
        self.assertTrue(2 in cell_estimator_data_map)
        self.assertTrue(3 in cell_estimator_data_map)
        self.assertTrue(4 in cell_estimator_data_map)

        cell_estimator_data = cell_estimator_data_map[0]
        self.assertEqual(cell_estimator_data.first, "cell.tl.flux")
        self.assertEqual(cell_estimator_data.second, "n")
        cells = cell_estimator_data.third
        self.assertEqual(len(cells), 55)

        cell_estimator_data = cell_estimator_data_map[1]
        self.assertEqual(cell_estimator_data.first, "cell.tl.flux")
        self.assertEqual(cell_estimator_data.second, "p")
        cells = cell_estimator_data.third
        self.assertEqual(len(cells), 55)

        cell_estimator_data = cell_estimator_data_map[2]
        self.assertEqual(cell_estimator_data.first, "cell.c.flux")
        self.assertEqual(cell_estimator_data.second, "n")
        cells = cell_estimator_data.third
        self.assertEqual(len(cells), 36)

        cell_estimator_data = cell_estimator_data_map[3]
        self.assertEqual(cell_estimator_data.first, "cell.c.flux")
        self.assertEqual(cell_estimator_data.second, "p")
        cells = cell_estimator_data.third
        self.assertEqual(len(cells), 36)

        cell_estimator_data = cell_estimator_data_map[4]
        self.assertEqual(cell_estimator_data.first, "cell.pulse.height")
        self.assertEqual(cell_estimator_data.second, "p")
        cells = cell_estimator_data.third
        self.assertEqual(len(cells), 2)

    def testGetSurfaceEstimatorData(self):
        "*Test Geometry.DagMC.DagMC getSurfaceEstimatorData method"
        surface_estimator_data_map = self.geom.getSurfaceEstimatorData()
        self.assertEqual(len(surface_estimator_data_map), 4)
        self.assertTrue(5 in surface_estimator_data_map)
        self.assertTrue(6 in surface_estimator_data_map)
        self.assertTrue(7 in surface_estimator_data_map)
        self.assertTrue(8 in surface_estimator_data_map)

        surface_estimator_data = surface_estimator_data_map[5]
        self.assertEqual(surface_estimator_data.first, "surface.flux")
        self.assertEqual(surface_estimator_data.second, "n")
        surfaces = surface_estimator_data.third
        self.assertEqual(len(surfaces), 7)

        surface_estimator_data = surface_estimator_data_map[6]
        self.assertEqual(surface_estimator_data.first, "surface.flux")
        self.assertEqual(surface_estimator_data.second, "p")
        surfaces = surface_estimator_data.third
        self.assertEqual(len(surfaces), 7)

        surface_estimator_data = surface_estimator_data_map[7]
        self.assertEqual(surface_estimator_data.first, "surface.current")
        self.assertEqual(surface_estimator_data.second, "n")
        surfaces = surface_estimator_data.third
        self.assertEqual(len(surfaces), 7)

        surface_estimator_data = surface_estimator_data_map[8]
        self.assertEqual(surface_estimator_data.first, "surface.current")
        self.assertEqual(surface_estimator_data.second, "p")
        surfaces = surface_estimator_data.third
        self.assertEqual(len(surfaces), 7)

    def testDoesCellExist(self):
        "*Test Geometry.DagMC.DagMC doesCellExist method"
        self.assertFalse(self.geom.doesCellExist( 0 ))
        self.assertTrue(self.geom.doesCellExist( 1 ))
        self.assertFalse(self.geom.doesCellExist( 2 ))
        self.assertTrue(self.geom.doesCellExist( 3 ))
        self.assertFalse(self.geom.doesCellExist( 4 ))
        self.assertTrue(self.geom.doesCellExist( 5 ))
        self.assertFalse(self.geom.doesCellExist( 6 ))
        self.assertTrue(self.geom.doesCellExist( 7 ))
        self.assertFalse(self.geom.doesCellExist( 8 ))
        self.assertTrue(self.geom.doesCellExist( 9 ))
        self.assertTrue(self.geom.doesCellExist( 13 ))
        self.assertTrue(self.geom.doesCellExist( 19 ))
        self.assertTrue(self.geom.doesCellExist( 26 ))
        self.assertTrue(self.geom.doesCellExist( 27 ))
        self.assertTrue(self.geom.doesCellExist( 28 ))
        self.assertTrue(self.geom.doesCellExist( 29 ))
        self.assertTrue(self.geom.doesCellExist( 30 ))
        self.assertTrue(self.geom.doesCellExist( 31 ))
        self.assertTrue(self.geom.doesCellExist( 32 ))
        self.assertTrue(self.geom.doesCellExist( 33 ))
        self.assertTrue(self.geom.doesCellExist( 34 ))
        self.assertTrue(self.geom.doesCellExist( 35 ))
        self.assertTrue(self.geom.doesCellExist( 36 ))
        self.assertTrue(self.geom.doesCellExist( 37 ))
        self.assertTrue(self.geom.doesCellExist( 41 ))
        self.assertTrue(self.geom.doesCellExist( 48 ))
        self.assertTrue(self.geom.doesCellExist( 49 ))
        self.assertTrue(self.geom.doesCellExist( 50 ))
        self.assertTrue(self.geom.doesCellExist( 51 ))
        self.assertTrue(self.geom.doesCellExist( 52 ))
        self.assertTrue(self.geom.doesCellExist( 53 ))
        self.assertTrue(self.geom.doesCellExist( 54 ))
        self.assertTrue(self.geom.doesCellExist( 55 ))
        self.assertTrue(self.geom.doesCellExist( 56 ))
        self.assertTrue(self.geom.doesCellExist( 57 ))
        self.assertTrue(self.geom.doesCellExist( 58 ))
        self.assertTrue(self.geom.doesCellExist( 59 ))
        self.assertTrue(self.geom.doesCellExist( 63 ))
        self.assertTrue(self.geom.doesCellExist( 70 ))
        self.assertTrue(self.geom.doesCellExist( 71 ))
        self.assertTrue(self.geom.doesCellExist( 72 ))
        self.assertTrue(self.geom.doesCellExist( 73 ))
        self.assertTrue(self.geom.doesCellExist( 74 ))
        self.assertTrue(self.geom.doesCellExist( 75 ))
        self.assertTrue(self.geom.doesCellExist( 76 ))
        self.assertTrue(self.geom.doesCellExist( 77 ))
        self.assertTrue(self.geom.doesCellExist( 78 ))
        self.assertTrue(self.geom.doesCellExist( 79 ))
        self.assertTrue(self.geom.doesCellExist( 80 ))
        self.assertTrue(self.geom.doesCellExist( 81 ))
        self.assertTrue(self.geom.doesCellExist( 82 ))
        self.assertTrue(self.geom.doesCellExist( 83 ))
        self.assertTrue(self.geom.doesCellExist( 88 ))
        self.assertTrue(self.geom.doesCellExist( 136 ))
        self.assertTrue(self.geom.doesCellExist( 152 ))
        self.assertTrue(self.geom.doesCellExist( 154 ))
        self.assertTrue(self.geom.doesCellExist( 166 ))
        self.assertTrue(self.geom.doesCellExist( 168 ))
        self.assertTrue(self.geom.doesCellExist( 184 ))
        self.assertTrue(self.geom.doesCellExist( 188 ))
        
        #Implicit compliment cell
        self.assertTrue(self.geom.doesCellExist( 189 )) 

    def testDoesSurfaceExist(self):
        "*Test Geometry.DagMC.DagMC doesSurfaceExist method"
        self.assertFalse(self.geom.doesSurfaceExist( 0 ))
        self.assertTrue(self.geom.doesSurfaceExist( 1 ))
        self.assertFalse(self.geom.doesSurfaceExist( 2 ))
        self.assertFalse(self.geom.doesSurfaceExist( 3 ))
        self.assertFalse(self.geom.doesSurfaceExist( 4 ))
        self.assertFalse(self.geom.doesSurfaceExist( 5 ))
        self.assertFalse(self.geom.doesSurfaceExist( 6 ))
        self.assertTrue(self.geom.doesSurfaceExist( 7 ))
        self.assertTrue(self.geom.doesSurfaceExist( 8 ))
        self.assertTrue(self.geom.doesSurfaceExist( 9 ))

    def testGetCells(self):
        "*Test Geometry.DagMC.DagMC getCells method"
        cells = self.geom.getCells()
        self.assertEqual(len(cells), 56)
        self.assertTrue(1 in cells)
        self.assertTrue(3 in cells)
        self.assertTrue(5 in cells)
        self.assertTrue(7 in cells)
        self.assertTrue(9 in cells)
        self.assertTrue(13 in cells)
        self.assertTrue(19 in cells)
        self.assertTrue(26 in cells)
        self.assertTrue(27 in cells)
        self.assertTrue(28 in cells)
        self.assertTrue(29 in cells)
        self.assertTrue(30 in cells)
        self.assertTrue(31 in cells)
        self.assertTrue(32 in cells)
        self.assertTrue(33 in cells)
        self.assertTrue(34 in cells)
        self.assertTrue(35 in cells)
        self.assertTrue(36 in cells)
        self.assertTrue(37 in cells)
        self.assertTrue(41 in cells)
        self.assertTrue(48 in cells)
        self.assertTrue(49 in cells)
        self.assertTrue(50 in cells)
        self.assertTrue(51 in cells)
        self.assertTrue(52 in cells)
        self.assertTrue(53 in cells)
        self.assertTrue(54 in cells)
        self.assertTrue(55 in cells)
        self.assertTrue(56 in cells)
        self.assertTrue(57 in cells)
        self.assertTrue(58 in cells)
        self.assertTrue(59 in cells)
        self.assertTrue(63 in cells)
        self.assertTrue(70 in cells)
        self.assertTrue(71 in cells)
        self.assertTrue(72 in cells)
        self.assertTrue(73 in cells)
        self.assertTrue(74 in cells)
        self.assertTrue(75 in cells)
        self.assertTrue(76 in cells)
        self.assertTrue(77 in cells)
        self.assertTrue(78 in cells)
        self.assertTrue(79 in cells)
        self.assertTrue(80 in cells)
        self.assertTrue(81 in cells)
        self.assertTrue(82 in cells)
        self.assertTrue(83 in cells)
        self.assertTrue(88 in cells)
        self.assertTrue(136 in cells)
        self.assertTrue(152 in cells)
        self.assertTrue(154 in cells)
        self.assertTrue(166 in cells)
        self.assertTrue(168 in cells)
        self.assertTrue(184 in cells)
        self.assertTrue(188 in cells)
        self.assertTrue(189 in cells)

    def testGetSurfaces(self):
        "*Test Geometry.DagMC.DagMC getSurfaces method"
        surfaces = self.geom.getSurfaces()
        self.assertEqual(len(surfaces), 293)

    def testGetCellVolume(self):
        "*Test Geometry.DagMC.DagMC getCellVolume method"
        self.assertAlmostEqual(self.geom.getCellVolume( 53 ), 98.322384, delta=1e-3)

    def testGetSurfaceArea(self):
        "*Test Geometry.DagMC.DagMC getSurfaceArea method"
        self.assertAlmostEqual(self.geom.getSurfaceArea( 242 ), 38.7096, delta=1e-4)

    def testIsTerminationCell(self):
        "*Test Geometry.DagMC.DagMC isTerminationCell method"
        self.assertFalse(self.geom.isTerminationCell( 1 ))
        self.assertFalse(self.geom.isTerminationCell( 3 ))
        self.assertFalse(self.geom.isTerminationCell( 5 ))
        self.assertFalse(self.geom.isTerminationCell( 7 ))
        self.assertFalse(self.geom.isTerminationCell( 9 ))
        self.assertFalse(self.geom.isTerminationCell( 13 ))
        self.assertFalse(self.geom.isTerminationCell( 19 ))
        self.assertFalse(self.geom.isTerminationCell( 26 ))
        self.assertFalse(self.geom.isTerminationCell( 27 ))
        self.assertFalse(self.geom.isTerminationCell( 28 ))
        self.assertFalse(self.geom.isTerminationCell( 29 ))
        self.assertFalse(self.geom.isTerminationCell( 30 ))
        self.assertFalse(self.geom.isTerminationCell( 31 ))
        self.assertFalse(self.geom.isTerminationCell( 32 ))
        self.assertFalse(self.geom.isTerminationCell( 33 ))
        self.assertFalse(self.geom.isTerminationCell( 34 ))
        self.assertFalse(self.geom.isTerminationCell( 35 ))
        self.assertFalse(self.geom.isTerminationCell( 36 ))
        self.assertFalse(self.geom.isTerminationCell( 37 ))
        self.assertFalse(self.geom.isTerminationCell( 41 ))
        self.assertFalse(self.geom.isTerminationCell( 48 ))
        self.assertFalse(self.geom.isTerminationCell( 49 ))
        self.assertFalse(self.geom.isTerminationCell( 50 ))
        self.assertFalse(self.geom.isTerminationCell( 51 ))
        self.assertFalse(self.geom.isTerminationCell( 52 ))
        self.assertFalse(self.geom.isTerminationCell( 53 ))
        self.assertFalse(self.geom.isTerminationCell( 54 ))
        self.assertFalse(self.geom.isTerminationCell( 55 ))
        self.assertFalse(self.geom.isTerminationCell( 56 ))
        self.assertFalse(self.geom.isTerminationCell( 57 ))
        self.assertFalse(self.geom.isTerminationCell( 58 ))
        self.assertFalse(self.geom.isTerminationCell( 59 ))
        self.assertFalse(self.geom.isTerminationCell( 63 ))
        self.assertFalse(self.geom.isTerminationCell( 70 ))
        self.assertFalse(self.geom.isTerminationCell( 71 ))
        self.assertFalse(self.geom.isTerminationCell( 72 ))
        self.assertFalse(self.geom.isTerminationCell( 73 ))
        self.assertFalse(self.geom.isTerminationCell( 74 ))
        self.assertFalse(self.geom.isTerminationCell( 75 ))
        self.assertFalse(self.geom.isTerminationCell( 76 ))
        self.assertFalse(self.geom.isTerminationCell( 77 ))
        self.assertFalse(self.geom.isTerminationCell( 78 ))
        self.assertFalse(self.geom.isTerminationCell( 79 ))
        self.assertFalse(self.geom.isTerminationCell( 80 ))
        self.assertFalse(self.geom.isTerminationCell( 81 ))
        self.assertFalse(self.geom.isTerminationCell( 82 ))
        self.assertFalse(self.geom.isTerminationCell( 83 ))
        self.assertFalse(self.geom.isTerminationCell( 88 ))
        self.assertFalse(self.geom.isTerminationCell( 136 ))
        self.assertFalse(self.geom.isTerminationCell( 152 ))
        self.assertFalse(self.geom.isTerminationCell( 154 ))
        self.assertFalse(self.geom.isTerminationCell( 166 ))
        self.assertFalse(self.geom.isTerminationCell( 168 ))
        self.assertFalse(self.geom.isTerminationCell( 184 ))
        self.assertTrue(self.geom.isTerminationCell( 188 ))
        self.assertFalse(self.geom.isTerminationCell( 189 ))

    def testIsVoidCell(self):
        "*Test Geometry.DagMC.DagMC isVoidCell method"
        self.assertFalse(self.geom.isVoidCell( 1 ))
        self.assertFalse(self.geom.isVoidCell( 3 ))
        self.assertFalse(self.geom.isVoidCell( 5 ))
        self.assertFalse(self.geom.isVoidCell( 7 ))
        self.assertFalse(self.geom.isVoidCell( 9 ))
        self.assertFalse(self.geom.isVoidCell( 13 ))
        self.assertFalse(self.geom.isVoidCell( 19 ))
        self.assertFalse(self.geom.isVoidCell( 26 ))
        self.assertFalse(self.geom.isVoidCell( 27 ))
        self.assertFalse(self.geom.isVoidCell( 28 ))
        self.assertFalse(self.geom.isVoidCell( 29 ))
        self.assertFalse(self.geom.isVoidCell( 30 ))
        self.assertFalse(self.geom.isVoidCell( 31 ))
        self.assertFalse(self.geom.isVoidCell( 32 ))
        self.assertFalse(self.geom.isVoidCell( 33 ))
        self.assertFalse(self.geom.isVoidCell( 34 ))
        self.assertFalse(self.geom.isVoidCell( 35 ))
        self.assertFalse(self.geom.isVoidCell( 36 ))
        self.assertFalse(self.geom.isVoidCell( 37 ))
        self.assertFalse(self.geom.isVoidCell( 41 ))
        self.assertFalse(self.geom.isVoidCell( 48 ))
        self.assertFalse(self.geom.isVoidCell( 49 ))
        self.assertFalse(self.geom.isVoidCell( 50 ))
        self.assertFalse(self.geom.isVoidCell( 51 ))
        self.assertFalse(self.geom.isVoidCell( 52 ))
        self.assertFalse(self.geom.isVoidCell( 53 ))
        self.assertFalse(self.geom.isVoidCell( 54 ))
        self.assertFalse(self.geom.isVoidCell( 55 ))
        self.assertFalse(self.geom.isVoidCell( 56 ))
        self.assertFalse(self.geom.isVoidCell( 57 ))
        self.assertFalse(self.geom.isVoidCell( 58 ))
        self.assertFalse(self.geom.isVoidCell( 59 ))
        self.assertFalse(self.geom.isVoidCell( 63 ))
        self.assertFalse(self.geom.isVoidCell( 70 ))
        self.assertFalse(self.geom.isVoidCell( 71 ))
        self.assertFalse(self.geom.isVoidCell( 72 ))
        self.assertFalse(self.geom.isVoidCell( 73 ))
        self.assertFalse(self.geom.isVoidCell( 74 ))
        self.assertFalse(self.geom.isVoidCell( 75 ))
        self.assertFalse(self.geom.isVoidCell( 76 ))
        self.assertFalse(self.geom.isVoidCell( 77 ))
        self.assertFalse(self.geom.isVoidCell( 78 ))
        self.assertFalse(self.geom.isVoidCell( 79 ))
        self.assertFalse(self.geom.isVoidCell( 80 ))
        self.assertFalse(self.geom.isVoidCell( 81 ))
        self.assertFalse(self.geom.isVoidCell( 82 ))
        self.assertFalse(self.geom.isVoidCell( 83 ))
        self.assertFalse(self.geom.isVoidCell( 88 ))
        self.assertFalse(self.geom.isVoidCell( 136 ))
        self.assertFalse(self.geom.isVoidCell( 152 ))
        self.assertFalse(self.geom.isVoidCell( 154 ))
        self.assertFalse(self.geom.isVoidCell( 166 ))
        self.assertFalse(self.geom.isVoidCell( 168 ))
        self.assertFalse(self.geom.isVoidCell( 184 ))
        self.assertTrue(self.geom.isVoidCell( 188 ))
        self.assertTrue(self.geom.isVoidCell( 189 ))

    def testIsReflectingSurface(self):
        "*Test Geometry.DagMC.DagMC isReflectingSurface method"
        self.assertTrue(self.geom.isReflectingSurface( 408 ))
        self.assertFalse(self.geom.isReflectingSurface( 1 ))

    def testGetCellMaterialIds(self):
        "*Test Geometry.DagMC.DagMC getCellMaterialIds method"
        cell_id_mat_id_map = self.geom.getCellMaterialIds()
        self.assertEqual(len(cell_id_mat_id_map), 54)
        self.assertEqual(cell_id_mat_id_map[9], 1)
        self.assertEqual(cell_id_mat_id_map[88], 1)
        self.assertEqual(cell_id_mat_id_map[136], 2)
        self.assertEqual(cell_id_mat_id_map[19], 3)
        self.assertEqual(cell_id_mat_id_map[41], 3)
        self.assertEqual(cell_id_mat_id_map[63], 3)
        self.assertEqual(cell_id_mat_id_map[82], 3)
        self.assertEqual(cell_id_mat_id_map[152], 3)
        self.assertEqual(cell_id_mat_id_map[166], 3)
        self.assertEqual(cell_id_mat_id_map[184], 3)
        self.assertEqual(cell_id_mat_id_map[3], 4)
        self.assertEqual(cell_id_mat_id_map[7], 4)
        self.assertEqual(cell_id_mat_id_map[13], 7)
        self.assertEqual(cell_id_mat_id_map[83], 7)
        self.assertEqual(cell_id_mat_id_map[154], 7)
        self.assertEqual(cell_id_mat_id_map[168], 7)
        self.assertEqual(cell_id_mat_id_map[1], 8)
        self.assertEqual(cell_id_mat_id_map[26], 9)
        self.assertEqual(cell_id_mat_id_map[27], 9)
        self.assertEqual(cell_id_mat_id_map[28], 9)
        self.assertEqual(cell_id_mat_id_map[29], 9)
        self.assertEqual(cell_id_mat_id_map[30], 9)
        self.assertEqual(cell_id_mat_id_map[31], 9)
        self.assertEqual(cell_id_mat_id_map[32], 9)
        self.assertEqual(cell_id_mat_id_map[33], 9)
        self.assertEqual(cell_id_mat_id_map[34], 9)
        self.assertEqual(cell_id_mat_id_map[35], 9)
        self.assertEqual(cell_id_mat_id_map[36], 9)
        self.assertEqual(cell_id_mat_id_map[37], 9)
        self.assertEqual(cell_id_mat_id_map[48], 9)
        self.assertEqual(cell_id_mat_id_map[49], 9)
        self.assertEqual(cell_id_mat_id_map[50], 9)
        self.assertEqual(cell_id_mat_id_map[51], 9)
        self.assertEqual(cell_id_mat_id_map[52], 9)
        self.assertEqual(cell_id_mat_id_map[53], 9)
        self.assertEqual(cell_id_mat_id_map[54], 9)
        self.assertEqual(cell_id_mat_id_map[55], 9)
        self.assertEqual(cell_id_mat_id_map[56], 9)
        self.assertEqual(cell_id_mat_id_map[57], 9)
        self.assertEqual(cell_id_mat_id_map[58], 9)
        self.assertEqual(cell_id_mat_id_map[59], 9)
        self.assertEqual(cell_id_mat_id_map[70], 9)
        self.assertEqual(cell_id_mat_id_map[71], 9)
        self.assertEqual(cell_id_mat_id_map[72], 9)
        self.assertEqual(cell_id_mat_id_map[73], 9)
        self.assertEqual(cell_id_mat_id_map[74], 9)
        self.assertEqual(cell_id_mat_id_map[75], 9)
        self.assertEqual(cell_id_mat_id_map[76], 9)
        self.assertEqual(cell_id_mat_id_map[77], 9)
        self.assertEqual(cell_id_mat_id_map[78], 9)
        self.assertEqual(cell_id_mat_id_map[79], 9)
        self.assertEqual(cell_id_mat_id_map[80], 9)
        self.assertEqual(cell_id_mat_id_map[81], 9)
        self.assertEqual(cell_id_mat_id_map[5], 10)

    def testGetCellDensities(self):
        "*Test Geometry.DagMC.DagMC getCellDensities method"
        cell_id_density_map = self.geom.getCellDensities()
        self.assertEqual(len(cell_id_density_map), 54)
        self.assertEqual(cell_id_density_map[9], -8.027)
        self.assertEqual(cell_id_density_map[88], -8.027)
        self.assertEqual(cell_id_density_map[136], -7.75)
        self.assertEqual(cell_id_density_map[19], -0.001633)
        self.assertEqual(cell_id_density_map[41], -0.001633)
        self.assertEqual(cell_id_density_map[63], -0.001633)
        self.assertEqual(cell_id_density_map[82], -0.001633)
        self.assertEqual(cell_id_density_map[152], -0.001633)
        self.assertEqual(cell_id_density_map[166], -0.001633)
        self.assertEqual(cell_id_density_map[184], -0.001633)
        self.assertEqual(cell_id_density_map[3], -0.99823)
        self.assertEqual(cell_id_density_map[7], -0.99823)
        self.assertEqual(cell_id_density_map[13], -5.65)
        self.assertEqual(cell_id_density_map[83], -5.65)
        self.assertEqual(cell_id_density_map[154], -5.65)
        self.assertEqual(cell_id_density_map[168], -5.65)
        self.assertEqual(cell_id_density_map[1], -1.8583)
        self.assertEqual(cell_id_density_map[26], -7.83)
        self.assertEqual(cell_id_density_map[27], -7.83)
        self.assertEqual(cell_id_density_map[28], -7.83)
        self.assertEqual(cell_id_density_map[29], -7.83)
        self.assertEqual(cell_id_density_map[30], -7.83)
        self.assertEqual(cell_id_density_map[31], -7.83)
        self.assertEqual(cell_id_density_map[32], -7.83)
        self.assertEqual(cell_id_density_map[33], -7.83)
        self.assertEqual(cell_id_density_map[34], -7.83)
        self.assertEqual(cell_id_density_map[35], -7.83)
        self.assertEqual(cell_id_density_map[36], -7.83)
        self.assertEqual(cell_id_density_map[37], -7.83)
        self.assertEqual(cell_id_density_map[48], -7.83)
        self.assertEqual(cell_id_density_map[49], -7.83)
        self.assertEqual(cell_id_density_map[50], -7.83)
        self.assertEqual(cell_id_density_map[51], -7.83)
        self.assertEqual(cell_id_density_map[52], -7.83)
        self.assertEqual(cell_id_density_map[53], -7.83)
        self.assertEqual(cell_id_density_map[54], -7.83)
        self.assertEqual(cell_id_density_map[55], -7.83)
        self.assertEqual(cell_id_density_map[56], -7.83)
        self.assertEqual(cell_id_density_map[57], -7.83)
        self.assertEqual(cell_id_density_map[58], -7.83)
        self.assertEqual(cell_id_density_map[59], -7.83)
        self.assertEqual(cell_id_density_map[70], -7.83)
        self.assertEqual(cell_id_density_map[71], -7.83)
        self.assertEqual(cell_id_density_map[72], -7.83)
        self.assertEqual(cell_id_density_map[73], -7.83)
        self.assertEqual(cell_id_density_map[74], -7.83)
        self.assertEqual(cell_id_density_map[75], -7.83)
        self.assertEqual(cell_id_density_map[76], -7.83)
        self.assertEqual(cell_id_density_map[77], -7.83)
        self.assertEqual(cell_id_density_map[78], -7.83)
        self.assertEqual(cell_id_density_map[79], -7.83)
        self.assertEqual(cell_id_density_map[80], -7.83)
        self.assertEqual(cell_id_density_map[81], -7.83)
        self.assertEqual(cell_id_density_map[5], -13.31)

    def testGetSurfaceNormal(self):
        "*Test Geometry.DagMC.DagMC getSurfaceNormal method"
        normal = self.geom.getSurfaceNormal(242, [-40.0, -40.0, 60.959999084])
        ref_normal = [0.0, 0.0, 1.0]
        self.assertListEqual(list(normal), ref_normal)

    def testGetPointLocation(self):
        "*Test Geometry.DagMC.DagMC getPointLocation method"
        ray = Geometry.Ray(-40.0, -40.0, 59.0, 0.0, 0.0, 1.0)
        location = self.geom.getPointLocation( ray, 53 )
        self.assertEqual(location, Geometry.POINT_INSIDE_CELL)

        ray = Geometry.Ray(-42.647, -40.0, 59.0, -1.0, 0.0, 0.0)
        location = self.geom.getPointLocation( ray, 53 )
        self.assertEqual(location, Geometry.POINT_INSIDE_CELL)

        ray = Geometry.Ray(-42.648, -40.0, 59.0, -1.0, 0.0, 0.0)
        location = self.geom.getPointLocation( ray, 53 )
        self.assertEqual(location, Geometry.POINT_OUTSIDE_CELL)

    def testGetBoundaryCell(self):
        "*Test Geometry.DagMC.DagMC getBoundaryCell method"
        self.assertEqual(self.geom.getBoundaryCell( 53, 242 ), 54)
        self.assertEqual(self.geom.getBoundaryCell( 54, 248 ), 55)

    def testFindCellContainingExternalRay(self):
        "*Test Geometry.DagMC.DagMC findCellContainingExternalRay method"
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 53)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 54)

        ray = Geometry.Ray( -40.0, -40.0, 64.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 55)

    def testFindAndCacheCellContainingExternalRay(self):
        "*Test Geometry.DagMC.DagMC findAndCacheCellContainingExternalRay method"
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findAndCacheCellContainingExternalRay( ray )
        self.assertEqual(cell, 53)

        ray = Geometry.Ray( -39.0, -39.0, 59.0, 1.0, 0.0, 0.0 )
        cell = self.geom.findAndCacheCellContainingExternalRay( ray )
        self.assertEqual(cell, 53)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findAndCacheCellContainingExternalRay( ray )
        self.assertEqual(cell, 54)

        ray = Geometry.Ray( -40.0, -40.0, 64.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findAndCacheCellContainingExternalRay( ray )
        self.assertEqual(cell, 55)

        found_cell_cache = self.geom.getFoundCellCache()
        self.assertEqual(len(found_cell_cache), 3)
        self.assertTrue(53 in found_cell_cache)
        self.assertTrue(54 in found_cell_cache)
        self.assertTrue(55 in found_cell_cache)

        self.geom.clearFoundCellCache()
        found_cell_cache = self.geom.getFoundCellCache()
        self.assertEqual(len(found_cell_cache), 0)

    def testFireExternalRay(self):
        "*Test Geometry.DagMC.DagMC fireExternalRay method"
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        distance,surface_hit = self.geom.fireExternalRay( ray )
        self.assertAlmostEqual(distance, 1.959999084, delta=1e-9)
        self.assertEqual(surface_hit, 242)

        distance,surface_hit = self.geom.fireExternalRay( ray, 53 )
        self.assertAlmostEqual(distance, 1.959999084, delta=1e-9)
        self.assertEqual(surface_hit, 242)

    def testExternalRayTrace(self):
        "*Test that an external ray trace can be done"
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 53)
        
        distance,surface_hit = self.geom.fireExternalRay( ray, cell )
        self.assertAlmostEqual(distance, 1.959999084, delta=1e-9)
        self.assertEqual(surface_hit, 242)

        ray.advanceHead( distance )
        cell = self.geom.getBoundaryCell( cell, surface_hit )
        self.assertEqual(cell, 54)
        
        distance,surface_hit = self.geom.fireExternalRay( ray, cell )
        self.assertAlmostEqual(distance, 2.54, delta=1e-6)
        self.assertEqual(surface_hit, 248)

        ray.advanceHead( distance )
        cell = self.geom.getBoundaryCell( cell, surface_hit )
        self.assertEqual(cell, 55)

    def testSetInternalRay(self):
        "*Test Geometry.DagMC.DagMC setInternalRay method"
        # No cell caching, start cell unknown
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), False)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 59.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), False)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 61.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        cached_cells = self.geom.getFoundCellCache()
        self.assertEqual(len(cached_cells), 0)

        # Cache start cell, start cell unknown
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), True)
        self.assertTrue(self.geom.isInternalRaySet())
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 59.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), True)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 61.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        cached_cells = self.geom.getFoundCellCache()
        self.assertEqual(len(cached_cells), 2)
        self.assertTrue(53 in cached_cells)
        self.assertTrue(54 in cached_cells)
        self.geom.clearFoundCellCache()

        # No cell caching, start cell known
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        self.assertTrue(self.geom.isInternalRaySet())
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), 53, False)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 59.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), 54, False)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 61.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        cached_cells = self.geom.getFoundCellCache()
        self.assertEqual(len(cached_cells), 0)

        # Cache start cell, start cell known
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), 53, True)
        self.assertTrue(self.geom.isInternalRaySet())
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 59.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        ray = Geometry.Ray( -40.0, -40.0, 61.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay(ray.getPosition(), ray.getDirection(), 54, True)
        self.assertTrue(self.geom.isInternalRaySet())
        internal_position = self.geom.getInternalRayPosition()
        internal_direction = self.geom.getInternalRayDirection()
        self.assertEqual(internal_position[0], -40.0)
        self.assertEqual(internal_position[1], -40.0)
        self.assertEqual(internal_position[2], 61.0)
        self.assertEqual(internal_direction[0], 0.0)
        self.assertEqual(internal_direction[1], 0.0)
        self.assertEqual(internal_direction[2], 1.0)

        cached_cells = self.geom.getFoundCellCache()
        self.assertEqual(len(cached_cells), 2)
        self.assertTrue(53 in cached_cells)
        self.assertTrue(54 in cached_cells)
        self.geom.clearFoundCellCache()

    def testChangeInternalRayDirection(self):
        "*Test Geometry.DagMC.DagMC changeInternalRayDirection method"
        ray = Geometry.Ray( -40.0, -40.0, 59.0, 0.0, 0.0, 1.0 )
        self.geom.setInternalRay( ray.getPosition(), ray.getDirection(), 53, False)
        self.geom.changeInternalRayDirection( 1.0, 0.0, 0.0 )

        direction = self.geom.getInternalRayDirection()
        self.assertEqual(direction[0], 1.0)
        self.assertEqual(direction[1], 0.0)
        self.assertEqual(direction[2], 0.0)
        
    def testFindCellContainingInternalRay(self):
        "*Test Geometry.DagMC.DagMC findCellContainingInternalRay method"
        self.geom.setInternalRay((-40.0, -40.0, 59.0), (0.0, 0.0, 1.0), False)
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 53)

        self.geom.setInternalRay(numpy.array( [-40.0, -40.0, 59.0], dtype=numpy.dtype('d')), numpy.array( [0.0, 0.0, 1.0], dtype=numpy.dtype('d')), 53, False)
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 53)

    def testFireInternalRay(self):
        "*Test Geometry.DagMC.DagMC fireInternalRay method"
        self.geom.setInternalRay( [-40.0, -40.0, 59.0], [0.0, 0.0, 1.0], False )
        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 1.959999084, delta=1e-9)
        self.assertEqual(surface_hit, 242)

    def testAdvanceInternalRayBySubstep(self):
        "*Test Geometry.DagMC.DagMC advanceInternalRayBySubstep method"
        self.geom.setInternalRay( [-40.0, -40.0, 59.0], [0.0, 0.0, 1.0], False )
        self.geom.advanceInternalRayBySubstep( 0.959999084 )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 53)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 1.0, delta=1e-9)
        self.assertEqual(surface_hit, 242)

    def testAdvanceInternalRayToCellBoundary(self):
        "*Test Geometry.DagMC.DagMC advanceInternalRayToCellBoundary method"
        # Basic advance
        self.geom.setInternalRay( [-40.0, -40.0, 59.0], [0.0, 0.0, 1.0], 53, False )
        self.geom.advanceInternalRayToCellBoundary()
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 54)

        # Check for reflection with advance
        self.geom.setInternalRay( [-40.0, -40.0, 59.0], [0.0, 0.0, 1.0], 53, False )
        reflection,normal = self.geom.advanceInternalRayToCellBoundary()
        self.assertFalse(reflection)
        self.assertEqual(len(normal), 3)
        self.assertEqual(normal[0], 0.0)
        self.assertEqual(normal[1], 0.0)
        self.assertEqual(normal[2], 1.0)
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 54)
        
    def testInternalRayTrace(self):
        "*Test that an internal ray trace can be done"
        self.geom.setInternalRay( (-40.0, -40.0, 59.0), (0.0, 0.0, 1.0), False )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 53)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 1.959999084, delta=1e-9)
        self.assertEqual(surface_hit, 242)

        self.geom.advanceInternalRayToCellBoundary()
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 54)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 2.54, delta=1e-6)
        self.assertEqual(surface_hit, 248)

        self.geom.advanceInternalRayToCellBoundary()
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 55)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 2.54, delta=1e-6)
        self.assertEqual(surface_hit, 254)

        self.geom.advanceInternalRayBySubstep( 0.5*distance )
        self.geom.changeInternalRayDirection( 0.0, 0.0, -1.0 )
        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 1.27, delta=1e-6)
        self.assertEqual(surface_hit, 248)

    def testInternalRayTraceWithReflection(self):
        "*Test that an internal ray trace with a reflection can be done"
        self.geom.setInternalRay( (-40.0, -40.0, 108.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 82)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 1.474, delta=1e-6)
        self.assertEqual(surface_hit, 394)

        reflection,surface_normal = self.geom.advanceInternalRayToCellBoundary()
        self.assertFalse(reflection)
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 83)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 17.526, delta=1e-6)
        self.assertEqual(surface_hit, 408)

        reflection,surface_normal = self.geom.advanceInternalRayToCellBoundary()
        self.assertTrue(reflection)
        self.assertEqual(surface_normal[0], 0.0)
        self.assertEqual(surface_normal[1], 0.0)
        self.assertEqual(surface_normal[2], 1.0)
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 83)

        distance,surface_hit = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 17.526, delta=1e-6)
        self.assertEqual(surface_hit, 394)
        

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(DagMCPreInitTestCase))
    suite.addTest(unittest.makeSuite(DagMCPostInitTestCase))

    print >>sys.stderr, \
        "\n****************************\n" + \
        "Testing Geometry.DagMC.DagMC \n" + \
        "****************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstGeometry.DagMC.DagMC.py
#-----------------------------------------------------------------------------#
