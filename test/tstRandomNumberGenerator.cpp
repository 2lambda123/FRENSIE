//---------------------------------------------------------------------------//
//!
//! \file   tstRandomNumberGenerator.cpp
//! \author Alex Robinson
//! \brief  Random number generator class unit tests
//!
//---------------------------------------------------------------------------//

// Std Lib Includes
#include <iostream>
#include <set>

// Trilinos Includes
#include <Teuchos_UnitTestHarness.hpp>
#include <Teuchos_ScalarTraits.hpp>

// FACEMC Includes
#include "FACEMC_UnitTestHarnessExtensions.hpp"
#include "RandomNumberGenerator.hpp"

//---------------------------------------------------------------------------//
// Instantiation Macros.
//---------------------------------------------------------------------------//
#define UNIT_TEST_INSTANTIATION( type, name ) \
  TEUCHOS_UNIT_TEST_TEMPLATE_1_INSTANT( type, name, float ) \
  TEUCHOS_UNIT_TEST_TEMPLATE_1_INSTANT( type, name, double ) 

//---------------------------------------------------------------------------//
// Tests.
//---------------------------------------------------------------------------//
// Check that the random number generator can be initialized
TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL( RandomNumberGenerator,
				   initialize,
				   ScalarType )
{
  FACEMC::RandomNumberGenerator<ScalarType>::initialize();

  // An exception will be thrown if the initialization failed
  double random_number = 
    FACEMC::RandomNumberGenerator<ScalarType>::getRandomNumber();
}

UNIT_TEST_INSTANTIATION( RandomNumberGenerator, initialize );

//---------------------------------------------------------------------------//
// Check that a random number generator can be reset
TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL( RandomNumberGenerator,
				   reset,
				   ScalarType )
{
  // Reset the generator
  FACEMC::RandomNumberGenerator<ScalarType>::reset();

  // Store the first random number of the stream
  double first_random_number = 
    FACEMC::RandomNumberGenerator<ScalarType>::getRandomNumber();

  // Reset the generator
  FACEMC::RandomNumberGenerator<ScalarType>::reset();

  // Store the first random number of the stream again
  double first_random_number_copy = 
    FACEMC::RandomNumberGenerator<ScalarType>::getRandomNumber();

  // These random numbers will only be the same if the generator was reset
  TEST_EQUALITY( first_random_number, first_random_number_copy );
}

UNIT_TEST_INSTANTIATION( RandomNumberGenerator, reset );

//---------------------------------------------------------------------------//
// Check that the random number generator can be initialized to a new history
TEUCHOS_UNIT_TEST_TEMPLATE_1_DECL( RandomNumberGenerator,
				   initialize_history,
				   ScalarType )
{
#if defined(HAVE_FACEMC_MPI) && !defined(NDEBUG)
  // Reset the generator
  FACEMC::RandomNumberGenerator<ScalarType>::reset();

  // Initialize the generator to a particular history depending on the process
  FACEMC::RandomNumberGenerator<ScalarType>::initialize( Teuchos::GlobalMPISession::getRank() );

  // Generate a random number
  double random_number = 
    FACEMC::RandomNumberGenerator<ScalarType>::getRandomNumber();

  // Retrieve the random numbers generated by the other processes and store
  // them in an array
  Teuchos::Array<int> all_random_numbers( 
				       Teuchos::GlobalMPISession::getNProc() );
  Teuchos::GlobalMPISession::allGather( static_cast<int>( random_number ), 
					all_random_numbers() );
  
  // Store all of the array elements in a set
  std::set<int> random_set;

  for( int i = 0; i < all_random_numbers.size(); ++i )
    random_set.insert( all_random_numbers[i] );

  TEST_EQUALITY( all_random_numbers.size(), random_set.size() );
#endif
}

UNIT_TEST_INSTANTIATION( RandomNumberGenerator, initialize_history );

//---------------------------------------------------------------------------//
// end tstRandomNumberGenerator.cpp
//---------------------------------------------------------------------------//

