#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Photon.CoherentScatteringDistributionACEFactory class unit tests
#  \file   tstMonteCarlo.Photon.CoherentScatteringDistributionACEFactory.py
#  \author Alex Robinson
#  \brief  Unit tests for the MonteCarlo.Photon.CoherentScatteringDistributionACEFactory class
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-f", "--test_ace_file", type="string", dest="test_ace_file",
                  help="the ace file used for testing")
parser.add_option("-t", "--test_ace_table", type="string", dest="test_ace_table",
                  help="the name of the ace table used for testing")

options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Prng = importPyFrensieModuleFromBuildDir('Utility.Prng')
Data = importPyFrensieModuleFromBuildDir('Data')
ACE = importPyFrensieModuleFromBuildDir('Data.ACE')
MonteCarlo = importPyFrensieModuleFromBuildDir( 'MonteCarlo' )
Photon = importPyFrensieModuleFromBuildDir('MonteCarlo.Photon')

Prng.RandomNumberGenerator.createStreams()

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Check that distributions can be created with the factory
class CoherentScatteringDistributionACEFactoryTestCase(unittest.TestCase):
    "TestCase for MonteCarlo.Photon.CoherentScatteringDistributionACEFactory class"
    @classmethod
    def setUpClass(cls):
        ace_file = ACE.ACEFileHandler( options.test_ace_file, options.test_ace_table, 1 )
        cls.xss_extractor = ACE.XSSEPRDataExtractor( ace_file.getTableNXSArray(), ace_file.getTableJXSArray(), ace_file.getTableXSSArray() )

    def testCreateThompsonDistribution(self):
        "Test MonteCarlo.Photon.CcoherentScatteringDistributionACEFactory.createThompsonDistribution"
        dist = Photon.CoherentScatteringDistributionACEFactory.createThompsonDistribution()

        # Check that the distribution can be evaluated
        self.assertAlmostEqual( dist.evaluate( 0.1, 1.0 ), 4.989344050883251e-1, delta=1e-15 )
        self.assertAlmostEqual( dist.evaluate( 0.1, 0.0 ), 2.4946720254416256e-1, delta=1e-15 )
        self.assertAlmostEqual( dist.evaluate( 0.1, -1.0 ), 4.989344050883251e-1, delta=1e-15 )

        # Check that the pdf can be evaluated
        self.assertAlmostEqual( dist.evaluatePDF( 0.1, 1.0 ), 0.75, delta=1e-15 )
        self.assertAlmostEqual( dist.evaluatePDF( 0.1, 0.0 ), 0.375, delta=1e-15 )
        self.assertAlmostEqual( dist.evaluatePDF( 0.1, -1.0 ), 0.75, delta=1e-15 )

        # Check that the integrated cross section can be evaluated
        self.assertAlmostEqual( dist.evaluateIntegratedCrossSection( 0.1, 1e-16 ), 6.652458734511002e-1, delta=1e-15 )

        # Check that the outgoing direction can be sampled
        Prng.RandomNumberGenerator.setFakeStream( [0.75,
                                                   0.5,
                                                   0.755,
                                                   0.2,
                                                   0.8,
                                                   0.5,
                                                   0.9,
                                                   0.8] )

        sample = dist.sample( 0.1 )
        
        self.assertEqual( len(sample), 2 )
        self.assertEqual( sample[0], 0.1 )
        self.assertAlmostEqual( sample[1], 0.0, delta=1e-15 )

        sample = dist.sample( 0.1 )

        self.assertEqual( len(sample), 2 )
        self.assertEqual( sample[0], 0.1 )
        self.assertAlmostEqual( sample[1], -0.8434326653017492, delta=1e-15 )

        sample = dist.sample( 0.1 )

        self.assertEqual( len(sample), 2 )
        self.assertEqual( sample[0], 0.1 )
        self.assertAlmostEqual( sample[1], 0.0, delta=1e-15 )

        sample = dist.sample( 0.1 )

        self.assertEqual( len(sample), 2 )
        self.assertEqual( sample[0], 0.1 )
        self.assertAlmostEqual( sample[1], 0.8434326653017493, delta=1e-15 )

        Prng.RandomNumberGenerator.unsetFakeStream()

        # Check that the outgoing direction can be sampled (record trials)
        Prng.RandomNumberGenerator.setFakeStream( [0.75, 0.5] )

        trials = 0
        sample = dist.sampleAndRecordTrials( 0.1, trials )

        self.assertEqual( len(sample), 3 )
        self.assertEqual( sample[0], 0.1 )
        self.assertAlmostEqual( sample[1], 0.0, delta=1e-15 )
        self.assertEqual( sample[2], 1 )

        # Check that a photon can be scattered

        # Check that an adjoint photon can be scattered

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(CoherentScatteringDistributionACEFactoryTestCase))

    print >>sys.stderr, \
        "\n**************************************************************************\n" +\
        "Testing MonteCarlo.Photon.CoherentScatteringDistributionACEFactory \n" + \
        "**************************************************************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)
        
#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Photon.CoherentScatteringDistributionACEFactory.py
#-----------------------------------------------------------------------------#
