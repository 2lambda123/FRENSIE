// This file is used to add material to the facemc manual page

/*! \page facemc_man FACEMC User's Manual
 *
 * \tableofcontents
 *
 * The Forward-Adjoint Continuous Energy Monte Carlo (FACEMC) code is 
 * currently interacted with through XML files and a command-line interface.
 * In the future, a python interface will also be added. In this manual the
 * individual XML files and the command line interface will be discussed.
 *
 * In every simulation, six XML files must be provided. These XML files
 * specify the geometry, the source, the estimators, the response functions,
 * the materials, and run time configuration options. The following sections 
 * will discuss the construction of each of these XML files.
 *
 * \section geometry_sec Geometry Construction
 * Currently, only CAD geometries can be used with FACEMC. The CAD file must
 * be constructed before the XML file. 
 *
 * \subsection dagmc_workflow DAGMC Workflow
 * The <a href=http://cnerg.github.io/>CNERG</a> group has put together a nice
 * document on the <a href=http://svalinn.github.io/DAGMC/usersguide/workflow.html>DAGMC workflow</a>.
 * This workflow will be reiterated and some steps specific to FACEMC will
 * also be added.
 *
 * To construct a CAD file for ray tracing using DAGMC, the following workflow 
 * should be followed:
 * <ol>
 *  <li> Create and/or prepare a solid model using the CAD/solid-modeling tool
 *       of your choice.</li>
 *  <li> Pre-process the solid model geometry in CUBIT
 *   <ul><li> Assign materials and densities</li>
 *       <li> Define boundary conditions</li>
 *       <li> Imprint & merge geometry</li>
 *       <li> Export the processed model in the ACIS format</li></ul>
 * </ol>     
 * 
 * \subsection contructing_cad_geoms Constructing CAD Geometries
 * When preparing the solid model, any software that supports the ACIS (.sat)
 * and/or the STEP (.stp, .STEP, etc) can be used. CUBIT can also be used
 * directly to construct the geometry. It is important to be aware of gaps
 * and overlaps in the model as these unwanted features will lead to lost
 * particles while FACEMC attempts to ray trace on the geometry. It is fairly
 * common for models constructed for manufacturing purposes to have tolerances
 * that are undesirable for particle transport applications. Therefore, 
 * when obtaining a CAD model from another source, it is important to be aware 
 * of its intended purpose. 
 *
 * Once a CAD geometry has been constructed, it is important to assess its
 * quality by running it in FACEMC and identifying the lost particle rate using
 * a voided geometry (simply do not define any materials). The CNERG group
 * usually considers a lost particle rate of 1/50,000 to be an acceptable
 * threshold. 
 *
 * A special volume must be created that surrounds the entire geometry of
 * interest. This geometry will be used to end particle histories that
 * enter it (see the "termination.cell" property below).
 *
 * \subsection preprocessing_model Pre-processing CAD Model using CUBIT
 * The first step in pre-processing a CAD model in CUBIT is to import it
 * into CUBIT. This step can take up to 30 minutes for very complicated CAD
 * models but will typically only take a few seconds. 
 *
 * The second step is to replace coincident surfaces with a single surface. In
 * CUBIT this is called imprinting and merging. To imprint, use the following
 * command in cubit:
 * \code{.unparsed}
 * imprint body all
 * \endcode
 * If the imprint is successful, the geometry must be merged. A tolerance for
 * this process can be set, which may be useful for certain geometries. To 
 * set the merge tolerance and to merge the geometry, use the following 
 * commands:
 * \code{.unparsed}
 * merge tol 5e-7
 * merge all 
 * \endcode
 * This process will be quite fast for modest sized geometries. However, expect
 * up to a few hours for complex geometries.
 *
 * The third step is to assign properties to volumes and surfaces. The
 * assignment of properties to volumes and surfaces is done by creating groups
 * in CUBIT. The name of the group determines the property of the volumes
 * and/or surfaces contained in the group. To create a group, the following
 * command should be used:
 * \code{.unparsed}
 * group "group.name" add vol 5 8 10 to 20
 * group "group.name" add surf 1 2 3
 * \endcode
 * There are several properties that are often set in cubit. These properties
 * have default names, which will be listed below.
 * <ul>
 *  <li> termination.cell </li>
 *  <li> mat_\#_rho_# </li>
 *  <li> mat_\#_rho_-# </li>
 *  <li> estimator_#.surface.current.n </li>
 *  <li> estimator_#.surface.current.p </li>
 *  <li> estimator_#.surface.current.e </li>
 *  <li> estimator_#.surface.flux.n </li>
 *  <li> estimator_#.surface.flux.p </li>
 *  <li> estimator_#.surface.flux.e </li>
 *  <li> estimator_#.cell.pulse.height.p </li>
 *  <li> estimator_#.cell.pulse.height.e </li>
 *  <li> estimator_#.cell.pulse.height.pe </li>
 *  <li> estimator_#.cell.tl.flux.n </li>
 *  <li> estimator_#.cell.tl.flux.p </li>
 *  <li> estimator_#.cell.tl.flux.e </li>
 *  <li> estimator_#.cell.c.flux.n </li>
 *  <li> estimator_#.cell.c.flux.p </li>
 *  <li> estimator_#.cell.c.flux.e </li>
 * </ul>
 * The termination.cell, mat, rho, estimator, surface.current, surface.flux,
 * cell.pulse.height, cell.tl.flux, cell.c.flux keywords can all be substituted
 * with any alternative of your choosing (these alternatives must be specified
 * in the \ref geometry_xml_file "geometry xml file"). 
 *
 * The final step is to export the geometry. Attributes must be set to on
 * to save absolute volumes, surface ids and the group specifications. This
 * is done with the following command:
 * \code{.unparsed}
 * set attribute on
 * \endcode
 * The geometry must be exported as an ACIS (.sat) file. If the CUBIT version
 * is greater than 12.x, set the ACIS geometry back to version 19:
 * \code{.unparsed}
 * set geom version 1900
 * \endcode
 * Use the file pull-down menu to export the geometry.
 *
 * \subsection geometry_xml_file Creating the Geometry XML file
 * The geometry XML file is set up so that it can be read into a 
 * Teuchos::ParameterList object internally. The only XML elements allowed
 * are "ParameterList" and "Parameter". The "ParameterList" element only
 * has one allowed attribute called "name". The "Parameter" element has
 * three allowed attributes: "name", "type", and "value".
 *
 * Three parameter elements must appear in every geometry file. The first
 * is the handler element, which specifies the geometry handler that will be
 * used by FACEMC (currently only DAGMC is available). The second is the
 * CAD file that FACEMC will use. The third is the face tolerance that 
 * DAGMC will use to facet the CAD geometry. A basic geometry file is
 * shown below.
 * \code
 * <ParameterList name="Geometry">
 *
 * <Parameter name="Handler" type="string" value="DagMC"/>
 * <Parameter name="CAD File" type="string" value="water_sphere2.sat"/>
 * <Parameter name="Facet Tolerance" type="double" value="1e-3"/>
 * 
 * </ParameterList>
 * \endcode
 *
 * If different CUBIT keywords were chosen, they must be specified in the
 * XML file as well:
 * \code
 * <ParameterList name="Geometry">
 *
 * <Parameter name="Handler" type="string" value="DagMC"/>
 * <Parameter name="CAD File" type="string" value="my_cad_geom.sat"/>
 * <Parameter name="Facet Tolerance" type="double" value="1e-3"/>
 * <Parameter name="Termination Cell Synonym" type="string" value="termination.cell"/>
 * <Parameter name="Material Synonym" type="string" value="mat"/>
 * <Parameter name="Density Synonym" type="string" value="rho"/>
 * <Parameter name="Estimator Synonym" type="string" value="estimator"/>
 * <Parameter name="Surface Current Synonym" type="string" value="surface.current"/>
 * <Parameter name="Surface Flux Synonym" type="string" value="surface.flux"/>
 * <Parameter name="Cell Pulse Height Synonym" type="string" value="cell.pulse.height"/>
 * <Parameter name="Cell Track-Length Flux Synonym" type="string" value="cell.tl.flux"/>
 * <Parameter name="Cell Collision Flux Synonym" type="string" value="cell.c.flux"/>
 * 
 * </ParameterList>
 * \endcode
 * Please note that keyword synonyms may not use the underscore ("_") character
 * as this is a reserved character in DagMC.
 *
 * \section material_construction Material Construction
 * Before discussing how materials are specified, the layout of the directory
 * containing the cross section tables must be discussed.
 *
 * \subsection cross_section_dir Cross Section Directory
 * The cross section directory must contain all of the cross section tables
 * that will be used in the simulation. It can be set up in a very similar
 * fashion to the MCNP_DATA directory used by MCNP. In this directory, an
 * XML file must be created called "cross_sections.xml", which is very similar
 * to the xsdir file used by MCNP. The file will have the following form:
 * \code
 * <ParameterList name="cross sections">
 * 
 * <ParameterList name="alias map">
 *   <Parameter name="1001" type="string" value="H-1_293.6K"/>
 *   <Parameter name="8016" type="string" value="O-16_293.6K"/>
 *   <Parameter name="H-1" type="string" value="H-1_239.6K"/>
 *   <Parameter name="O-16" type="string" value="O-16_239.6K"/>
 * </ParameterList>
 * 
 * <ParameterList name="H-1_293.6K">
 *   <Parameter name="nuclear_file_path" type="string" value="endf70a"/>
 *   <Parameter name="nuclear_file_type" type="string" value="ACE"/>
 *   <Parameter name="nuclear_file_start_line" type="int" value="1"/>
 *   <Parameter name="nuclear_table_name" type="string" value="1001.70c"/>
 *   <Parameter name="photoatomic_file_path" type="string" value="mcplib12"/>
 *   <Parameter name="photoatomic_file_type" type="string" value="ACE"/>
 *   <Parameter name="photoatomic_file_start_line" type="int" value="1"/>
 *   <Parameter name="photoatomic_table_name" type="string" value="1000.12p"/>
 *   <Parameter name="electroatomic_file_path" type="string" value="mcplib12"/>
 *   <Parameter name="electroatomic_file_type" type="string" value="ACE"/>
 *   <Parameter name="electroatomic_file_start_line" type="int" value="1"/>
 *   <Parameter name="electroatomic_table_name" type="string" value="1000.12p"/>
 *   <Parameter name="temperature" type="double" value="2.53010e-08"/>
 *   <Parameter name="atomic_weight_ratio" type="double" value="0.999167"/>
 *   <Parameter name="atomic_number" type="int" value="1"/>
 *   <Parameter name="atomic_mass_number" type="int" value="1"/>
 *   <Parameter name="isomer_number" type="int" value="0"/>
 * </ParameterList>
 *
 * <ParameterList name="O-16_293.6K">
 *   <Parameter name="nuclear_file_path" type="string" value="endf70a"/>
 *   <Parameter name="nuclear_file_type" type="string" value="ACE"/>
 *   <Parameter name="nuclear_file_start_line" type="int" value="1428717"/>
 *   <Parameter name="nuclear_table_name" type="string" value="8016.70c"/>
 *   <Parameter name="photoatomic_file_path" type="string" value="mcplib12"/>
 *   <Parameter name="photoatomic_file_type" type="string" value="ACE"/>
 *   <Parameter name="photoatomic_file_start_line" type="int" value="31405"/>
 *   <Parameter name="photoatomic_table_name" type="string" value="8000.12p"/>
 *   <Parameter name="electroatomic_file_path" type="string" value="mcplib12"/>
 *   <Parameter name="electroatomic_file_type" type="string" value="ACE"/>
 *   <Parameter name="electroatomic_file_start_line" type="int" value="31405"/>
 *   <Parameter name="electroatomic_table_name" type="string" value="8000.12p"/>
 *   <Parameter name="temperature" type="double" value="2.53010e-08"/>
 *   <Parameter name="atomic_weight_ratio" type="double" value="15.857510"/>
 *   <Parameter name="atomic_number" type="int" value="8"/>
 *   <Parameter name="atomic_mass_number" type="int" value="16"/>
 *   <Parameter name="isomer_number" type="int" value="0"/>
 * </ParameterList>
 *
 * </ParameterList>
 * \endcode
 * Note that each isotope will have an alias that will be used to refer to it
 * (as apposed to a zaid number). There is also a set of alternative aliases in
 * the "alias map" that can be used instead of the default aliases.
 *
 * \subsection creating_material_xml_file Creating the Material XML file
 * Three parameter elements must appear in every material file. The first
 * is the material id. Note that any material id specified in the CAD file must
 * have a corresponding material definition in this XML file. The second is
 * the fractions element, which is used to specify the atom or weight fractions
 * of each isotope in the material. To specify weight fractions, negative
 * numbers should be given. Also note that the fractions need not be 
 * normalized - this will be done internally. The third parameter is the 
 * isotopes element, which is used to specify the isotopes in the material.
 * A valid alias (specified in the cross_sections.xml file) must be used
 * to refer to an isotope. A material XML file that could be used to specify
 * water is given below.
 * \code
 * <ParameterList name="Materials">
 *
 * <ParameterList name="H Sphere">
 * <Parameter name="Id" type="unsigned int" value="1"/>
 * <Parameter name="Fractions" type="Array" value="{1.0,2.0}"/>
 * <Parameter name="Isotopes" type="Array(string)" value="{O-16_293.6K, H-1_293.6K}"/>
 * </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \section one_d_distributions One-Dimensional Distributions
 * Before discussing the remaining XML files, a special parameter type must
 * be discussed: the one-dimensional distribution. one-dimensional
 * distributions can be used to represent a sampling distribution or a
 * weighting distribution. Each distribution and a corresponding example 
 * parameter element will be shown below.
 *
 * <ul>
 *  <li><b>Delta distribution</b>
 *   <ul>
 *    <li>\code
 *        <Parameter name="example" type="Delta Distribution" value="{0}"/>
 *        \endcode</li>
 *    <li>Models a delta function \f$\delta(x-a)\f$ or single point</li>
 *    <li>Should almost exclusively be used for sampling purposes</li>
 *    <li>The value attribute specifies the \f$a\f$ value of the delta 
 *        distribution</li></ul></li>
 *  <li><b>Discrete distribution</b>
 *   <ul>
 *    <li>\code
 *        <Parameter name="example a" type="Discrete Distribution" value="{{-1.0, 0.0, 1.0},{1.0, 2.0, 1.0}}"/>
 *        <Parameter name="example b" type="Discrete Distribution" value="{{-1.0, 3i, 1.0},{0.25, 0.5, 1.0, 0.5, 0.25}}"/>
 *        <Parameter name="example c" type="Discrete Distribution" value="{{1e-4, 3l, 1.0},{1.0, 3i, 1.0}}"/>
 *        \endcode</li>
 *    <li>Models a sum of delta functions \f$\sum_i c_i\delta(x-a_i)\f$ or 
 *        series of points with associated weights</li>
 *    <li>Should almost exclusively be used for sampling purposes</li>
 *    <li><b>Note:</b> When treated as a sampling distribution it is acceptable
 *        to have repeated points</li>
 *    <li>The value attribute specifies the array of points (\f$a_i\f$) and the
 *        array of point weights (\f$c_i\f$).</li>
 *    <li>For sampling distributions, the array of weights will be 
 *        normalized.</li>
 *    <li>The weights should always be positive.</li>
 *    <li>\ref interval_operators "Interval operators" can be used when 
 *        specifying this distribution.</li></ul></li>
 *   <li><b>Exponential distribution</b>
 *    <ul>
 *     <li>\code
 *         <Parameter name="example a" type="Exponential Distribution" value="{2,3}"/>
 *         <Parameter name="example b" type="Exponential Distribution" value="{3}"/>
 *          \endcode</li>
 *     <li>Models an exponentially decaying function \f$a*\exp(-b*x)\f$</li>
 *     <li>The value attribute specifies the constant multiplier \f$a\f$ 
 *         (optional) and the exponent multiplier \f$b\f$, which should always 
 *         be positive.</li>
 *     <li>The default value of \f$a\f$ is 1.0.</li>
 *     <li>For sampling distributions, the \f$a\f$ value will be
 *         replaced by a normalization constant. </li></ul></li>
 *   <li><b>Histogram distribution</b>
 *    <ul>
 *     <li>\code
 *         <Parameter name="example a" type="Histogram Distribution" value="{{-2.0, -1.0, 1.0, 2.0},{2.0, 1.0, 2.0}}"/>
 *         <Parameter name="example b" type="Histogram Distribution" value="{{-2.0, 3i, 2.0},{2.0, 1.0, 1.0, 2.0}}"/>
 *         <Parameter name="example c" type="Histogram Distribution" value="{{1e-4, 3l, 1.0},{1.0, 2i, 1.0}}"/>
 *         \endcode</li>
 *      <li>The value attribute specifies the \f$n\f$ histogram
 *          bin boundaries and the \f$n-1\f$ bin values.</li>
 *      <li>For sampling distributions, the bin values will be normalized. Bin 
 *          values should always be positive.</li>
 *    <li>\ref interval_operators "Interval operators" can be used when 
 *        specifying this distribution.</li></ul></li>
 *    <li><b>Normal distribution</b>
 *     <ul>
 *      <li>\code
 *          <Parameter name="example a" type="Normal Distribution" value="{0,1,-inf,inf}"/>
 *          <Parameter name="example b" type="Normal Distribution" value="{0,1}"/>
 *          <Parameter name="example c" type="Normal Distribution" value="{1.5,0.25,-10,10}"/>
 *          \endcode</li>
 *      <li>Models a Gaussian function \f$\frac{1}{\sigma\sqrt{2\pi}}\exp{-\frac{(x-\mu)^2}{2\sigma^2}}\f$</li>
 *      <li>The value attribute specifies the mean \f$\mu\f$ and standard
 *          deviation \f$\sigma\f$ of the Gaussian. The standard deviation must
 *          be strictly greater than zero.
 *      <li>The distribution can be truncated by specifying a lower cutoff and 
 *          an upper cutoff. The special values of "-inf" and "inf" can be used
 *          to essentially provide no cutoff values.</li></ul></li>
 *    <li><b>Polynomial Distribution</b>
 *     <ul>
 *      <li>\code
 *          <Parameter name="example" type="Polynomial Distribution" value="{{1.00000000000000000e+00, 2.00000000000000000e+00, 3.00000000000000000e+00},0,1}"/>
 *          \endcode</li>
 *      <li>Models the polynomial function \f$\sum_{i=0}^{N-1} c_ix_i\f$ for
 *          \f$x \in [a,b]\f$</li>
 *      <li>The value attribute specifies the array of polynomial coefficients 
 *          \f$c_i\f$, the minimum \f$x\f$ value \f$a\f$ and the maximum
 *          \f$x\f$ value \f$b\f$ respectively. For the values to be valid
 *          every term in the series must be strictly positive over the 
 *          desired range.
 *      <li>These distributions are sampled directly using a combination of
 *          the probability mixing and inverse CDF techniques.</li></ul></li>
 *    <li><b>Power Distribution</b>
 *     <ul>
 *      <li>\code 
 *          <Parameter name="example a" type="Power 1 Distribution" value="{2,0,1}"/>
 *          <Parameter name="example b" type="Power 1 Distribution" avlue="{0,1}"/>
 *          <Parameter name="example c" type="Power 2 Distribution" value="{3,1,2}"/>
 *          <Parameter name="example d" type="Power 2 Distribution" value="{1,2}"/>
 *          <Parameter name="example e" type="Power 10 Distribution" value="{1.0,1.5,5.5}"/>
 *          <Parameter name="example f" type="Power 10 Distribution" value="{1.5,5.5}"/>
 *          \endcode</li>
 *      <li>Models the power function \f$c x^N\f$ for \f$x \in [a,b]\f$, where
 *          \f$N\f$ is the desired power.</li>
 *       <li>The type attribute specifies the power \f$N\f$.</li>
 *       <li>The value attribute specifies the constant multiplier \f$c\f$
 *           (optional), the minimum \f$x\f$ value \f$a\f$ and the 
 *           maximum \f$x\f$ value \f$b\f$ respectively. The limits must be 
 *           strictly positive.</li>
 *       <li>The default value of \f$c\f$ is 1.0.
 *       <li>For sampling distributions, the constant multiplier \f$c\f$ will
 *           be replaced by a normalization constant.</li></ul></li>
 *     <li><b>Tabular Distribution</b>
 *      <ul>
 *       <li>\code
 *           <Parameter name="example a" type="Tabular LinLin Distribution" value="{{-1.0, -0.5, 0.0, 0.5, 1.0},{0.0, 1.0, 2.0, 3.0, 4.0 }}"/>
 *           <Parameter name="example b" type="Tabular LinLog Distribution" value="{{1e-3, 3l, 10.0},{-1.0, 3i, 1.0}}"/>
 *            <Parameter name="example c" type="Tabular LogLin Distribution" value="{{-1.0, 3i, 1.0},{1e-3, 3l, 10.0}}"/>
 *            <Parameter name="example d" type="Tabular LogLog Distribution" value="{{1e-3, 3l, 10.0},{1.0, 3l, 1e4}"/>
 *             \endcode</li>
 *        <li>The type attribute specifies the type of interpolation to use
 *            with the table.</li>
 *        <li>The value attribute specifies the \f$n\f$ independent values and 
 *            the \f$n\f$ dependent values.</li>
 *    <li>\ref interval_operators "Interval operators" can be used when 
 *        specifying this distribution.</li></ul></li>
 *      <li><b>Uniform Distribution</b>
 *       <ul>
 *        <li>\code
 *            <Parameter name="example a" type="Uniform Distribution" value="{-1,1,2}"/>
 *            <Parameter name="example b" type="Uniform Distribution" value="{-1,1}"/>
 *            \endcode</li>
 *        <li>Models the constant function \f$c\f$ for \f$x \in [a,b]\f$.</li>
 *        <li>The value attribute specifies the minimum \f$x\f$ value
 *            \f$a\f$, the maximum \f$x\f$ value \f$b\f$ and the
 *            constant \f$c\f$ (optional) respectively.</li>
 *        <li>The default value of \f$c\f$ is 1.0.</li>
 *        <li>For sampling distributions, the constant multiplier \f$c\f$ will
 *            be replaced by a normalization constant.</li></ul></li>   
 *  </ul>
 *
 * One more special operator that can be used with all one-dimensional 
 * distributions is the "pi" operator. Any "pi" value that appears will 
 * be replaced by the value of pi. It is also valid to multiply and divide
 * this pi operator (e.g. 2*pi, 2pi, 3*pi/4, 2pi / 5, etc.). 
 *
 * \section spatial_distributions Spatial Distributions
 * Before discussing the remaining XML files, a special parameter must be
 * discussed: the spatial distribution. Spatial distributions can be used to
 * represent a sampling distribution or a weighting function, much like the
 * \ref one_d_distributions "one-dimensional distributions". Each spatial 
 * distribution and a corresponding example parameter list will be shown below.
 * <ul>
 *  <li><b>Point Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution">
 *             <Parameter name="Position" type="Array(double)" value="{0.0,0.0,-501}"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Only one parameter element is required for this distribution: the
 *           "Position".
 *       <li>This distribution is for convenience since the Cartesian
 *           distribution can also be used to model a point.</li>
 *      </ul></li>
 *   
 *  <li><b>Cartesian Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution">
 *             <Parameter name="X Distribution" type="Uniform Distribution" value="{-10,-10,-10}"/>
 *             <Parameter name="Y Distribution" type="Uniform Distribution" value="{-10,-10,-10}"/>
 *             <Parameter name="Z Distribution" type="Uniform Distribution" value="{-10,-10,-10}"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Three parameters are required for this distribution: the "X 
 *           Distribution", the "Y Distribution" and the "Z Distribution".</li>
 *       <li>The type attribute for each parameter must be a 
 *           \ref one_d_distributions "one-d distribution".</li> 
 *       <li>The example distribution could be used to sample uniformly from a 
 *           cuboid volume.</li>
 *      </ul></li>
 *      
 *  <li><b>Cylindrical Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution">
 *             <Parameter name="R Distribution" type="Power 1 Distribution" value="{1.0, 0.0, 1.0}"/>
 *             <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,2pi,1}"/>
 *             <Parameter name="Axis Distribution" type="Uniform Distribution" value="{-10,10,1}"/>
 *             <Parameter name="Center X Position" type="double" value="0.0"/>
 *             <Parameter name="Center Y Position" type="double" value="0.0"/>
 *             <Parameter name="Center Z Position" type="double" value="0.0"/>
 *             <Parameter name="Axis" type="string" value="Z"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Seven parameters are required for this distribution: the "R
 *           Distribution", the "Theta Distribution", the "Axis Distribution",
 *           the "Center X Position", the "Center Y Position", the
 *           "Center Z Position" and the "Axis".</li>
 *       <li>The "Axis Distribution" specifies the distribution along the
 *           axis of the cylinder, the orientation of which can be specified
 *           using the "Axis" parameter.</li>
 *       <li>The type attribute for each of the distribution parameters must be
 *           a \ref one_d_distributions "one-d distribution".</li>
 *       <li>There are three valid values for the "Axis" parameter: "X", "Y"
 *           and "Z".
 *       <li>The example distribution could be used to sample uniformly from a
 *           right circular cylindrical volume.</li>
 *      </ul></li>
 *
 *  <li><b>Spherical Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution"
 *             <Parameter name="R Distribution" type="Power 2 Distribution" value="{2.0, 0.0, 1.0}"/>
 *             <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,2pi,1}"/>
 *             <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1,1,1.0}"/>
 *             <Parameter name="Center X Position" type="double" value="0.0"/>
 *             <Parameter name="Center Y Position" type="double" value="0.0"/>
 *             <Parameter name="Center Z Position" type="double" value="0.0"/>
 *             <Parameter name="Axis" type="string" value="Z"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Seven parameters are required for this distribution: the "R
 *           Distribution", the "Theta distribution", the "Mu Distribution",
 *           the "Center X Position", the "Center Y Position", the "Center Z
 *           Position" and the "Axis".</li>
 *       <li>The "Theta Distribution" specifies the distribution of the
 *           azimuthal angle while the "Mu Distribution" specifies the
 *           distribution of the polar angle cosine.</li>
 *       <li>The "Axis" parameter is used to specify the axis from which the
 *           the polar angle cosine is measured. The three valid values are
 *           "X", "Y" and "Z".
 *       <li>The type attribute for each of the distribution parameters must be
 *           a \ref one_d_distributions "one-d distribution".</li>
 *       <li>The example distribution could be used to sample uniformly from
 *           a spherical volume.</li>
 *      </ul></li>
 *
 * </ul>
 *
 * \section directional_distributions Directional Distributions
 * The final special parameter that must be discussed is the directional
 * distribution. Directional distributions can be used to represent a
 * sampling distribution or a weighting function, much like the 
 * \ref one_d_distributions "one-dimensional distributions" and the 
 * \ref spatial_distributions "spatial distributions". Each directional 
 * distribution and a corresponding example parameter list will be shown below.
 * <ul>
 *  <li><b>Mono-directional Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Directional Distribution">
 *             <Parameter name="Direction" type="Array(double)" value="{1.0,1.0,1.0}"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Only one parameter element is required for this distribution: the
 *           "Direction".</li>
 *       <li>The direction specified does not need to be normalized. It will
 *           be normalized upon being read in.</li>
 *       <li>This distribution is for convenience since the spherical 
 *           distribution can also be used to model a mono-directional
 *           distribution.</li>
 *      </ul></li>
 * 
 *  <li><b>Spherical Distribution</b>
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Directional Distribution">
 *             <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1.0,1.0,2}"/>
 *             <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,2pi,1}"/>
 *             <Parameter name="Axis" type="string" value="Z"/>
 *           </ParameterList>
 *           \endcode</li>
 *       <li>Only one parameter element is required for this distribution: the
 *           "Mu Distribution".</li>
 *       <li>The "Mu Distribution" parameter specifies the distribution of the 
 *           polar angle cosine.</li>
 *       <li>If the optional "Axis" parameter is specified, the polar angle
 *           cosine will be measured with respect to the specified axis. The
 *           three valid axis values are "X", "Y" and "Z" (default).</li>
 *       <li>The "Theta Distribution" parameter specifies the distribution of
 *           the azimuthal angle. If it is not specified, the azimuthal angle
 *           will be sampled uniformly.</li>
 *       <li>The type attribute for the two distribution parameters must be
 *           a \ref one_d_distributions "one-d distribution".</li>
 *      </ul></li>
 *
 * \section response_function_construction Response Function Construction
 * Two types of response functions are currently supported: the energy
 * response function and the phase space response function. Both of these
 * will be discussed before discussing the construction of the response 
 * function XML file.
 *
 * \subsection energy_response_function The Energy Response Function
 * The energy response function is a user defined function with a dependence
 * on the particles energy only. Two parameter elements must appear in every
 * energy response function. These required parameters will be described below.
 * <ol>
 *  <li>The first parameter element is the response function id. Every
 *      response function needs to have a unique id, which can be used by the
 *      estimators. 
 *      <ul>
 *       <li>\code
 *           <Parameter name="Id" type="unsigned int" value="1"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The second parameter element is the energy distribution, which can be 
 *      any of the \ref one_d_distributions "one-dimensional distributions". 
 *      <ul>
 *       <li>\code
 *           <Parameter name="Energy Distribution" type="Histogram Distribution" value="{{1e-3,2l,1.0,8i,10.0,20.0},{0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.35,0.3,0.25,0.2,0.15,0.1}}"/>
 *           \endcode</li>
 *      </ul></li>
 *
 * \subsection phase_space_response_function The Phase Space Response Function
 * The phase space response function is a generalized version of the 
 * energy response function that is dependent on the entire phase space. Five
 * parameter elements must appear in every phase space response function. These
 * required parameters will be described below.
 * <ol>
 *  <li>The first parameter element is the response function id, which can be
 *      used by the estimators.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Id" type="unsigned int" value="1"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The second element is the spatial distribution which is itself a 
 *      parameter list. Please refer to the
 *      \ref spatial_distributions "spatial distributions" section for
 *      information regarding the construction of spatial distributions.
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution">
 *             <Parameter name="X Distribution" type="Uniform Distribution" value="{-10,10,1.0}"/>
 *             <Parameter name="Y Distribution" type="Uniform Distribution" value="{-10,10,1.0}"/>
 *             <Parameter name="Z Distribution" type="Uniform Distribution" value="{-10,10,1.0}"/>
 *           </ParameterList>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The third element is the directional distribution which is also a 
 *      parameter list. Please refer to the
 *      \ref directional_distributions "directional distributions" section for
 *      information regarding the construction of directional distributions.
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Directional Distribution">
 *             <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1.0,1.0,1.0}"/>
 *             <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,2pi,1}"/>
 *           </ParameterList>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The fourth parameter element is the energy distribution, which can be 
 *      any of the \ref one_d_distributions "one-dimensional distributions". 
 *      <ul>
 *       <li>\code
 *           <Parameter name="Energy Distribution" type="Histogram Distribution" value="{{1e-3,2l,1.0,8i,10.0,20.0},{0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.35,0.3,0.25,0.2,0.15,0.1}}"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The fifth element is the time distribution, which can also be any
 *      of the \ref one_d_distributions "one-dimensional distributions".
 *      <ul>
 *       <li>\code
 *           <Parameter name="Time Distribution" type="Uniform Distribution" value="{0.0,1e10,1.0}"/>
 *           \endcode</li>
 *      </ul></li>
 *
 * \subsection example_resp_func_xml_file Example Response Function XML File
 * An example response function xml file is given below.
 * \code
 * <ParameterList name="Response Functions">
 *   
 *   <ParameterList name="Energy Response">
 *     <Parameter name="Id" type="unsigned int" value="0"/> 
 *     <Parameter name="Energy Distribution" type="Histogram Distribution" value="{{1e-3,1e-2,1e-1,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,20.0},{0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.35,0.3,0.25,0.2,0.15,0.1}}"/>
 *   </ParameterList>
 *
 *   <ParameterList name="Phase Space Response: Cartesian">
 *     <Parameter name="Id" type="unsigned int" value="1"/>
 *     <ParameterList name="Spatial Distribution">
 *       <Parameter name="X Distribution" type="Uniform Distribution" value="{-1e50,1e50,1.0}"/>
 *       <Parameter name="Y Distribution" type="Uniform Distribution" value="{-1e50,1e50,1.0}"/>
 *       <Parameter name="Z Distribution" type="Uniform Distribution" value="{-1e50,1e50,1.0}"/>
 *     </ParameterList>
 *     <ParameterList name="Directional Distribution">
 *       <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1.0,1.0,1.0}"/> 
 *       <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0.0, 6.283185307179586, 1.0}"/>
 *     </ParameterList>
 *     <Parameter name="Energy Distribution" type="Histogram Distribution" value="{{1e-3,1e-2,1e-1,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,20.0},{0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.35,0.3,0.25,0.2,0.15,0.1}}"/>
 *     <Parameter name="Time Distribution" type="Uniform Distribution" value="{0.0,1e50,1.0}"/>
 *   </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \section estimator_construction Estimator Construction
 * There are currently six types of estimators that can be created: the
 * surface current estimator, the surface flux estimator, the cell track-length
 * flux estimator, the cell collision flux estimator, the cell pulse height 
 * estimator and the tet mesh track-length flux estimator. Each estimator 
 * requires several parameters. There are also several optional parameters.
 *
 * \subsection required_estimator_parameters Required Estimator Parameters
 * <ol>
 *  <li>The first parameter element that every estimator needs is the id 
 *      parameter. Every estimator must have a unique id. If DAGMC is being 
 *      used, the estimator id can be specified in CUBIT. To further modify 
 *      the estimator defined in CUBIT, the same id must be specified in the 
 *      id parameter.
 *   <ul>
 *    <li>\code
 *        <Parameter name="Id" type="unsigned int" value="1"/>
 *        \endcode</li>
 *   </ul></li>
 *
 *  <li>The second parameter element is the type parameter. The following type
 *      parameter value attributes are valid: Surface Current, Surface Flux, 
 *      Cell Track-Length Flux, Cell Collision Flux, Cell Pulse Height and
 *      Tet Mesh Track-Length Flux.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Type" type="string" value="Surface Current"/>
 *           <Parameter name="Type" type="string" value="Surface Flux"/>
 *           <Parameter name="Type" type="string" value="Cell Track-Length Flux"/>
 *           <Parameter name="Type" type="string" value="Cell Collision Flux"/>
 *           <Parameter name="Type" type="string" value="Cell Pulse Height"/>
 *           <Parameter name="Type" type="string" value="Tet Mesh Track-Length Flux"/>
 *           \endcode</li>
 *      </ul>
 *      If DAGMC is being used, the estimator type can also be specified in 
 *      CUBIT (except for the tet mesh estimator). The default type keywords 
 *      are the following:
 *      <ul>
 *       <li>surface.current (Surface Current),</li>
 *       <li>surface.flux (Surface Flux),</li>
 *       <li>cell.tl.flux (Cell Track-Length Flux),</li>
 *       <li>cell.c.flux (Cell Collision Flux),</li>
 *       <li>cell.pulse.height (Cell Pulse Height).</li>
 *      </ul>
 *      However, these keywords can be substituted with any alternative of your
 *      choosing (these alternatives must be specified in the 
 *      \ref geometry_xml_file "geometry xml file").</li>
 *  <li>The third parameter element is the particle type parameter. This 
 *      parameter specifies which particles can contribute to the estimator. 
 *      Currently, the only valid particle types are: Neutron, Photon
 *      and Electron.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Particle Type" type="string" value="Neutron"/>
 *           <Parameter name="Particle Type" type="string" value="Photon"/>
 *           <Parameter name="Particle Type" type="string" value="Electron"/>
 *           \endcode</li>
 *      </ul>
 *      If DAGMC is being used, the particle type can also be specified in 
 *      CUBIT using a corresponding shorthand:
 *      <ul>
 *       <li>n (Neutron)</li>
 *       <li>p (Photon)</li>
 *       <li>e (electron)</li>
 *      </ul></li>
 *
 *  <li><b>Tet Mesh Track-Length Flux Estimator:</b> The fourth parameter
 *         element is the mesh file name parameter. The tet mesh must be
 *         preconstructed and stored in an h5m or vtk file. This parameter
 *         specifies the desired mesh file.
 *         <ul>
 *          <li>\code
 *              <Parameter name="Mesh File Name" type="string" value="mesh_name.vtk"/>
 *              <Parameter name="Mesh File Name" type="string" value="mesh_name.h5m"/>
 *              \endcode</li>
 *         </ul>
 *
 *      <b>Non Mesh Estimators:</b>The fourth parameter element is the 
 *         surfaces or cells parameter. This parameter specifies which surfaces
 *         (for surface estimators) or cells (for cell estimators) the 
 *         estimator will watch. Every estimator must have at least one cell or
 *         surface to watch. If DAGMC is being used, the cells or surfaces 
 *         associated with an estimator can be specified in CUBIT. Any other
 *         cells or surfaces specified in this parameter element will be added
 *         to the list specified in CUBIT (technically the union will be 
 *         taken).
 *         <ul>
 *          <li>\code
 *              <Parameter name="Surfaces" type="Array" value="{1,2,3}"/>
 *              <Parameter name="Cells" type="Array" value="{4,5}"/>
 *              \endcode</li>
 *         </ul></li>
 *  <li><b>Tet Mesh Track-Length Flux Estimator:</b> The fifth parameter
 *        element is the output mesh file name. The output file type can 
 *        be specified using the suffix ".vtk" for VTK files or ".h5m" for
 *        H5M files.
 *        <ul>
 *         <li>\code
 *             <Parameter name="Output Mesh File Name" type="string" value="output_mesh_name.vtk"/>
 *             <Parameter name="Output Mesh File Name" type="string" value="output_mesh_name.h5m"/>
 *             \endcode</li>
 *        </ul></li>
 * </ol>
 *
 * \subsection optional_estimator_parameters Optional Estimator Parameters
 * <ol> 
 *  <li>The first optional parameter element is the response function 
 *      parameter. This parameter specifies the response functions (ids) that 
 *      should be used with the estimator.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Response Functions" type="Array" value="{0,1}"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The second optional parameter element is the multiplier parameter. This
 *      parameter specifies the multiplier (or scaling factor) that should be
 *      applied to the multiplier. This will typically be used to scale the
 *      estimator to a specific source strength.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Multiplier" type="double" value="1.0"/>
 *           \endcode</li>
 *      </ul></li>
 *  
 *  <li>The third optional argument is the energy multiplication parameter.
 *      This parameter is used to indicate that estimator results should be
 *      multiplied by the particle energy.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Energy Multiplication" type="bool" value="true"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The final optional parameter element is the bins parameter list. The 
 *      bins parameter list will contain the phase space binning desired for 
 *      the estimator. The phase space bins that can currently be specified are
 *      the following:
 *      <ul>
 *       <li>Energy Bins</li>
 *       <li>Time Bins</li>
 *       <li>Cosine Bins</li>
 *       <li>Collision Number Bins</li>
 *       <li>Generation Number Bins</li>
 *      </ul>
 *      The order that the different phase space bins are specified in is 
 *      important. Later bins are added to all of the bins previously added 
 *      (they run the fastest). \ref interval_operators "Interval operators" 
 *      can be used when specifying estimator bins.
 *      <ul>
 *       <li>\code
 *        <ParameterList name="Bins">
 *         <Parameter name="Energy Bins" type="Array" value="{1e-3,2l,1.0}"/>
 *         <Parameter name="Time Bins" type="Array" value="{0.0, 2i, 10.0}"/>
 *         <Parameter name="Cosine Bins" type="Array" value="{-1.0, 3i, 1.0}"/>
 *         <Parameter name="Collision Number Bins" type="Array" value="{0 1 2 3 10}"/>
 *         <Parameter name="Generation Number Bins" type="Array" value="{0 1 2 10}"/>
 *        </ParameterList>
 *        \endcode</li>
 *      </ul></li>
 * </ol>
 *
 * Note that if only basic estimators are required and DAGMC is being used
 * all of the estimators can be defined in CUBIT. This will leave the 
 * estimators xml file empty.
 *
 * \subsection example_estimator_xml_file Example Estimator XML File
 * An example estimator xml file is given below.
 * \code
 * <ParameterList name="Estimators">
 *
 * <ParameterList name="Cell Track Length Flux Estimator">
 *   <Parameter name="Id" type="unsigned int" value="1"/>
 *   <Parameter name="Type" type="string" value="Cell Track-Length Flux"/>
 *   <Parameter name="Multiplier" type="double" value="2.0"/>
 *   <Parameter name="Response Functions" type="Array" value="{0}"/>
 *   <ParameterList name="Bins">
 *     <Parameter name="Energy Bins" type="Array" value="{1e-3,2l,1.0,8i,10.0,20.0}"/>
 *     <Parameter name="Time Bins" type="Array" value="{0.0, 1e-9, 1e-8, 1e-7, 1.0}"/>
 * </ParameterList>
 * 
 * <ParameterList name="Cell Collision Flux Estimator">
 *  <Parameter name="Id" type="unsigned int" value="2"/>
 *  <Parameter name="Type" type="string" value="Cell Collision Flux"/>
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  <Parameter name="Multiplier" type="double" value="1.0"/>
 *  <Parameter name="Response Functions" type="Array" value="{0,1}"/>
 *  <ParameterList name="Bins">
 *    <Parameter name="Energy Bins" type="Array" value="{1e-3,1e-2,1e-1,1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,10.0,20.0}"/>
 *    <Parameter name="Collision Number Bins" type="Array" value="{0, 1, 2, 10}"/>
 *  </ParameterList>
 * </ParameterList>
 *
 * <ParameterList name="Pulse Height Estimator">
 *  <Parameter name="Id" type="unsigned int" value="3"/>
 *  <Parameter name="Type" type="string" value="Cell Pulse Height"/>
 *  <Parameter name="Particle Type" type="string" value="Photon"/>
 *  <Parameter name="Multiplier" type="double" value="1.0"/>
 *  <Parameter name="Cells" type="Array" value="{1,26}"/>
 *  <Parameter name="Energy Multiplication" type="bool" value="true"/>
 *  <ParameterList name="Bins">
 *    <Parameter name="Energy Bins" type="Array" value="{1e-3,2l,1.0,8i,10.0,20.0}"/>
 *  </ParameterList>
 * </ParameterList>

 * <ParameterList name="Surface Flux Estimator">
 *  <Parameter name="Id" type="unsigned int" value="4"/>
 *  <Parameter name="Type" type="string" value="Surface Flux"/>
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  <Parameter name="Multiplier" type="double" value="2.0"/>
 *  <Parameter name="Surfaces" type="Array" value="{7,16,25}"/>
 *  <ParameterList name="Bins">
 *    <Parameter name="Cosine Bins" type="Array" value="{-1.0, -0.5, 0.0, 0.5, 1.0}"/>
 *    <Parameter name="Energy Bins" type="Array" value="{1e-3,2l,1.0,8i,10.0,20.0}"/>
 *  </ParameterList>
 * </ParameterList>
  
 * <ParameterList name="Surface Current Estimator">
 *  <Parameter name="Id" type="unsigned int" value="5"/>
 *  <Parameter name="Type" type="string" value="surface.current"/>
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  <Parameter name="Multiplier" type="double" value="2.0"/>
 *  <Parameter name="Surfaces" type="Array" value="{7,16,25}"/>
 *  <ParameterList name="Bins">
 *    <Parameter name="Cosine Bins" type="Array" value="{-1.0, -0.5, 0.0, 0.5, 1.0}"/>
 *    <Parameter name="Collision Number Bins" type="Array" value="{0, 1, 2, 10}"/>
 *  </ParameterList>
 * </ParameterList>
 *
 * <ParameterList name="Tet Mesh Estimator">
 *  <Parameter name="Id" type="unsigned int" value="6"/>
 *  <Parameter name="Type" type="string" value="Tet Mesh Track-Length Flux"/>
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  <Parameter name="Multiplier" type="double" value="1.0"/>
 *  <Parameter name="Mesh File Name" type="string" value="my_mesh.vtk"/>
 *  <Parameter name="Output Mesh File Name" type="string" value="my_mesh_data.vtk"/>
 *  <ParameterList name="Bins">
 *   <Parameter name="Energy Bins" type="Array" value="{1e-3,2l,1.0,8i,10.0,20.0}"/>
 *  </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \section source_construction Source Construction
 * There are currently two types of sources that can be created: the 
 * distributed source and the compound source. 
 *  The compound source is a series of distributed sources that have 
 * been combined to define a more complicated source. 
 *
 * \subsection distributed_source Distributed Source Construction
 * The distributed source is simply a phase space distribution that can be 
 * sampled from to get particle starting states. Every distributed source 
 * requires four parameter elements. There are also two optional parameter
 * elements. These parameter elements will be described below.
 * <ol> 
 *  <li>The first required parameter element is the id. This parameter becomes
 *      more important when defining compound sources.
 *      <ul>
 *       <li>\code
 *           <Parameter name="Id" type="int" value="1"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The second required parameter element is the particle type. This 
 *      parameter specifies the particle type that will be generated by the 
 *      source. Currently, the only valid particle types are "Neutron," 
 *      "Photon" and "Electron".
 *      <ul>
 *       <li>\code
 *           <Parameter name="Particle Type" type="string" value="Neutron"/>
 *           <Parameter name="Particle Type" type="string" value="Photon"/>
 *           <Parameter name="Particle Type" type="string" value="Electron"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The third required element is the spatial distribution, which is itself
 *      a parameter list. Please refer to the
 *      \ref spatial_distributions "spatial distributions" section for 
 *      information regarding the construction of spatial distributions.
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Distribution">
 *             <Parameter name="X Distribution" type="Uniform Distribution" value="{-10,10}"/>
 *             <Parameter name="Y Distribution" type="Uniform Distribution" value="{-10,10}"/>
 *             <Parameter name="Z Distribution" type="Uniform Distribution" value="{-10,10}"/>
 *           </ParameterList>
 *           \endcode</li>
 *      </ul></li>
 *  
 *  <li>The last required element is the energy distribution, which can be any
 *      of the \ref one_d_distributions "one-dimensional distributions".
 *      <ul>
 *       <li>\code
 *           <Parameter name="Energy Distribution" type="Exponential Distribution" value="{0.5}"/>
 *           \endcode</li>
 *      </ul></li>
 * </ol>
 * 
 * <ol>
 *  <li>The first optional element is the directional distribution, which is 
 *      also a parameter list. Please refer to the 
 *      \ref directional_distributions "directional distributions" section for
 *      information regarding the construction of directional distributions.
 *      The default directional distribution is isotropic.
 *       <ul>
 *        <li>\code
 *            <ParameterList name="Directional Distribution">
 *              <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1.0,1.0}"/>
 *            </ParameterList>
 *            \endcode</li>
 *       </ul></li>
 *
 *  <li>The second optional element is the time distribution, which can be any
 *      of the \ref one_d_distributions "one-dimensional distributions".
 *      <ul>
 *       <li>\code
 *           <Parameter name="Time Distribution" type="Delta Distribution" value="{0}"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The third optional element is the rejection cell. When a source's
 *      spatial distribution is too complicated to be modeled with one of
 *      the available spatial distribution types, one can specify a rejection
 *      cell that will be used in conjunction with the defined spatial 
 *      distribution. After a point is sampled from the spatial distribution,
 *      the point is only used if it falls within the rejection cell. 
 *      <ul>
 *       <li>\code
 *           <Parameter name="Rejection Cell" type="int" value="2"/>
 *           \endcode</li>
 *      </ul></li>
 *
 *  <li>The fourth optional element is the spatial importance function. When
 *      the spatial importance function is specified, it is treated as the
 *      true distribution of particle positions. The particle position is
 *      first sampled from the spatial distribution and then the particle
 *      weight at that point is determined from the spatial importance
 *      function. Please refer to the
 *      \ref spatial_distributions "spatial distributions" section for 
 *      information regarding the construction of spatial importance functions.
 *      It is important that the spatial distribution type and the
 *      spatial importance function type are the same.
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Spatial Importance Function">
 *             <Parameter name="X Distribution" type="Histogram Distribution" value="{{-10,0,10},{2,1}}"/>
 *             <Parameter name="Y Distribution" type="Histogram Distribution" value="{{-10,0,10},{2,1}}"/>
 *             <Parameter name="Z Distribution" type="Histogram Distribution" value="{{-10,0,10},{2,1}}"/>
 *           </ParameterList>
 *           \endcode</li>
 *      </ul></li>
 *   
 *  <li>The fifth optional element is the directional importance function. When
 *      the directional importance function is specified, it is treated as the
 *      true distribution of particle directions. The particle direction is
 *      first sampled from the directional distribution and then the particle
 *      weight at that direction is determined from the directional importance
 *      function. Please refer to the
 *      \ref directional_distributions "directional distributions" section for
 *      information regarding the construction of directional importance 
 *      functions. It is important that the directional distribution type and
 *      the directional importance function type are the same.
 *      <ul>
 *       <li>\code
 *           <ParameterList name="Directional Importance Function"/>
 *             <Parameter name="Mu Distribution" type="Histogram Distribution" value="{{-1,0,1},{1,2}}"/>
 *             <Parameter name="Theta Distribution" type="Histogram Distribution" value="{{0,pi,2pi},{1,2}}"/>
 *           </ParameterList>
 *           \endcode</li>
 *      </ul></li>
 *
 * For more on the directional distribution parameter list, refer to the
 * discussion on \ref phase_space_response_function "creating phase space response functions".
 *
 * The fifth parameter element is the energy distribution parameter, which is
 * a \ref one_d_distributions "one-dimensional distribution".
 *
 * The sixth parameter element is the time distribution parameter, which is a
 * \ref one_d_distributions "one-dimensional distribution".
 *
 * A number of optional parameter elements can also be used. The first is the
 * rejection cell parameter. When a source's spatial distribution is too 
 * complicated to be modeled with a Cartesian, cylindrical or spherical 
 * distribution, one can specify a rejection cell that can be used in 
 * conjunction with one of the three distributions. A sampled particle position
 * will only be kept when it falls within the rejection cell.
 *
 * The second optional parameter is the importance function. For every phase
 * space dimension distribution, an importance function can be specified
 * that describes the true distribution of source particles in that dimension.
 * Essentially, the source particle's state variable will be sampled from
 * the distribution parameter and its weight will be set according to the
 * value of the importance function for the sampled state variable. This
 * allows the source to be biased.
 *
 * Some distributed source examples are given below.
 * \code
 * <ParameterList name="Source">
 * 
 * <ParameterList name="Basic Distributed Source">
 *   <Parameter name="Id" type="int" value="1"/>
 *
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  
 *  <ParameterList name="Spatial Distribution">
 *    <Parameter name="X Distribution" type="Delta Distribution" value="{1}"/>
 *    <Parameter name="Y Distribution" type="Delta Distribution" value="{1}"/>
 *    <Parameter name="Z Distribution" type="Delta Distribution" value="{1}"/>
 *  </ParameterList>
 *  
 *  <ParameterList name="Directional Distribution">
 *    <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1,1,2}"/>
 *    <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,6.283185307179586,1}"/>
 *  </ParameterList>
 *  
 *  <Parameter name="Energy Distribution" type="Exponential Distribution" value="{2,0.5}"/>
 *
 *  <Parameter name="Time Distribution" type="Delta Distribution" value="{0}"/>
 *
 * </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \code
 * <ParameterList name="Source">
 *  
 * <ParameterList name="Complex Distributed Source">
 *   <Parameter name="Id" type="int" value="1"/>
 *
 *   <ParameterList name="Spatial Distribution">
 *     <Parameter name="X Distribution" type="Uniform Distribution" value="{0,1,1}"/>
 *     <Parameter name="Y Distribution" type="Uniform Distribution" value="{0,1,1}"/>
 *     <Parameter name="Z Distribution" type="Uniform Distribution" value="{0,1,1}"/>
 *   </ParameterList>
 *
 *   <ParameterList name="Spatial Importance Function">
 *     <Parameter name="X Distribution" type="Histogram Distribution" value="{{0,0.5,1},{2,1}}"/>
 *     <Parameter name="Y Distribution" type="Histogram Distribution" value="{{0,0.5,1},{2,1}}"/>
 *     <Parameter name="Z Distribution" type="Histogram Distribution" value="{{0,0.5,1},{2,1}}"/>
 *   </ParameterList>
 *  
 *   <ParameterList name="Directional Distribution">
 *     <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1,1,2}"/>
 *     <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,6.283185307179586,1}"/>
 *   </ParameterList>
 *  
 *   <Parameter name="Energy Distribution" type="Uniform Distribution" value="{1e-5,1,1}"/>
 *    
 *   <Parameter name="Energy Importance Function" type="Normal Distribution" value="{1,1,1e-5,1}"/>
 *
 *   <Parameter name="Time Distribution" type="Delta Distribution" value="{0}"/>
 *
 *   <Parameter name="Rejection Cell" type="int" value="2"/>
 *
 *   <Parameter name="Particle Type" type="string" value="Neutron"/>
 * </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \subsection compound_source Compound Source Construction
 * To construct a compound source, one simply needs to define several sources,
 * each with a unique id, and assign a weight to each. The weight parameter 
 * element must be specified for each source. These weights will be used to
 * sample a source to use for sampling a particle state. Typically, the
 * weight will be set to the spatial volume occupied by each distributed
 * source. An example compound source is given below.
 *
 * \code
 * <ParameterList name="Source">
 *
 * <ParameterList name="Neutron Source">
 *   <Parameter name="Id" type="int" value="1"/>
 *
 *  <Parameter name="Particle Type" type="string" value="Neutron"/>
 *  
 *  <ParameterList name="Spatial Distribution">
 *    <Parameter name="X Distribution" type="Delta Distribution" value="{0}"/>
 *    <Parameter name="Y Distribution" type="Delta Distribution" value="{0}"/>
 *    <Parameter name="Z Distribution" type="Delta Distribution" value="{0}"/>
 *  </ParameterList>
 *  
 *  <ParameterList name="Directional Distribution">
 *    <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1,1,2}"/>
 *    <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,6.283185307179586,1}"/>
 *  </ParameterList>
 *  
 *  <Parameter name="Energy Distribution" type="Delta Distribution" value="{1}"/>
 *    
 *  <Parameter name="Time Distribution" type="Delta Distribution" value="{0}"/>
 *  <Parameter name="Weight" type="double" value="0.2"/>
 * </ParameterList>
 *
 * <ParameterList name="Photon Source">
 *  <Parameter name="Id" type="int" value="2"/>
 *
 *  <Parameter name="Particle Type" type="string" value="Photon"/>
 * 
 *  <ParameterList name="Spatial Distribution">
 *    <Parameter name="X Distribution" type="Delta Distribution" value="{0}"/>
 *    <Parameter name="Y Distribution" type="Delta Distribution" value="{0}"/>
 *    <Parameter name="Z Distribution" type="Delta Distribution" value="{0}"/>
 *  </ParameterList>
 * 
 *  <ParameterList name="Directional Distribution">
 *    <Parameter name="Mu Distribution" type="Uniform Distribution" value="{-1,1,2}"/>
 *    <Parameter name="Theta Distribution" type="Uniform Distribution" value="{0,6.283185307179586,1}"/>
 *  </ParameterList>
 *  
 *  <Parameter name="Energy Distribution" type="Delta Distribution" value="{1}"/>
 *    
 *  <Parameter name="Time Distribution" type="Delta Distribution" value="{0}"/>
 *  <Parameter name="Weight" type="double" value="0.8"/>
 * </ParameterList>
 *
 * </ParameterList>
 * \endcode
 *
 * \section interval_operators Interval Operators
 * To avoid having to write out long sequences of values, two interval
 * operators have been defined: the linear interval operator (i) and the 
 * logarithmic interval operator (l). These operators are identical to the
 * "i" operator and "ilog" operators in MCNP.
 *
 * \section runtime_modifications Runtime Configuration
 * Currently, only the number of particles to run can be set at run time.
 * See the following example for setting this parameter:
 *
 * \code
 * <ParameterList name="Simulation Info">
 *   <Parameter name="Histories" type="unsigned int" value="1000000"/>
 * </ParameterList>
 * \endcode
 *
 * In the future, one will also be able to turn on/off certain physics,
 * set thresholds for certain physics to be turned on/off, set cutoff
 * energies, void out the geometry (ignore materials), etc.
 *
 * \section running_facemc Running FACEMC
 * Once all of the input XML files have been created, FACEMC can be used. To
 * see details about the FACEMC command-line interface (CLI), simply type
 * the following command
 * \code
 * facemc --help
 * \endcode
 *
 * Each of command-line arguments are listed below.
 * <ul>
 *  <li><b>sim_info</b>: The name of the XML file containing runtime
 *                       configuration information.</li>
 *  <li><b>geom_def</b>: The name of the XML file containing geometry
 *                       information.</li>
 *  <li><b>mat_def</b>: The name of the XML file containing the material
 *                      definitions.</li>
 *  <li><b>resp_def</b>: The name of the XML file containing the response
 *                       function definitions.</li>
 *  <li><b>est_def</b>: The name of the XML file containing the estimator
 *                      definitions.</li>
 *  <li><b>src_def</b>: The name of the XML file containing the source
 *                      definitions.</li>
 *  <li><b>cross_sec_dir</b>: The directory containing the desired cross
 *                            section tables (cross_sections.xml file).</li>
 * </ul>
 *
 * To run FACEMC, type the following command:
 * \code
 * facemc --sim_info=simulation.xml --geom_def=geometry.xml --mat_def=materials.xml --resp_def=responses.xml --est_def=estimators.xml --src_def=sources.xml --cross_sec_dir=/home/me/nuclear_data/
 * \endcode
 *
 * To get status updates on the simulations progress, simply hit control-C. 
 * This can also be used to end the simulation early. 
 *
 * When a simulation finishes, the results will be printed to the screen.
 */ 
