#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Collision photon kinematics helpers unit tests
#  \file   tstMonteCarlo.Collision.ElectronScatteringDistribution.py
#  \author Luke Kersting
#  \brief  Unit tests for the MonteCarlo.Collision.ElectronScatteringDistribution helpers
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-f", "--nativefile", type="string", dest="nativefile",
                  help="set the native file that the Electron Distributions will initialized with")
parser.add_option("-a", "--adjointfile", type="string", dest="adjointfile",
                  help="set the adjoint native file that the Adjoint Electron Distributions will initialized with")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Collision = importPyFrensieModuleFromBuildDir('MonteCarlo.Collision')
Utility = importPyFrensieModuleFromBuildDir('Utility')
Prng = importPyFrensieModuleFromBuildDir('Utility.Prng')
Native = importPyFrensieModuleFromBuildDir('Data.Native')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the analog electron scattering distribution
class AnalogElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision analog elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createAnalogElasticDistribution( self.data, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createAnalogElasticDistribution evaluate method"
        energy = 1e5
        self.assertTrue(self.dist.evaluate(energy, -0.01) == 4.83506E-7)
        self.assertTrue(self.dist.evaluate(energy, 0.71) == 1.00972E-5)
        self.assertTrue(self.dist.evaluate(energy, 0.999999) == 9.86945E+5)
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                9.80579728298825E+23,
                                delta=1e-12*9.80579728298825E+23 )
        energy = 6.625E+01
        self.assertTrue(self.dist.evaluate(energy, -0.01) == 4.84635E-7)
        self.assertTrue(self.dist.evaluate(energy, 0.71) == 1.01203E-5)
        self.assertTrue(self.dist.evaluate(energy, 0.999999) == 9.84753E+5)
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.952101737343830E+11,
                                delta=1e-12*1.952101737343830E+11 )
        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluate(energy, -0.01),
                                4.8452964167333881569e-07,
                                delta=1e-6*4.8452964167333881569e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.71),
                                1.0119114917618560241e-05,
                                delta=1e-6*1.0119114917618560241e-05 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                9.85083883863282E+05,
                                delta=1e-9*9.85083883863282E+05 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.582772041017910E+13,
                                delta=1e-9*1.582772041017910E+13 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createAnalogElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                4.83505995466074E-07,
                                delta=1e-12*4.83505995466074E-07 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                1.00971999053167E-05,
                                delta=1e-12*1.00971999053167E-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.86944990745234E+05,
                                delta=1e-12*9.86944990745234E+05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                9.80579719103748E+23,
                                delta=1e-12*9.80579719103748E+23 )
        energy = 6.625E+01
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                4.846347658089040E-07,
                                delta=1e-12*4.846347658089040E-07 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                1.012029510954810E-05,
                                delta=1e-12*1.012029510954810E-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.847525241359310E+05,
                                delta=1e-12*9.847525241359310E+05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                1.952100794025980E+11,
                                delta=1e-12*1.952100794025980E+11 )
        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                4.8452944220121082286e-07,
                                delta=1e-6*4.8452944220121082286e-07 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                1.0119110752696660311e-05,
                                delta=1e-6*1.0119110752696660311e-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.85083478434198E+05,
                                delta=1e-9*9.85083478434198E+05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                1.582771389599460E+13,
                                delta=1e-9*1.582771389599460E+13 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createAnalogElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                1.50429930368274E-07,
                                delta=1e-12*1.50429930368274E-07 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                2.00273614049885E-06,
                                delta=1e-12*2.00273614049885E-06 )
        self.assertTrue(self.dist.evaluateCDF(energy, 0.999999) == 1.0)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.83757207759616E+08,
                                delta=1e-12*9.83757207759616E+08 )
        energy = 6.625E+01
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                1.507919401217380E-07,
                                delta=1e-12*1.507919401217380E-07 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                2.007348937973720E-06,
                                delta=1e-12*2.007348937973720E-06 )
        self.assertTrue(self.dist.evaluateCDF(energy, 0.999999) == 1.0)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                4.39444544314946E+02,
                                delta=1e-12*4.39444544314946E+02 )
        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                1.5073724854885435558e-07,
                                delta=1e-6*1.5073724854885435558e-07 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                2.0066525118587287668e-06,
                                delta=1e-6*2.0066525118587287668e-06 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                3.94962247641177E+03,
                                delta=1e-12*3.94962247641177E+03 )

    def testSample(self):
        "*Test MonteCarlo.Collision.createAnalogElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 6.625e1
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999999775901926569E-01,
                                delta=1e-12*9.9999999775901926569E-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e-4
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                4.9274935694433192e-01,
                                delta=1e-12*4.9274935694433192e-01 )
        self.assertTrue( energy == outgoing_energy)

##-----------------------------------------------------------------------------#
## Test the analog adjoint electron scattering distribution
#class AnalogElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
#    "TestCase class for MonteCarlo.Collision analog elastic adjoint electron scattering distribution"

#    def setUp(self):
#        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
#        self.dist = Collision.createAnalogElasticDistribution( self.data, True, True, 1e-7 )

#    def testEvaluate(self):
#        "*Test MonteCarlo.Collision.createAnalogElasticDistribution adjoint evaluate method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                1.795001149384975663e-10,
#                                delta=1e-12*1.795001149384975663e-10 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                5.155403414525308351e-07,
#                                delta=1e-12*5.155403414525308351e-07 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
#                                9.611790083009668160e+05,
#                                delta=1e-12*9.611790083009668160e+05 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
#                                1.769611374917963028e+09,
#                                delta=1e-12*1.769611374917963028e+09 )
#        energy = 3.2e-2
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                7.65563e-05,
#                                delta=1e-12*7.65563e-05 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                3.348677297297296906e-04,
#                                delta=1e-12*3.348677297297296906e-04 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
#                                2.050079999999999927e+03,
#                                delta=1e-12*2.050079999999999927e+03 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
#                                2.063884604432359993e+03,
#                                delta=1e-12*2.063884604432359993e+03 )
#        energy = 1.0e-2
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                2.893104886348792288e-04,
#                                delta=1e-12*2.893104886348792288e-04 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                1.185324831658095225e-03,
#                                delta=1e-12*11.185324831658095225e-03 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
#                                6.622847532027831221e+02,
#                                delta=1e-12*6.622847532027831221e+02 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
#                                6.636473391404605309e+02,
#                                delta=1e-12*6.636473391404605309e+02 )

#    def testEvaluatePDF(self):
#        "*Test MonteCarlo.Collision.createAnalogElasticDistribution adjoint evaluatePDF method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                1.793495604046327523e-10,
#                                delta=1e-12*1.793495604046327523e-10 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                5.151079354018578792e-07,
#                                delta=1e-12*5.151079354018578792e-07 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
#                                9.603728257667385042e+05,
#                                delta=1e-12*9.603728257667385042e+05 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
#                                1.768127125084675074e+09,
#                                delta=1e-12*1.768127125084675074e+09 )
#        energy = 3.2e-2
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                7.655631033198484470e-05,
#                                delta=1e-12*7.655631033198484470e-05 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                3.348677749232449076e-04,
#                                delta=1e-12*3.348677749232449076e-04 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
#                                2.050080276677366783e+03,
#                                delta=1e-12*2.050080276677366783e+03 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
#                                2.063884882972786272e+03,
#                                delta=1e-12*2.063884882972786272e+03 )
#        energy = 1e-2
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                2.893105643973649778e-04,
#                                delta=1e-12*2.893105643973649778e-04 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                1.185325111775893323e-03,
#                                delta=1e-12*1.185325111775893323e-03 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
#                                6.622848914017981770e+02,
#                                delta=1e-12*6.622848914017981770e+02 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
#                                6.636474776238064806e+02,
#                                delta=1e-12*6.636474776238064806e+02 )

#    def testEvaluateCDF(self):
#        "*Test MonteCarlo.Collision.createAnalogElasticDistribution adjoint evaluateCDF method"
#        energy = 20.0
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                1.595847184343155270e-07,
#                                delta=1e-12*1.595847184343155270e-07 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.999999) == 1.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
#                                4.220753867352485145e+01,
#                                delta=1e-12*4.220753867352485145e+01 )
#        energy = 3.2e-2
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                1.636052852354576116e-04,
#                                delta=1e-12*1.636052852354576116e-04 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.999999) == 1.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
#                                1.002056970999347874e+00,
#                                delta=1e-12*1.002056970999347874e+00 )
#        energy = 1e-2
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                5.654662749470416253e-04,
#                                delta=1e-12*5.654662749470416253e-04 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.999999) == 1.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
#                                1.000662965834468343e+00,
#                                delta=1e-12*1.000662965834468343e+00 )


#    def testSample(self):
#        "*Test MonteCarlo.Collision.createAnalogElasticDistribution adjoint sample method"
#        random_numbers = [ 0.5, 0.5 ]
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        energy = 3.2e-2
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.995576419248560773e-01,
#                                delta=1e-12*9.995576419248560773e-01 )
#        self.assertTrue( energy == outgoing_energy)


#        energy = 1e-2
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.984885070107767380e-01,
#                                delta=1e-12*9.984885070107767380e-01 )
#        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the cutoff electron scattering distribution
class CutoffElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision cutoff elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createCutoffElasticDistribution( self.data, 0.9, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                6.224912546301515637e-02,
                                delta=1e-12*6.224912546301515637e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                1.189587667917323444e+01,
                                delta=1e-12*1.189587667917323444e+01 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.102371720100650265e-01,
                                delta=1e-12*1.102371720100650265e-01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.960680970798900802e+00,
                                delta=1e-12*9.960680970798900802 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                6.224912487929362692e-02,
                                delta=1e-12*6.224912487929362692e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.189587656762340373e+01,
                                delta=1e-12*1.189587656762340373e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.102371539686526486e-01,
                                delta=1e-12*1.102371539686526486e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.960679340634142065e+00,
                                delta=1e-12*9.960679340634142065e+00 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.926862039029748550e-02,
                                delta=1e-12*1.926862039029748550e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.481313695107814521e-02,
                                delta=1e-12*5.481313695107814521e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.046987414297936958e-01,
                                delta=1e-12*8.046987414297936958e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.249768465860324307e-01,
                                delta=1e-12*8.249768465860324307e-01 )
        self.assertTrue( energy == outgoing_energy)

##-----------------------------------------------------------------------------#
## Test the cutoff adjoint electron scattering distribution
#class CutoffElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
#    "TestCase class for MonteCarlo.Collision cutoff elastic adjoint electron scattering distribution"

#    def setUp(self):
#        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
#        self.dist = Collision.createCutoffElasticDistribution( self.data, 0.9, True, True, 1e-7 )

#    def testEvaluate(self):
#        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluate method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                2.170424336376563682e-05,
#                                delta=1e-12*2.170424336376563682e-05 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                6.233652295185666825e-02,
#                                delta=1e-12*6.233652295185666825e-02 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
#                                1.190475846857221676e+01,
#                                delta=1e-12*1.190475846857221676e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
#        energy = 3.2e-2
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                2.308971556380408005e-02,
#                                delta=1e-12*2.308971556380408005e-02 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                1.009975747385424699e-01,
#                                delta=1e-12*1.009975747385424699e-01 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
#                                1.054184999240674614e+01,
#                                delta=1e-12*1.054184999240674614e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
#        energy = 1.0e-2
#        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
#                                2.536180548529314363e-02,
#                                delta=1e-12*2.536180548529314363e-02 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                1.039090492683098083e-01,
#                                delta=1e-12*1.039090492683098083e-01 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
#                                1.147863056352218081e+01,
#                                delta=1e-12*1.147863056352218081e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

#    def testEvaluatePDF(self):
#        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluatePDF method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                2.168603907323557526e-05,
#                                delta=1e-12*2.168603907323557526e-05 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                6.228423860563780251e-02,
#                                delta=1e-12*6.228423860563780251e-02 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
#                                1.189477343116640107e+01,
#                                delta=1e-12*1.189477343116640107e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
#        energy = 3.2e-2
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                2.308971867997598737e-02,
#                                delta=1e-12*2.308971867997598737e-02 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                1.009975883691047044e-01,
#                                delta=1e-12*1.009975883691047044e-01 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
#                                1.054185141512746604e+01,
#                                delta=1e-12*1.054185141512746604e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
#        energy = 1e-2
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
#                                2.536181212685472558e-02,
#                                delta=1e-12*2.536181212685472558e-02 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                1.039090738242570977e-01,
#                                delta=1e-12*1.039090738242570977e-01 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
#                                1.147863299604365217e+01,
#                                delta=1e-12*1.147863299604365217e+01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

#    def testEvaluateCDF(self):
#        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluateCDF method"
#        energy = 20.0
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                1.929617464157703730e-02,
#                                delta=1e-12*1.929617464157703730e-02 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
#        energy = 3.2e-2
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                4.934407097550105870e-02,
#                                delta=1e-12*4.934407097550105870e-02 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
#        energy = 1e-2
#        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                4.957043120479242421e-02,
#                                delta=1e-12*4.957043120479242421e-02 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )

#    def testSample(self):
#        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint sample method"
#        random_numbers = [ 0.5, 0.5 ]
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        energy = 3.2e-2
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                8.114106118641029042e-01,
#                                delta=1e-12*8.114106118641029042e-01 )
#        self.assertTrue( energy == outgoing_energy)


#        energy = 1e-2
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                8.095029982730845841e-01,
#                                delta=1e-12*8.095029982730845841e-01 )
#        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the hybrid electron scattering distribution
class HybridElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision hybrid elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createHybridElasticDistribution( self.data, 0.9, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                5.018914348857825507e-07,
                                delta=1e-12*5.018914348857825507e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.591200794108925944e-05,
                                delta=1e-12*9.591200794108925944e-05 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.083067522694019895e-02,
                                delta=1e-12*1.083067522694019895e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.786254370171650896e-01,
                                delta=1e-12*9.786254370171650896e-01 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                5.018914301794539376e-07,
                                delta=1e-12*5.018914301794539376e-07 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.591200704170467516e-05,
                                delta=1e-12*9.591200704170467516e-05 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.083067345439220515e-02,
                                delta=1e-12*1.083067345439220515e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.786252768553543868e-01,
                                delta=1e-12*9.786252768553543868e-01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.553556851445512816e-07,
                                delta=1e-12*1.553556851445512816e-07 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
                                8.062626280331882054e-06,
                                delta=1e-12*8.062626280331882054e-06 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.385327595601952823e-03,
                                delta=1e-12*5.385327595601952823e-03 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
                                9.824884863656807577e-02,
                                delta=1e-12*9.824884863656807577e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.563120131506376298e-01,
                                delta=1e-12*9.563120131506376298e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.968477432553788375e-01,
                                delta=1e-12*9.968477432553788375e-01 )
        self.assertTrue( energy == outgoing_energy)

##-----------------------------------------------------------------------------#
## Test the hybrid adjoint electron scattering distribution
#class HybridElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
#    "TestCase class for MonteCarlo.Collision hybrid elastic adjoint electron scattering distribution"

#    def setUp(self):
#        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
#        self.dist = Collision.createHybridElasticDistribution( self.data, 0.9, True, True, 1e-7 )

#    def testEvaluate(self):
#        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluate method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                5.155360778261204246e-07,
#                                delta=1e-12*5.155360778261204246e-07 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
#                                9.845484152356326552e-05,
#                                delta=1e-12*9.845484152356326552e-05 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
#        energy = 1.0e-3;
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
#                                1.090286428636249617e-02,
#                                delta=1e-12*1.090286428636249617e-02 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
#                                9.851482112989827788e-01,
#                                delta=1e-12*9.851482112989827788e-01 )
#        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

#    def testEvaluatePDF(self):
#        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluatePDF method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                5.151036753515358688e-07,
#                                delta=1e-12*5.151036753515358688e-07 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
#                                9.837226317659455727e-05,
#                                delta=1e-12*9.837226317659455727e-05 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
#        energy = 1.0e-3;
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
#                                1.090286250200004324e-02,
#                                delta=1e-12*1.090286250200004324e-02 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
#                                9.851480500696551124e-01,
#                                delta=1e-12*9.851480500696551124e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

#    def testEvaluateCDF(self):
#        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluateCDF method"
#        energy = 20.0
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                1.595833986353288889e-07,
#                                delta=1e-12*1.595833986353288889e-07 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
#                                8.270209075091914110e-06,
#                                delta=1e-12*8.270209075091914110e-06 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
#        energy = 1.0e-3;
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
#                                5.421222101314805350e-03,
#                                delta=1e-12*5.421222101314805350e-03 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
#                                9.890370088019881378e-02,
#                                delta=1e-12*9.890370088019881378e-02 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )


#    def testSample(self):
#        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint sample method"
#        random_numbers = [ 0.5, 0.5 ]
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        energy = 1e-3
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.788926224755287731e-01,
#                                delta=1e-12*9.788926224755287731e-01 )
#        self.assertTrue( energy == outgoing_energy)


#        energy = 20.0
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.979944121530972545e-01,
#                                delta=1e-12*9.979944121530972545e-01 )
#        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the moment preserving electron scattering distribution
class MomentPreservingElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision moment preserving elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createMomentPreservingElasticDistribution( self.data, 0.9, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluate method"
        energy = 1e5
        self.assertTrue( self.dist.evaluate(energy, 9.9684774325537e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 9.968477432553788375e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluate(energy, 9.9684774325538e-01) == 0.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluatePDF(energy, 9.56312013150637e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.563120131506376298e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy, 9.56312013150638e-01) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertTrue( self.dist.evaluatePDF(energy, 9.9684774325537e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.968477432553788375e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy, 9.9684774325538e-01) == 0.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluatePDF(energy,  9.56312013150637e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.563120131506376298e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy,  9.56312013150638e-01) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertTrue( self.dist.evaluateCDF(energy, 9.9684774325537e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.968477432553788375e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 9.9684774325538e-01) == 1.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluatePDF(energy,  9.56312013150637e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.563120131506376298e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy,  9.56312013150638e-01) == 0.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution sample method"
        random_numbers = [ 0.0, 1.0-1e-15, 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.563120131506376298e-01,
                                delta=1e-12*9.563120131506376298e-01 )
        self.assertTrue( energy == outgoing_energy)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.563120131506376298e-01,
                                delta=1e-12*9.563120131506376298e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.968477432553788375e-01,
                                delta=1e-12*9.968477432553788375e-01 )
        self.assertTrue( energy == outgoing_energy)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.968477432553788375e-01,
                                delta=1e-12*8.249768465860324307e-01 )
        self.assertTrue( energy == outgoing_energy)

##-----------------------------------------------------------------------------#
## Test the moment preserving adjoint electron scattering distribution
#class MomentPreservingElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
#    "TestCase class for MonteCarlo.Collision moment preserving elastic adjoint electron scattering distribution"

#    def setUp(self):
#        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
#        self.dist = Collision.createMomentPreservingElasticDistribution( self.data, 0.9, True, True, 1e-7 )

#    def testEvaluate(self):
#        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluate method"
#        energy = 20.0
#        self.assertTrue( self.dist.evaluate(energy, 9.32883207226057e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 9.328832072260571096e-01),
#                                2.421154154048458032e-03,
#                                delta=1e-12*2.421154154048458032e-03 )
#        self.assertTrue( self.dist.evaluate(energy, 9.32883207226058e-01) == 0.0 )

#        self.assertTrue( self.dist.evaluate(energy, 9.97994412153097e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluate(energy, 9.979944121530972545e-01),
#                                9.975788458459514674e-01,
#                                delta=1e-12*9.975788458459514674e-01 )
#        self.assertTrue( self.dist.evaluate(energy, 9.97994412153098e-01) == 0.0 )

#        energy = 1.0e-3;
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.23986089002024e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.239860890020241690e-01),
#                                1.624553055081424668e-01,
#                                delta=1e-12*1.624553055081424668e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.23986089002025e-01) == 0.0 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.78892622475528e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.788926224755287731e-01),
#                                8.375446944918575332e-01,
#                                delta=1e-12*8.375446944918575332e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.78892622475529e-01) == 0.0 )

#    def testEvaluatePDF(self):
#        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluatePDF method"
#        energy = 20.0
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.32883207226057e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.328832072260571096e-01),
#                                2.421154154048458032e-03,
#                                delta=1e-12*2.421154154048458032e-03 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.32883207226058e-01) == 0.0 )

#        self.assertTrue( self.dist.evaluatePDF(energy, 9.97994412153097e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.979944121530972545e-01),
#                                9.975788458459514674e-01,
#                                delta=1e-12*9.975788458459514674e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.97994412153098e-01) == 0.0 )
#        energy = 1.0e-3;
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.23986089002024e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.239860890020241690e-01),
#                                1.624553055081424668e-01,
#                                delta=1e-12*1.624553055081424668e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.23986089002025e-01) == 0.0 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.78892622475528e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.788926224755287731e-01),
#                                8.375446944918575332e-01,
#                                delta=1e-12*8.375446944918575332e-01 )
#        self.assertTrue( self.dist.evaluatePDF(energy, 9.78892622475529e-01) == 0.0 )

#    def testEvaluateCDF(self):
#        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluateCDF method"
#        energy = 20.0
#        self.assertTrue( self.dist.evaluateCDF(energy, 9.32883207226057e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.328832072260571096e-01),
#                                2.421154154048458466e-03,
#                                delta=1e-12*2.421154154048458466e-03 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.97994412153097e-01),
#                                2.421154154048458466e-03,
#                                delta=1e-12*2.421154154048458466e-03 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 9.979944121530972545e-01) == 1.0 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 1.0) == 1.0 )
#        energy = 1.0e-3;
#        self.assertTrue( self.dist.evaluateCDF(energy, 9.23986089002024e-01) == 0.0 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.239860890020241690e-01),
#                                1.624553055081424668e-01,
#                                delta=1e-12*1.624553055081424668e-01 )
#        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.78892622475528e-01),
#                                1.624553055081424668e-01,
#                                delta=1e-12*1.624553055081424668e-01 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 9.788926224755287731e-01) == 1.0 )
#        self.assertTrue( self.dist.evaluateCDF(energy, 1.0) == 1.0 )


#    def testSample(self):
#        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint sample method"
#        random_numbers = [ 0.0, 1.0-1e-15, 0.0, 1.0-1e-15 ]
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        energy = 1e-3
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.239860890020241690e-01,
#                                delta=1e-12*9.239860890020241690e-01 )
#        self.assertTrue( energy == outgoing_energy)

#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.788926224755287731e-01,
#                                delta=1e-12*9.788926224755287731e-01 )
#        self.assertTrue( energy == outgoing_energy)


#        energy = 20.0
#        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.328832072260571096e-01,
#                                delta=1e-12*9.328832072260571096e-01 )
#        self.assertTrue( energy == outgoing_energy)

#        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
#        self.assertAlmostEqual( scattering_angle_cosine,
#                                9.979944121530972545e-01,
#                                delta=1e-12*9.979944121530972545e-01 )
#        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the dipole bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_dipole(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision dipole bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createBremsstrahlungDistribution( self.data, True, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole sample method"
        random_numbers = [ 0.0, 0.0, 1.0-1e-15, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.978068268447441547e-02,
                                delta=1e-12*1.978068268447441547e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the 2bs bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_2bs(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createBremsstrahlungDistribution( self.data, 1, True, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs sample method"
        random_numbers = [ 0.0, 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -6.056998234653807600e-01,
                                delta=1e-12*-6.056998234653807600e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the electroionization subshell electron scattering distribution
class ElectroionizationSubshellElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision electroionization subshell elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.shell = 1
        self.binding_energy = self.data.getSubshellBindingEnergy( self.shell )
        self.dist = Collision.createElectroionizationSubshellDistribution( self.data, self.shell, self.binding_energy, True, True, True, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                2.587759256874347193e+04,
                                delta=1e-12*2.587759256874347193e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.130623166949873448e-06,
                                delta=1e-12*3.130623166949873448e-06 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.212783635119363305e-08,
                                delta=1e-12*3.212783635119363305e-08 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                7.767559992061280354e+04,
                                delta=1e-12*7.767559992061280354e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                3.846295593327409733e+03,
                                delta=1e-12*3.846295593327409733e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                1.463526974069022799e+03,
                                delta=1e-12*1.463526974069022799e+03 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                2.587759065237524919e+04,
                                delta=1e-12*2.587759065237524919e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.130622935111199349e-06,
                                delta=1e-12*3.130622935111199349e-06)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.212783397196286030e-08,
                                delta=1e-12*3.212783397196286030e-08 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                7.767557117248578288e+04,
                                delta=1e-12*7.767557117248578288e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                3.846294955897190448e+03,
                                delta=1e-12*3.846294955897190448e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                1.463527105823794500e+03,
                                delta=1e-12*1.463527105823794500e+03 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                6.765435226348609499e-01,
                                delta=1e-12*6.765435226348609499e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.999968490821977696e-01,
                                delta=1e-12*9.999968490821977696e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                9.999996800288486476e-01,
                                delta=1e-12*9.999996800288486476e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                3.025636899554207115e-01,
                                delta=1e-12*3.025636899554207115e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                8.979734178106185682e-01,
                                delta=1e-12*8.979734178106185682e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.999083950387432917e-01,
                                delta=1e-12*9.999083950387432917e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution sample method"
        random_numbers = [ 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.000489069268038246e-02,
                                delta=1e-12*1.000489069268038246e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                7.024524579189942441e-01,
                                delta=1e-12*7.024524579189942441e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.931949999999128134e-04,
                                1e-12*4.931949999999128134e-04)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                3.128075402514134454e-04,
                                delta=1e-12*3.128075402514134454e-04 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.999948900357620296e-01,
                                delta=1e-12*9.999948900357620296e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.999967451873526443e+04,
                                1e-12*4.999967451873526443e+04)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(AnalogElasticElectronScatteringDistributionTestCase))
#    suite.addTest(unittest.makeSuite(AnalogElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(CutoffElasticElectronScatteringDistributionTestCase))
#    suite.addTest(unittest.makeSuite(CutoffElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(HybridElasticElectronScatteringDistributionTestCase))
#    suite.addTest(unittest.makeSuite(HybridElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(MomentPreservingElasticElectronScatteringDistributionTestCase))
#    suite.addTest(unittest.makeSuite(MomentPreservingElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_dipole))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_2bs))
    suite.addTest(unittest.makeSuite(ElectroionizationSubshellElectronScatteringDistributionTestCase))


    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing MonteCarlo.Collision.ElectronScatteringDistribution \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)
    
#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Collision.PhotonKinematics.py
#-----------------------------------------------------------------------------#
