#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Collision electron scattering native distribution helpers unit tests
#  \file   tstMonteCarlo.Collision.ElectronScatteringNativeDistribution.py
#  \author Luke Kersting
#  \brief  Unit tests for the Native MonteCarlo.Collision.ElectronScatteringDistribution helpers
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-f", "--nativefile", type="string", dest="nativefile",
                  help="set the native file that the Electron Distributions will initialized with")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Collision = importPyFrensieModuleFromBuildDir('MonteCarlo.Collision')
Utility = importPyFrensieModuleFromBuildDir('Utility')
Prng = importPyFrensieModuleFromBuildDir('Utility.Prng')
Native = importPyFrensieModuleFromBuildDir('Data.Native')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the coupled electron scattering distribution
class CoupledElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision coupled elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogExactCoupledElasticDistribution( self.data, "Simplified Union", 1e-15 )

    def testevaluate(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution evaluate method"
        energy = 1e5
        self.assertTrue(self.dist.evaluate(energy, -0.01) == 4.8836447748920078e-16)
        self.assertTrue(self.dist.evaluate(energy, 0.71) == 1.0198661034411070e-14)
        self.assertTrue(self.dist.evaluate(energy, 0.999999) == 9.9686225038692240e-04)
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.0003853171793733e+06,
                                delta=1e-12*1.0003853171793733e+06 )
        energy = 6.625E+01
        self.assertTrue(self.dist.evaluate(energy, -0.01) == 1.0955559696408032e-09)
        self.assertTrue(self.dist.evaluate(energy, 0.71) == 2.2877743207890104e-08)
        self.assertTrue(self.dist.evaluate(energy, 0.999999) == 2.2261124924359360e+03)
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                9.9756691382223531e+05,
                                delta=1e-12*9.9756691382223531e+05 )
        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluate(energy, -0.01),
                                5.1932137961351985e-06,
                                delta=1e-6*5.1932137961351985e-06 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.71),
                                1.8608538360791660e-03,
                                delta=1e-6*1.8608538360791660e-03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                5.5217768530457556e+08,
                                delta=1e-9*5.5217768530457556e+08 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                2.2274203961181431e+12,
                                delta=1e-9*2.2274203961181431e+12 )

    def testevaluatePDF(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                4.8836447290971699e-16,
                                delta=1e-12*4.8836447290971699e-16 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                1.0198660938776344e-14,
                                delta=1e-12*1.0198660938776344e-14 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.9686224103916112e-04,
                                delta=1e-12*9.9686224103916112e-04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                9.9043300839413338e+14,
                                delta=1e-12*9.9043300839413338e+14 )
        energy = 6.625E+01
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                1.0955554402332044e-09,
                                delta=1e-12*1.0955554402332044e-09 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                2.2877732152634661e-08,
                                delta=1e-12*2.2877732152634661e-08 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                2.2261114167073542e+03,
                                delta=1e-12*2.2261114167073542e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                4.4128791322040886e+08,
                                delta=1e-12*4.4128791322040886e+08 )
        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -0.01),
                                5.1932137471731019e-06,
                                delta=1e-6*5.1932137471731019e-06 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.71),
                                1.8423277029175193e+06,
                                delta=1e-6*1.8423277029175193e+06 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                5.4668298264441158e+17,
                                delta=1e-9*5.4668298264441158e+17 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                8.7837650620821399e+24,
                                delta=1e-9*8.7837650620821399e+24 )

    def testevaluateCDF(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                1.5194151539596023e-16,
                                delta=1e-12*1.5194151539596023e-16 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                2.0228604997734524e-15,
                                delta=1e-12*2.0228604997734524e-15 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.0100484326755011e-09,
                                delta=1e-12*1.0100484326755011e-09 )
        self.assertTrue(self.dist.evaluateCDF(energy, 1.0) == 1.0)
        energy = 6.625E+01
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                3.4087717596560070e-10,
                                delta=1e-12*3.4087717596560070e-10 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                4.5377719565224249e-09,
                                delta=1e-12*4.5377719565224249e-09 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                2.2605795488167451e-03,
                                delta=1e-12*2.2605795488167451e-03 )
        self.assertTrue(self.dist.evaluateCDF(energy, 1.0) == 1.0)

        energy = 200.0
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, -0.01),
                                1.8586865689420062e-10,
                                delta=1e-6*1.8586865689420062e-10 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.71),
                                3.5347746472730746e-09,
                                delta=1e-6*3.5347746472730746e-09 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                2.5106038136353922e-04,
                                delta=1e-12*2.5106038136353922e-04 )
        self.assertTrue(self.dist.evaluateCDF(energy, 1.0) == 1.0)

    def testSample(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 6.625e1
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999999774886450e-01,
                                delta=1e-12*9.9999999774886450e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e-4
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                4.9274826288429413e-01,
                                delta=1e-12*4.9274826288429413e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the cutoff electron scattering distribution
class CutoffElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision cutoff elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogExactCutoffElasticDistribution( self.data, 0.9, 1e-14 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                5.0189548148148151e-07,
                                delta=1e-12*5.0189548148148151e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.5912781249999995e-05,
                                delta=1e-12*9.5912781249999995e-05 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.2010714054054055e-02,
                                delta=1e-12*1.2010714054054055e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                1.08525,
                                delta=1e-12*1.08525 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                6.2249124879293620e-02,
                                delta=1e-12*6.2249124879293620e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.1895876567623404e+01,
                                delta=1e-12*1.1895876567623404e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.1023715396865266e-01,
                                delta=1e-12*1.1023715396865266e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.9606793406341421,
                                delta=1e-12*9.9606793406341421 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.9268620390297485e-02,
                                delta=1e-12*1.9268620390297485e-02)
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.4813136951078145e-02,
                                delta=1e-12*5.4813136951078145e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.0469874142979370e-01,
                                delta=1e-12*8.0469874142979370e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.2497684658603243e-01,
                                delta=1e-12*8.2497684658603243e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the screened rutherford electron scattering distribution
class ScreenedRutherfordElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision screened rutherford elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createScreenedRutherfordElasticDistribution( self.data )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                9.9999999994248878e-01,
                                delta=1e-12*9.9999999994248878e-01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9999995),
                                3.9999999926322096,
                                delta=1e-12*3.9999999926322096 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                9.9355053047417485e+17,
                                delta=1e-12*9.9355053047417485e+17 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                9.9999999999999944e-01,
                                delta=1e-12*9.9999999999999944e-01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9999995),
                                1.0000101255012976,
                                delta=1e-12*1.0000101255012976 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.0000202511563834,
                                delta=1e-12*1.0000202511563834 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.9999999994248878e-01,
                                delta=1e-12*9.9999999994248878e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9999995),
                                3.9999999926322096,
                                delta=1e-12*3.9999999926322096 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                9.9355053047417485e+17,
                                delta=1e-12*9.9355053047417485e+17 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                9.9999999999999944e-01,
                                delta=1e-12*9.9999999999999944e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9999995),
                                1.0000101255012976,
                                delta=1e-12*1.0000101255012976 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                1.0000202511563834,
                                delta=1e-12*1.0000202511563834 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9999995),
                                9.9999999899675951e-01,
                                delta=1e-12*9.9999999899675951e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                0.0,
                                delta=1e-12 )
        energy = 1.0e-4;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                1.00000000002876,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9999995),
                                5.0000253132778305e-01,
                                delta=1e-12*5.0000253132778305e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                0.0,
                                delta=1e-12 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createScreenedRutherfordElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)

        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999999999999900e-01,
                                delta=1e-12*9.9999999999999900e-01 )
        self.assertTrue( energy == outgoing_energy)

        energy = 1e-4
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9999950000253135e-01,
                                delta=1e-12*9.9999950000253135e-01 )
        self.assertTrue( energy == outgoing_energy)


#-----------------------------------------------------------------------------#
# Test the hybrid electron scattering distribution
class HybridElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision hybrid elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogExactHybridElasticDistribution( self.data, 0.9, 1e-14 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                4.1014775758095763e-10,
                                delta=1e-12*4.1014775758095763e-10 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                7.8379689804981627e-08,
                                delta=1e-12*7.8379689804981627e-08 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                2.5254143334024893e-03,
                                delta=1e-12*2.5254143334024893e-03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                2.2818842351841395e-01,
                                delta=1e-12*2.2818842351841395e-01 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                5.0869832311015360e-05,
                                delta=1e-12*5.0869832311015360e-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                9.7212811804336247e-03,
                                delta=1e-12*9.7212811804336247e-03 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                2.3178845774949091e-02,
                                delta=1e-12*2.3178845774949091e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                2.0943669347263194e+00,
                                delta=1e-12*2.0943669347263194e+00 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.5746269365548829e-05,
                                delta=1e-12*1.5746269365548829e-05 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
                                8.1719754951826745e-04,
                                delta=1e-12*8.1719754951826745e-04 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9001),
                                8.1719754951826745e-04,
                                delta=1e-12*8.1719754951826745e-04 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.1525200008261171e-02,
                                delta=1e-12*1.1525200008261171e-02 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
                                2.1026346327428130e-01,
                                delta=1e-12*2.1026346327428130e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9001),
                                2.1026346327428130e-01,
                                delta=1e-12*2.1026346327428130e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.5631201315063763e-01,
                                delta=1e-12*9.5631201315063763e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9684774325563530e-01,
                                delta=1e-12*9.9684774325563530e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the moment preserving electron scattering distribution
class MomentPreservingElasticElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision moment preserving elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogExactMomentPreservingElasticDistribution( self.data, 0.9, 1e-14 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluate method"
        energy = 1e5
        self.assertTrue( self.dist.evaluate(energy, 9.9684774325563e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 9.9684774325563530e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluate(energy, 9.9684774325564e-01) == 0.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluate(energy, 9.5631201315063e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 9.5631201315063763e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluate(energy, 9.5631201315064e-01) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluatePDF method"
        energy = 1e5
        self.assertTrue( self.dist.evaluatePDF(energy, 9.9684774325563e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.9684774325563530e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy, 9.9684774325564e-01) == 0.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluatePDF(energy,  9.5631201315063e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.5631201315063763e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluatePDF(energy,  9.5631201315064e-01) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution evaluateCDF method"
        energy = 1e5
        self.assertTrue( self.dist.evaluateCDF(energy, 9.9684774325563e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.9684774325563530e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 9.9684774325564e-01) == 1.0 )
        energy = 1.0e-3;
        self.assertTrue( self.dist.evaluateCDF(energy,  9.5631201315063e-01) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.5631201315063763e-01),
                                1.0,
                                delta=1e-12*1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy,  9.5631201315064e-01) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution sample method"
        random_numbers = [ 0.0, 1.0-1e-15, 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.5631201315063763e-01,
                                delta=1e-12*9.5631201315063763e-01 )
        self.assertTrue( energy == outgoing_energy)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.5631201315063763e-01,
                                delta=1e-12*9.5631201315063763e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9684774325563530e-01,
                                delta=1e-12*9.9684774325563530e-01 )
        self.assertTrue( energy == outgoing_energy)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9684774325563530e-01,
                                delta=1e-12*8.249768465860324307e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the dipole bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_dipole(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision dipole bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogCorrelatedBremsstrahlungDistribution( self.data, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution dipole sample method"
        random_numbers = [ 0.0, 0.0, 1.0-1e-15, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.978068268447441547e-02,
                                delta=1e-12*1.978068268447441547e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the 2bs bremsstrahlung electron scattering distribution
class BremsstrahlungElectronScatteringDistributionTestCase_2bs(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision bremsstrahlung elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.dist = Collision.createLinLinLogCorrelatedBremsstrahlungDistribution( self.data, 1, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                3.701846493129691680e+03,
                                delta=1e-12*3.701846493129691680e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.780548921214250957e-02,
                                delta=1e-12*3.780548921214250957e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.676417705505041940e-03,
                                delta=1e-12*3.676417705505041940e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                1.556791344973443847e+04,
                                delta=1e-12*1.556791344973443847e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                1.540033208347832442e+03,
                                delta=1e-12*1.540033208347832442e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                2.702182876277142896e+02,
                                delta=1e-12*2.702182876277142896e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                3.701846731354412896e+03,
                                delta=1e-12*3.701846731354412896e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.780549164503704818e-02,
                                delta=1e-12*3.780549164503704818e-02)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.676417942093345576e-03,
                                delta=1e-12*3.676417942093345576e-03 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                1.556791505365905869e+04,
                                delta=1e-12*1.556791505365905869e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                1.540033425473858642e+03,
                                delta=1e-12*1.540033425473858642e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                2.702183334856521810e+02,
                                delta=1e-12*2.702183334856521810e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                1.711633819890129860e-01,
                                delta=1e-12*1.711633819890129860e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                5.992602783859568572e-01,
                                delta=1e-12*5.992602783859568572e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                6.846177326495929139e-01,
                                delta=1e-12*6.846177326495929139e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                5.057451568967415989e-01,
                                delta=1e-12*5.057451568967415989e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                7.758060641777654309e-01,
                                delta=1e-12*7.758060641777654309e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.483111968345774301e-01,
                                delta=1e-12*9.483111968345774301e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution 2bs sample method"
        random_numbers = [ 0.0, 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.0,
                                delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -1.0,
                                delta=1e-12*1.0 )
        self.assertAlmostEqual( outgoing_energy,
                                9.999999999999733494e-04,
                                1e-12*9.999999999999733494e-04)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                -6.056998234653807600e-01,
                                delta=1e-12*-6.056998234653807600e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                3.474531281761797940e-06,
                                1e-12*3.474531281761797940e-06)

#-----------------------------------------------------------------------------#
# Test the electroionization subshell electron scattering distribution
class ElectroionizationSubshellElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision electroionization subshell elastic electron scattering distribution"

    def setUp(self):
        self.data = Native.ElectronPhotonRelaxationDataContainer( options.nativefile )
        self.shell = 1
        self.binding_energy = self.data.getSubshellBindingEnergy( self.shell )
        self.dist = Collision.createLinLinLogCorrelatedElectroionizationSubshellDistribution( self.data, self.shell, self.binding_energy, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluate method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                2.5651431787638325e+04,
                                delta=1e-12*2.5651431787638325e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                3.1081016961135670e-06,
                                delta=1e-12*3.1081016961135670e-06 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 10.0),
                                3.1294889712290391e-08,
                                delta=1e-12*3.1294889712290391e-08 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-5),
                                7.6384148771310996e+04,
                                delta=1e-12*7.6384148771310996e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1e-4),
                                3.7902612186278839e+03,
                                delta=1e-12*3.7902612186278839e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 5e-4),
                                1.4633954146720371e+03,
                                delta=1e-12*1.4633954146720371e+03 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluatePDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                2.5651429888018469e+04,
                                delta=1e-12*2.5651429888018469e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.1081014659427232e-06,
                                delta=1e-12*3.1081014659427232e-06)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 10.0),
                                3.1294887394743582e-08,
                                delta=1e-12*3.1294887394743582e-08 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-5),
                                7.6384120502559308e+04,
                                delta=1e-12*7.6384120502559308e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1e-4),
                                3.7902605779791957e+03,
                                delta=1e-12*3.7902605779791957e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 5e-4),
                                1.4633955464209316e+03,
                                delta=1e-12*1.4633955464209316e+03 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution evaluateCDF method"
        energy = 1e5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                6.765435226348609499e-01,
                                delta=1e-12*6.765435226348609499e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.999968490821977696e-01,
                                delta=1e-12*9.999968490821977696e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 10.0),
                                9.999996800288486476e-01,
                                delta=1e-12*9.999996800288486476e-01 )
        energy = 1.0e-3;
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-5),
                                3.025636899554207115e-01,
                                delta=1e-12*3.025636899554207115e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1e-4),
                                8.979734178106185682e-01,
                                delta=1e-12*8.979734178106185682e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 5e-4),
                                9.999083950387432917e-01,
                                delta=1e-12*9.999083950387432917e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution sample method"
        random_numbers = [ 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                1.000489069268038246e-02,
                                delta=1e-12*1.000489069268038246e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                7.024524579189942441e-01,
                                delta=1e-12*7.024524579189942441e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.931949999999128134e-04,
                                1e-12*4.931949999999128134e-04)


        energy = 1e5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                3.128075402514134454e-04,
                                delta=1e-12*3.128075402514134454e-04 )
        self.assertAlmostEqual( outgoing_energy,
                                1e-7,
                                1e-12*1e-7)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.999948900357620296e-01,
                                delta=1e-12*9.999948900357620296e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                4.999967451873526443e+04,
                                1e-12*4.999967451873526443e+04)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(CoupledElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(CutoffElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(ScreenedRutherfordElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(HybridElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(MomentPreservingElasticElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_dipole))
    suite.addTest(unittest.makeSuite(BremsstrahlungElectronScatteringDistributionTestCase_2bs))
    suite.addTest(unittest.makeSuite(ElectroionizationSubshellElectronScatteringDistributionTestCase))


    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing MonteCarlo.Collision.ElectronScatteringNativeDistribution \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)
    
#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Collision.ElectronScatteringNativeDistribution.py
#-----------------------------------------------------------------------------#
