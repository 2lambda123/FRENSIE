#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## MonteCarlo.Collision adjoint electron scattering distribution helpers unit tests
#  \file   tstMonteCarlo.Collision.AdjointElectronScatteringDistribution.py
#  \author Luke Kersting
#  \brief  Unit tests for the MonteCarlo.Collision.AdjointElectronScatteringDistribution helpers
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-a", "--adjointfile", type="string", dest="adjointfile",
                  help="set the adjoint native file that the Adjoint Electron Distributions will initialized with")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Collision = importPyFrensieModuleFromBuildDir('MonteCarlo.Collision')
Utility = importPyFrensieModuleFromBuildDir('Utility')
Prng = importPyFrensieModuleFromBuildDir('Utility.Prng')
Native = importPyFrensieModuleFromBuildDir('Data.Native')

#-----------------------------------------------------------------------------#
# Adjoint tests.
#-----------------------------------------------------------------------------#
# Test the coupled adjoint electron scattering distribution
class CoupledElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision coupled elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.dist = Collision.createLinLinLogDirectCoupledElasticDistribution( self.data, "Simplified Union", 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution adjoint evaluate method"
        energy = 20.0
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                3.4842364058820895e-12,
                                delta=1e-12*3.4842364058820895e-12 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.2086785237793380e-08,
                                delta=1e-12*1.2086785237793380e-08 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                2.2484893927322973e+04,
                                delta=1e-12*2.2484893927322973e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                9.6871163277236314e+05,
                                delta=1e-12*9.6871163277236314e+05 )
        energy = 3.2e-2
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                7.65563e-05,
                                delta=1e-12*7.65563e-05 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                3.3486772972972969e-04,
                                delta=1e-12*3.3486772972972969e-04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                2.05008e+03,
                                delta=1e-12*2.05008e+03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                2.0638846044323600e+03,
                                delta=1e-12*2.0638846044323600e+03 )
        energy = 1.0e-2
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                2.8931048863487923e-04,
                                delta=1e-12*2.8931048863487923e-04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.1886479827635070e-03,
                                delta=1e-12*1.1886479827635070e-03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.999999),
                                6.6228475320278312e+02,
                                delta=1e-12*6.6228475320278312e+02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                6.6364733914046042e+02,
                                delta=1e-12*6.6364733914046042e+02 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution adjoint evaluatePDF method"
        energy = 20.0
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                3.4095289709529115e-12,
                                delta=1e-12*3.4095289709529115e-12 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.1827625807586234e-08,
                                delta=1e-12*1.1827625807586234e-08 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                2.2002782912373150e+04,
                                delta=1e-12*2.2002782912373150e+04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                4.0508973443367437e+07,
                                delta=1e-12*4.0508973443367437e+07 )
        energy = 3.2e-2
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                7.6556310331984845e-05,
                                delta=1e-12*7.6556310331984845e-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                3.3486777492324491e-04,
                                delta=1e-12*3.3486777492324491e-04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                2.0500802766773668e+03,
                                delta=1e-12*2.0500802766773668e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                2.0638848829727863e+03,
                                delta=1e-12*2.0638848829727863e+03 )
        energy = 1e-2
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                2.8931056439736498e-04,
                                delta=1e-12*2.8931056439736498e-04 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.1886482939055681e-03,
                                delta=1e-12*1.1886482939055681e-03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.999999),
                                6.6228489140179818e+02,
                                delta=1e-12*6.6228489140179818e+02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                6.6364747762380637e+02,
                                delta=1e-12*6.6364747762380637e+02 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution adjoint evaluateCDF method"
        energy = 20.0
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                3.6629200512556436e-09,
                                delta=1e-12*3.6629200512556436e-09 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.999999),
                                2.3400764612552930e-02,
                                delta=1e-12*2.3400764612552930e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 1.0) == 1.0 )

        energy = 3.2e-2
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.636052852354576116e-04,
                                delta=1e-12*1.636052852354576116e-04 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.999999) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 1.0) == 1.0 )

        energy = 1e-2
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.9336666708911920e-04,
                                delta=1e-12*5.9336666708911920e-04 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.999999) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 1.0) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createCoupledElasticDistribution adjoint sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 3.2e-2
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9955594017081695e-01,
                                delta=1e-12*9.9955594017081695e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e-2
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9819490588504534e-01,
                                delta=1e-12*9.9819490588504534e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the cutoff adjoint electron scattering distribution
class CutoffElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision cutoff elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.dist = Collision.createLinLinLogDirectCutoffElasticDistribution( self.data, 0.9, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluate method"
        energy = 20.0
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                1.4889412647709093e-10,
                                delta=1e-12*1.4889412647709093e-10 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                5.1651240623606104e-07,
                                delta=1e-12*5.1651240623606104e-07)
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                9.8823148268830087e-05,
                                delta=1e-12*9.8823148268830087e-05 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 3.2e-2
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                7.65563e-05,
                                delta=1e-12*7.65563e-05 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                3.3486772972972969e-04,
                                delta=1e-12*3.3486772972972969e-04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                3.4952575675675675e-02,
                                delta=1e-12*3.4952575675675675e-02 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        energy = 1.0e-2
        self.assertAlmostEqual( self.dist.evaluate(energy, -1.0),
                                2.8931048863487923e-04,
                                delta=1e-12*2.8931048863487923e-04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
                                1.1886479827635070e-03,
                                delta=1e-12*1.1886479827635070e-03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
                                1.2021245039881649e-01,
                                delta=1e-12*1.2021245039881649e-01 )
        self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluatePDF method"
        energy = 20.0
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                1.7928620718843863e-05,
                                delta=1e-12*1.7928620718843863e-05 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                6.2194226509052750e-02,
                                delta=1e-12*6.2194226509052750e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.1899480425955769e+01,
                                delta=1e-12*1.1899480425955769e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 3.2e-2
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                2.3089718679975984e-02,
                                delta=1e-12*2.3089718679975984e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.0099758836910469e-01,
                                delta=1e-12*1.0099758836910469e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.0541851415127468e+01,
                                delta=1e-12*1.0541851415127468e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        energy = 1e-2
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, -1.0),
                                2.5184467949315673e-02,
                                delta=1e-12*2.5184467949315673e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
                                1.0352784838987611e-01,
                                delta=1e-12*1.0352784838987611e-01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
                                1.0509004004519593e+01,
                                delta=1e-12*1.0509004004519593e+01 )
        self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint evaluateCDF method"
        energy = 20.0
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                1.9261048925493213e-02,
                                delta=1e-12*1.9261048925493213e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 3.2e-2
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                4.9344070975501052e-02,
                                delta=1e-12*4.9344070975501052e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )
        energy = 1e-2
        self.assertTrue( self.dist.evaluateCDF(energy, -1.0) == 0.0 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
                                5.1693078260515078e-02,
                                delta=1e-12*5.1693078260515078e-02 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9) == 1.0 )
        self.assertTrue( self.dist.evaluateCDF(energy, 0.9001) == 1.0 )

    def testSample(self):
        "*Test MonteCarlo.Collision.createCutoffElasticDistribution adjoint sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 3.2e-2
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.1141061186410290e-01,
                                delta=1e-12*8.1141061186410290e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e-2
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                8.0912156206843633e-01,
                                delta=1e-12*8.0912156206843633e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the hybrid adjoint electron scattering distribution
class HybridElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision hybrid elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.dist = Collision.createLinLinLogDirectHybridElasticDistribution( self.data, 0.9, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluate method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the hybrid distribution is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
        #                         5.8329624899854336e-06,
        #                         delta=1e-12*5.8329624899854336e-06 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
        #                         6.0882863514242407e-04,
        #                         delta=1e-12*6.0882863514242407e-04 )
        # self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )
        # energy = 1.0e-2
        # self.assertAlmostEqual( self.dist.evaluate(energy, 0.0),
        #                         4.1931592107868800e-05,
        #                         delta=1e-12*4.1931592107868800e-05 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 0.9),
        #                         4.2342047606789479e-03,
        #                         delta=1e-12*4.2342047606789479e-03 )
        # self.assertTrue( self.dist.evaluate(energy, 0.9001) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluatePDF method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the hybrid PDF is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
        #                         1.7592472855221051e-03,
        #                         delta=1e-12*1.7592472855221051e-03 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
        #                         1.8362540914010103e-01,
        #                         delta=1e-12*1.8362540914010103e-01 )
        # self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )
        # energy = 1.0e-2
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.0),
        #                         3.4899200334929390e-03,
        #                         delta=1e-12*3.4899200334929390e-03 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 0.9),
        #                         3.5294739273349940e-01,
        #                         delta=1e-12*3.5294739273349940e-01 )
        # self.assertTrue( self.dist.evaluatePDF(energy, 0.9001) == 0.0 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint evaluateCDF method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the hybrid CDF is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
        #                         8.5950985881970952e-04,
        #                         delta=1e-12*8.5950985881970952e-04 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
        #                         1.7418705871399411e-02,
        #                         delta=1e-12*1.7418705871399411e-02 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9001),
        #                         1.7418705871399411e-02,
        #                         delta=1e-12*1.7418705871399411e-02 )
        # energy = 1.0e-2
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.0),
        #                         1.7109145572188759e-03,
        #                         delta=1e-12*1.7109145572188759e-03 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9),
        #                         4.1698020968818250e-02,
        #                         delta=1e-12*4.1698020968818250e-02 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 0.9001),
        #                         4.1728643281215907e-02,
        #                         delta=1e-12*4.1728643281215907e-02 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createHybridElasticDistribution adjoint sample method"
        random_numbers = [ 0.5, 0.5 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 3.2e-2
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9245237909614936e-01,
                                delta=1e-12*9.9245237909614936e-01 )
        self.assertTrue( energy == outgoing_energy)


        energy = 1e-2
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.8874126736274959e-01,
                                delta=1e-12*9.8874126736274959e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the moment preserving adjoint electron scattering distribution
class MomentPreservingElasticAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision moment preserving elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.dist = Collision.createLinLinLogDirectMomentPreservingElasticDistribution( self.data, 0.9, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluate method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the moment-preserving distribution is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertTrue( self.dist.evaluate(energy, 9.3048254490e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.3048254490582416e-01),
        #                         2.6166373684494596e-02,
        #                         delta=1e-12*2.6166373684494596e-02 )
        # self.assertTrue( self.dist.evaluate(energy, 9.3048254491e-01) == 0.0 )

        # self.assertTrue( self.dist.evaluate(energy, 9.9245237909614e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.9245237909614936e-01),
        #                         9.7383362631550541e-01,
        #                         delta=1e-12*9.7383362631550541e-01 )
        # self.assertTrue( self.dist.evaluate(energy, 9.9245237909615e-01) == 0.0 )

        # energy = 1.0e-2
        # self.assertTrue( self.dist.evaluate(energy, 9.2901828174361e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.2901828174361423e-01),
        #                         3.5392473063201466e-02,
        #                         delta=1e-12*3.5392473063201466e-02 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.8874126736274959e-01),
        #                         6.4267943204943623e-01,
        #                         delta=1e-12*6.4267943204943623e-01 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.2983106008220129e-01),
        #                         1.1718531800811669e-02,
        #                         delta=1e-12*1.1718531800811669e-02 )
        # self.assertAlmostEqual( self.dist.evaluate(energy, 9.9085005290562456e-01),
        #                         3.1020956308655068e-01,
        #                         delta=1e-12*3.1020956308655068e-01 )
        # self.assertTrue( self.dist.evaluate(energy, 9.9085005290563e-01) == 0.0 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluatePDF method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the moment-preserving PDF is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertTrue( self.dist.evaluatePDF(energy, 9.3048254490e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.3048254490582416e-01),
        #                         2.6166373684494596e-02,
        #                         delta=1e-12*2.6166373684494596e-02 )
        # self.assertTrue( self.dist.evaluatePDF(energy, 9.3048254491e-01) == 0.0 )

        # self.assertTrue( self.dist.evaluatePDF(energy, 9.9245237909614e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.9245237909614936e-01),
        #                         9.7383362631550541e-01,
        #                         delta=1e-12*9.7383362631550541e-01 )
        # self.assertTrue( self.dist.evaluatePDF(energy, 9.9245237909615e-01) == 0.0 )

        # energy = 1.0e-2
        # self.assertTrue( self.dist.evaluatePDF(energy, 9.2901828174361e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.2901828174361423e-01),
        #                         3.5392473063201466e-02,
        #                         delta=1e-12*3.5392473063201466e-02 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.8874126736274959e-01),
        #                         6.4267943204943623e-01,
        #                         delta=1e-12*6.4267943204943623e-01 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.2983106008220129e-01),
        #                         1.1718531800811669e-02,
        #                         delta=1e-12*1.1718531800811669e-02 )
        # self.assertAlmostEqual( self.dist.evaluatePDF(energy, 9.9085005290562456e-01),
        #                         3.1020956308655068e-01,
        #                         delta=1e-12*3.1020956308655068e-01 )
        # self.assertTrue( self.dist.evaluatePDF(energy, 9.9085005290563e-01) == 0.0 )


    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint evaluateCDF method"
        with self.assertRaises(RuntimeError) as cm:
            self.dist.evaluatePDF(1e-5, 0.0)
            self.assertEqual( 'Error: evaluation of the moment-preserving CDF is currently not supported!',
                              str(cm.exception) )

        # energy = 3.2e-2
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.3048254490e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.3048254490582416e-01),
        #                         2.6166373684494596e-02,
        #                         delta=1e-12*2.6166373684494596e-02 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.3048254491e-01),
        #                         2.6166373684494596e-02,
        #                         delta=1e-12*2.6166373684494596e-02 )

        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.9245237909614e-01),
        #                         2.6166373684494596e-02,
        #                         delta=1e-12*2.6166373684494596e-02 )
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.9245237909614936e-01) == 1.0 )
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.9245237909615e-01) == 1.0 )

        # energy = 1.0e-2
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.2901828174361e-01) == 0.0 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.2901828174361423e-01),
        #                         3.5392473063201466e-02,
        #                         delta=1e-12*3.5392473063201466e-02 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.8874126736274959e-01),
        #                         6.8979043691344932e-01,
        #                         delta=1e-12*6.8979043691344932e-01 )
        # self.assertAlmostEqual( self.dist.evaluateCDF(energy, 9.2983106008220129e-01),
        #                         4.7111004864013137e-02,
        #                         delta=1e-12*4.7111004864013137e-02 )
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.9085005290562456e-01) == 1.0 )
        # self.assertTrue( self.dist.evaluateCDF(energy, 9.9085005290563e-01) == 1.0 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createMomentPreservingElasticDistribution adjoint sample method"
        energy = 3.2e-2

        random_numbers = [ 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.3048254490582416e-01,
                                delta=1e-12*9.3048254490582416e-01 )
        self.assertTrue( energy == outgoing_energy)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9245237909614936e-01,
                                delta=1e-12*9.9245237909614936e-01 )
        self.assertTrue( energy == outgoing_energy)

        energy = 1e-2
        random_numbers = [ 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.2983106008220129e-01,
                                delta=1e-12*9.2983106008220129e-01 )
        self.assertTrue( energy == outgoing_energy)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.8874126736274959e-01,
                                delta=1e-12*9.8874126736274959e-01 )
        self.assertTrue( energy == outgoing_energy)

#-----------------------------------------------------------------------------#
# Test the 2bs bremsstrahlung adjoint electron scattering distribution
class BremsstrahlungAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision bremsstrahlung elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.dist = Collision.createLogLogLogUnitBaseCorrelatedBremsstrahlungDistribution( self.data, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution adjoint evaluate method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluate(energy, 2e-5),
                                1.0654641852946981e+04,
                                delta=1e-12*1.0654641852946981e+04 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                4.4633190292430503e-07,
                                delta=1e-12*4.4633190292430503e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 20.0),
                                1.1371197977515664e-08,
                                delta=1e-12*1.1371197977515664e-08 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluate(energy, 2e-3),
                                1.8186508526881450e+01,
                                delta=1e-12*1.8186508526881450e+01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                2.2928025447493224e-07,
                                delta=1e-12*2.2928025447493224e-07 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 20.0),
                                3.5315705505424260e-09,
                                delta=1e-12*3.5315705505424260e-09 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution adjoint evaluatePDF method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 2e-5),
                                9.2812516835608149e+03,
                                delta=1e-12*9.2812516835608149e+03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                3.8879943433268230e-07,
                                delta=1e-12*3.8879943433268230e-07)
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 20.0),
                                9.9054432640295125e-09,
                                delta=1e-12*9.9054432640295125e-09 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 2e-3),
                                1.5973353140991057e+01,
                                delta=1e-12*1.5973353140991057e+01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                2.0137827508683476e-07,
                                delta=1e-12*2.0137827508683476e-07 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 20.0),
                                3.1020473658580078e-09,
                                delta=1e-12*3.1020473658580078e-09 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution adjoint evaluateCDF method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 2e-5),
                                7.5184186166425571e-01,
                                delta=1e-12*7.5184186166425571e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.9999926311001341e-01,
                                delta=1e-12*9.9999926311001341e-01)
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 20.0),
                                9.9999999803683515e-01,
                                delta=1e-12*9.9999999803683515e-01 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 2e-3),
                                9.8083168860787162e-01,
                                delta=1e-12*9.8083168860787162e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                9.9999753072188657e-01,
                                delta=1e-12*9.9999753072188657e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 20.0),
                                9.9999999391095540e-01,
                                delta=1e-12*9.9999999391095540e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createBremsstrahlungDistribution adjoint sample method"
        random_numbers = [ 0.0, 0.0, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        energy = 1e-5
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine, 1.0, delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                energy + 2e-7 + 1e-9,
                                delta=1e-12*1.0201e-05)

        random_numbers = [ 1.0-1e-15, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine, 1.0, delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                2.0199999899787596e+01,
                                delta=1e-12*2.0199999899787596e+01)


        energy = 1e-4
        random_numbers = [ 0.5, 0.5, 1.0-1e-15, 0.0 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine, 1.0, delta=1e-12 )
        self.assertAlmostEqual( outgoing_energy,
                                1.0146736506079748e-04,
                                delta=1e-12*1.0146736506079748e-04)

#-----------------------------------------------------------------------------#
# Test the electroionization subshell adjoint electron scattering distribution
class ElectroionizationSubshellAdjointElectronScatteringDistributionTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Collision electroionization subshell elastic adjoint electron scattering distribution"

    def setUp(self):
        self.data = Native.AdjointElectronPhotonRelaxationDataContainer( options.adjointfile )
        self.shell = 1
        self.binding_energy = self.data.getSubshellBindingEnergy( self.shell )
        self.dist = Collision.createLogLogLogUnitBaseCorrelatedElectroionizationSubshellDistribution( self.data, self.shell, self.binding_energy, 1e-7 )

    def testEvaluate(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution adjoint evaluate method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluate(energy, 2.0*energy + self.binding_energy ),
                                3.4056096950745548e+01,
                                delta=1e-12*3.4056096950745548e+01 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                5.1320521306795513e-02,
                                delta=1e-12*5.1320521306795513e-02 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 20.0),
                                4.6807425845449134e-02,
                                delta=1e-12*4.6807425845449134e-02 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluate(energy, 2.0*energy + self.binding_energy ),
                                5.8535088122120538e+00,
                                delta=1e-12*5.8535088122120538e+00 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 1.0),
                                1.3078267991142453e-03,
                                delta=1e-12*1.3078267991142453e-03 )
        self.assertAlmostEqual( self.dist.evaluate(energy, 20.0),
                                9.0496391689963017e-04,
                                delta=1e-12*9.0496391689963017e-04 )

    def testEvaluatePDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution adjoint evaluatePDF method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 2.0*energy + self.binding_energy ),
                                3.3869175646097233e+01,
                                delta=1e-12*3.3869175646097233e+01 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                5.1038841970147755e-02,
                                delta=1e-12*5.1038841970147755e-02 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 20.0),
                                4.6550517218517676e-02,
                                delta=1e-12*4.6550517218517676e-02 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 2.0*energy + self.binding_energy ),
                                5.0173752464718877e+00,
                                delta=1e-12*5.0173752464718877e+00 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 1.0),
                                1.1165819287547571e-03,
                                delta=1e-12*1.1165819287547571e-03 )
        self.assertAlmostEqual( self.dist.evaluatePDF(energy, 20.0),
                                7.7395024535784811e-04,
                                delta=1e-12*7.7395024535784811e-04 )

    def testEvaluateCDF(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution adjoint evaluateCDF method"
        energy = 1e-5
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 2.0*energy + self.binding_energy ),
                                1.6145086344291494e-03,
                                delta=1e-12*1.6145086344291494e-03 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                1.0718293372571136e-01,
                                delta=1e-12*1.0718293372571136e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 20.0),
                                9.9999873289492047e-01,
                                delta=1e-12*9.9999873289492047e-01 )
        energy = 1.0e-3
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 2.0*energy + self.binding_energy ),
                                8.2892354250646649e-01,
                                delta=1e-12*8.2892354250646649e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 1.0),
                                8.5687115290989135e-01,
                                delta=1e-12*8.5687115290989135e-01 )
        self.assertAlmostEqual( self.dist.evaluateCDF(energy, 20.0),
                                9.9999978985829374e-01,
                                delta=1e-12*9.9999978985829374e-01 )


    def testSample(self):
        "*Test MonteCarlo.Collision.createElectroionizationSubshellDistribution adjoint sample method"
        random_numbers = [ 0.0, 1.0-1e-15 ]
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)

        energy = 1e-5
        Prng.RandomNumberGenerator.setFakeStream(random_numbers)
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                6.4942346707571053e-01,
                                delta=1e-12*6.4942346707571053e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                2.3711e-05,
                                delta=1e-12*2.3711e-05)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                3.2069698108789374e-03,
                                delta=1e-12*3.2069698108789374e-03 )
        self.assertAlmostEqual( outgoing_energy,
                                2.0000027220000000e+01,
                                delta=1e-12*2.0000027220000000e+01)

        energy = 1e-3
        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                9.9320156877052401e-01,
                                delta=1e-12*9.9320156877052401e-01 )
        self.assertAlmostEqual( outgoing_energy,
                                1.0137504120186346e-03,
                                delta=1e-12*1.0137504120186346e-03)

        outgoing_energy, scattering_angle_cosine = self.dist.sample( energy )
        self.assertAlmostEqual( scattering_angle_cosine,
                                3.2054176723775606e-02,
                                delta=1e-12*3.2054176723775606e-02 )
        self.assertAlmostEqual( outgoing_energy,
                                2.0000027220000000e+01,
                                delta=1e-12*2.0000027220000000e+01)

#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Initialize the FRENSIE random number generator
    Utility.initFrensiePrng()

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(CoupledElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(CutoffElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(HybridElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(MomentPreservingElasticAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(BremsstrahlungAdjointElectronScatteringDistributionTestCase))
    suite.addTest(unittest.makeSuite(ElectroionizationSubshellAdjointElectronScatteringDistributionTestCase))


    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing MonteCarlo.Collision.AdjointElectronScatteringDistribution \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Collision.AdjointElectronScatteringDistribution.py
#-----------------------------------------------------------------------------#
