#! /usr/bin/python2.7
#-----------------------------------------------------------------------------#
## MonteCarlo.Manager electroatomic reaction unit tests
#  \file   tstMonteCarlo.Manager.ParticleSimulationManager.py
#  \author Luke Kersting
#  \brief  Unit tests for the MonteCarlo.Manager.ParticleSimulationManager helpers
#-----------------------------------------------------------------------------#

# System imports
import sys
import unittest
from optparse import *
import numpy
import os

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-d", "--database_path", type="string", dest="database_path", default="",
                  help="set the path to the scattering center database that will be used to create the model")

options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')
MonteCarlo = importPyFrensieModuleFromBuildDir('MonteCarlo')
Collision = importPyFrensieModuleFromBuildDir('MonteCarlo.Collision')
ActiveRegion = importPyFrensieModuleFromBuildDir('MonteCarlo.ActiveRegion')
Event = importPyFrensieModuleFromBuildDir('MonteCarlo.Event')
Manager = importPyFrensieModuleFromBuildDir('MonteCarlo.Manager')
# Utility = importPyFrensieModuleFromBuildDir('Utility')
Data = importPyFrensieModuleFromBuildDir('Data')
# Native = importPyFrensieModuleFromBuildDir('Data.Native')

#-----------------------------------------------------------------------------#
# Testing functions
#-----------------------------------------------------------------------------#
# void (*default_signal_handler)( int )

# extern "C" void custom_signal_handler( int signal(self):
        # "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
#   if( global_manager )
#     global_manager.signalHandler( signal )
# }

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the coupled electroatomic reaction
class ParticleSimulationManagerTestCase(unittest.TestCase):
    "TestCase class for MonteCarlo.Manager ParticleSimulationManager"

    @classmethod
    def setUpClass(cls):
        database_path = options.database_path
        cls.data_directory = os.path.dirname(database_path)
        database = Data.ScatteringCenterPropertiesDatabase(database_path)
        h_properties = database.getAtomProperties( Data.ZAID(1001) )
        h1_properties = database.getNuclideProperties( Data.ZAID(1001) )
        cls.scattering_center_definition_database = Collision.ScatteringCenterDefinitionDatabase()
        h_definition = cls.scattering_center_definition_database.createDefinition( "H1 @ 293.6K", Data.ZAID(1001) )

        h_definition.setPhotoatomicDataProperties(
          h_properties.getSharedPhotoatomicDataProperties(
                       Data.PhotoatomicDataProperties.Native_EPR_FILE, 0 ) )

        h_definition.setAdjointPhotoatomicDataProperties(
          h_properties.getSharedAdjointPhotoatomicDataProperties(
                Data.AdjointPhotoatomicDataProperties.Native_EPR_FILE, 0 ) )

        h_definition.setElectroatomicDataProperties(
          h_properties.getSharedElectroatomicDataProperties(
                     Data.ElectroatomicDataProperties.Native_EPR_FILE, 0 ) )

        h_definition.setAdjointElectroatomicDataProperties(
          h_properties.getSharedAdjointElectroatomicDataProperties(
              Data.AdjointElectroatomicDataProperties.Native_EPR_FILE, 0 ) )

        h_definition.setNuclearDataProperties(
          h1_properties.getSharedNuclearDataPropertiesAtMeV(
                                         Data.NuclearDataProperties.ACE_FILE,
                                         7,
                                         2.53010E-08,
                                         True ) )

        cls.material_definition_database = Collision.MaterialDefinitionDatabase()

        cls.material_definition_database.addDefinition( "H1 @ 293.6K", 1,
                                                      ("H1 @ 293.6K",), (1.0,) )

        cls.unfilled_model = Geometry.InfiniteMediumModel( 1, 1, -1.0 )

        tmp_particle_distribution = ActiveRegion.StandardParticleDistribution( "test dist" )

        cls.particle_distribution = tmp_particle_distribution

    # def setUp(self):
    #     self.data = Native.ManagerPhotonRelaxationDataContainer( options.nativefile )
    #     method = Manager.SIMPLIFIED_UNION
    #     self.reaction = Manager.ParticleSimulationManager_LinLogCorrelated( self.data, method, 1e-7 )

    # def testGetReactionType(self):
    #     "*Test MonteCarlo.Manager.ParticleSimulationManager getReactionType method"
    #     self.assertEqual( self.reaction.getReactionType(),
    #                       Manager.COUPLED_ELASTIC_ELECTROATOMIC_REACTION )

    # def testGetThresholdEnergy(self):
    #     "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
    #     self.assertTrue( self.reaction.getThresholdEnergy(), 1e-5 )

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
    # Check that history details can be returned
    def testGet_history_details(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager get_history_details method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
        source_component = None
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 5 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 5 )

#   manager.reset()

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 1005 )
        properties.setMinNumberOfRendezvous( 10 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 100 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 100 )

#   manager.reset()

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 1005 )
        properties.setMinNumberOfRendezvous( 10 )
        properties.setMaxRendezvousBatchSize( 50 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 50 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 50 )

#   manager.reset()

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 1000000 )
        properties.setMinNumberOfRendezvous( 5 )
        properties.setMaxRendezvousBatchSize( 100000 )
        properties.setMinNumberOfBatchesPerRendezvous( 10 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 100000 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 10000 )

#   manager.reset()

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 1000000 )
        properties.setMinNumberOfRendezvous( 5 )
        properties.setMaxRendezvousBatchSize( 100000 )
        properties.setMinNumberOfBatchesPerRendezvous( 10 )
        properties.setMaxBatchSize( 5000 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 100000 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 5000 )

#   manager.reset()

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 0 )
        properties.setMinNumberOfRendezvous( 5 )
        properties.setMaxRendezvousBatchSize( 1000000 )
        properties.setMinNumberOfBatchesPerRendezvous( 10 )
        properties.setMaxBatchSize( 50000 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 0 )
#   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 1000000 )
#   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 50000 )

#   manager.reset()
# }

#-----------------------------------------------------------------------------#
    # Check that a particle simulation manager can rename the simulation
    def testSetSimulationName(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager setSimulationName method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getSimulationName(), "test_sim" )

#   manager.setSimulationName( "test_sim_2" )

#   FRENSIE_CHECK_EQUAL( manager.getSimulationName(), "test_sim_2" )
#   FRENSIE_CHECK( boost.filesystem.exists( "test_sim_2_rendezvous_0.xml" ) )
# }

#-----------------------------------------------------------------------------#
    # Check that a particle simulation manager can change the archive type
    def testSetSimulationArchiveType(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager setSimulationArchiveType method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getSimulationArchiveType(), "xml" )

#   manager.setSimulationArchiveType( "txt" )

#   FRENSIE_CHECK_EQUAL( manager.getSimulationArchiveType(), "txt" )
#   FRENSIE_CHECK( boost.filesystem.exists( "test_sim_rendezvous_0.txt" ) )
# }

#-----------------------------------------------------------------------------#
    # Check that the simulation name and archive can be changed simultaneously
    def testSetSimulationNameAndArchiveType(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager setSimulationNameAndArchiveType method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK_EQUAL( manager.getSimulationName(), "test_sim" )
#   FRENSIE_CHECK_EQUAL( manager.getSimulationArchiveType(), "xml" )

#   manager.setSimulationNameAndArchiveType( "test_sim_2", "txt" )

#   FRENSIE_CHECK_EQUAL( manager.getSimulationName(), "test_sim_2" )
#   FRENSIE_CHECK_EQUAL( manager.getSimulationArchiveType(), "txt" )
#   FRENSIE_CHECK( boost.filesystem.exists( "test_sim_2_rendezvous_0.txt" ) )
# }

#-----------------------------------------------------------------------------#
    # Check that the geometry model can be returned
    def testGetModel(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager getModel method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   std.shared_ptr<const MonteCarlo.FilledGeometryModel> model

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK( &manager.getModel() == model.get() )
# }

#-----------------------------------------------------------------------------#
    # Check that the source can be returned
    def testGetSource(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager getSource method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   std.shared_ptr<MonteCarlo.ParticleSource> source

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )

#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK( &manager.getSource() == source.get() )
# }

#-----------------------------------------------------------------------------#
    # Check that the event handler can be returned
    def testGetEventHandler(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager getEventHandler method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   std.shared_ptr<MonteCarlo.EventHandler> event_handler

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.NEUTRON_PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

#     event_handler.reset( new MonteCarlo.EventHandler( *properties ) )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_CHECK( &manager.getEventHandler() == event_handler.get() )
# }

#-----------------------------------------------------------------------------#
    # Check that a simulation can be run
    def testRunSimulation_history_wall(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager runSimulation_history_wall method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

#   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), 5 )
#   FRENSIE_CHECK_EQUAL( manager.getNumberOfRendezvous(), 3 )
# }

#-----------------------------------------------------------------------------#
    # Check that a simulation can be run
    def testRunSimulation_wall_time(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager runSimulation_wall_time method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.PHOTON_MODE )
        properties.setSimulationWallTime( 0.5 )
        properties.setMaxRendezvousBatchSize( 10 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

#   FRENSIE_CHECK( manager.getNextHistory() > 0 )
#   FRENSIE_CHECK( manager.getNumberOfRendezvous() > 0 )
# }

#-----------------------------------------------------------------------------#
    # Check that a particle simulation summary can be printed
    def testPrintSimulationSummary(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager printSimulationSummary method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   manager.runSimulation()

#   FRENSIE_REQUIRE_NO_THROW( manager.printSimulationSummary( std.cout ) )
# }

#-----------------------------------------------------------------------------#
    # Check that a particle simulation summary can be logged
    def testLogSimulationSummary(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager logSimulationSummary method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.PHOTON_MODE )
        properties.setNumberOfHistories( 5 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   manager.runSimulation()

#   FRENSIE_REQUIRE_NO_THROW( manager.logSimulationSummary() )
# }

#-----------------------------------------------------------------------------#
    # Check that a particle simulation manager can handle a signal
# #ifdef HAVE_FRENSIE_OPENMP
    def testSignalHandler(self):
        "*Test MonteCarlo.Manager.ParticleSimulationManager signalHandler method"
#   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager

#   {
        properties = MonteCarlo.SimulationProperties()
        properties.setParticleMode( MonteCarlo.PHOTON_MODE )
        properties.setMaxRendezvousBatchSize( 100 )
        properties.setMaxBatchSize( 10 )

        model = Collision.FilledGeometryModel(
                                self.data_directory,
                                self.scattering_center_definition_database,
                                self.material_definition_database,
                                properties,
                                self.unfilled_model,
                                False )


#     {
        source_component = [ActiveRegion.StandardNeutronSourceComponent( 0, 1.0, self.unfilled_model, self.particle_distribution )]

        source = ActiveRegion.StandardParticleSource( source_component )
#     }

        event_handler = Event.EventHandler( properties )

#     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

#     factory.reset(
#             new MonteCarlo.ParticleSimulationManagerFactory( model,
#                                                               source,
#                                                               event_handler,
#                                                               properties,
#                                                               "test_sim",
#                                                               "xml",
#                                                               threads ) )

#     manager = factory.getManager()
#   }

#   // Set the signal handler
#   global_manager = manager

#   default_signal_handler = std.signal( SIGINT, custom_signal_handler )

#   #pragma omp parallel num_threads( 2 )
#   {
#     if( Utility.OpenMPProperties.getThreadId() == 0 )
#       manager.runSimulation()
#     else
#     {
#       std.shared_ptr<Utility.Timer> timer =
#         Utility.OpenMPProperties.createTimer()

#       timer.start()

#       while( timer.elapsed().count() < 0.2 )

#       timer.stop()
#       timer.reset()

#       // Terminate the simulation (it is set up to run indefinitely unless it
#       // receives an interput signal)
#       std.raise( SIGINT )
#     }
#   }

#   FRENSIE_CHECK( manager.getNextHistory() > 0 )
#   FRENSIE_CHECK( manager.getNumberOfRendezvous() > 0 )

#   // Restore the default signal handler
#   std.signal( SIGINT, default_signal_handler )
#   global_manager.reset()
# }
# #endif // end HAVE_FRENSIE_OPEMP

# #-----------------------------------------------------------------------------#
# # Check that a particle simulation can be restarted
# # FRENSIE_DATA_UNIT_TEST_DECL( ParticleSimulationManager, restart_basic(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   FETCH_FROM_TABLE( std.string, archive_type )
# #   FETCH_FROM_TABLE( uint32_t, source_id )

# #   uint64_t next_history
# #   uint64_t rendezvous_number

# #   {
# #     std.shared_ptr<MonteCarlo.SimulationProperties> properties(
# #                                         new MonteCarlo.SimulationProperties )
#         properties.setParticleMode( MonteCarlo.PHOTON_MODE )
#         properties.setSimulationWallTime( 0.25 )
#         properties.setMaxRendezvousBatchSize( 10 )

#         model =
# #                                new MonteCarlo.FilledGeometryModel(
#                                 self.data_directory,
#                                 self.scattering_center_definition_database,
#                                 self.material_definition_database,
#                                 properties,
#                                 self.unfilled_model,
#                                 False )

# #     std.shared_ptr<MonteCarlo.ParticleSource> source

# #     {
# #       std.shared_ptr<MonteCarlo.ParticleSourceComponent>
# #         source_component( new MonteCarlo.StandardPhotonSourceComponent(
# #                                                      source_id,
# #                                                      1.0,
# #                                                      unfilled_model,
# #                                                      particle_distribution ) )

#         source = ActiveRegion.StandardParticleSource( source_component )
# #     }

# #     std.shared_ptr<MonteCarlo.EventHandler> event_handler(
# #                                  new MonteCarlo.EventHandler( *properties ) )

# #     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory(
# #             new MonteCarlo.ParticleSimulationManagerFactory( model,
# #                                                               source,
# #                                                               event_handler,
# #                                                               properties,
# #                                                               "test_sim",
# #                                                               archive_type,
# #                                                               threads ) )

# #     std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #       factory.getManager()

# #     FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #     next_history = manager.getNextHistory()
# #     rendezvous_number = manager.getNumberOfRendezvous()
# #   }

# #   std.string archive_name( "test_sim_rendezvous_" )
# #   archive_name += Utility.toString( rendezvous_number - 1 )
# #   archive_name += "."
# #   archive_name += archive_type

# #   std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

# #   FRENSIE_REQUIRE_NO_THROW( factory.reset( new MonteCarlo.ParticleSimulationManagerFactory( archive_name, (unsigned)threads ) ) )

# #   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #     factory.getManager()

# #   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #   FRENSIE_CHECK( manager.getNextHistory() > next_history )
# #   FRENSIE_CHECK( manager.getNumberOfRendezvous() > rendezvous_number )
# # }

# # FRENSIE_DATA_UNIT_TEST_INST( ParticleSimulationManager, restart_basic(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   COLUMNS()         << "archive_type" << "source_id"
# #   NEW_ROW( "xml" )  <<    "xml"       <<    0
# #   NEW_ROW( "txt" )  <<    "txt"       <<    1
# #   NEW_ROW( "bin" )  <<    "bin"       <<    2
# # #ifdef HAVE_FRENSIE_HDF5
# #   NEW_ROW( "h5fa" ) <<    "h5fa"      <<    3
# # #endif
# # }

# #-----------------------------------------------------------------------------#
# # Check that a particle simulation manager can be restarted
# # FRENSIE_DATA_UNIT_TEST_DECL( ParticleSimulationManager, restart_add_histories(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   FETCH_FROM_TABLE( std.string, archive_type )
# #   FETCH_FROM_TABLE( uint32_t, source_id )

# #   uint64_t next_history
# #   uint64_t rendezvous_number

# #   {
# #     std.shared_ptr<MonteCarlo.SimulationProperties> properties(
# #                                         new MonteCarlo.SimulationProperties )
#         properties.setParticleMode( MonteCarlo.PHOTON_MODE )
#         properties.setSimulationWallTime( 0.25 )
#         properties.setMaxRendezvousBatchSize( 10 )

#         model =
# #                                new MonteCarlo.FilledGeometryModel(
#                                 self.data_directory,
#                                 self.scattering_center_definition_database,
#                                 self.material_definition_database,
#                                 properties,
#                                 self.unfilled_model,
#                                 False )

# #     std.shared_ptr<MonteCarlo.ParticleSource> source

# #     {
# #       std.shared_ptr<MonteCarlo.ParticleSourceComponent>
# #         source_component( new MonteCarlo.StandardPhotonSourceComponent(
# #                                                      source_id,
# #                                                      1.0,
# #                                                      unfilled_model,
# #                                                      particle_distribution ) )

#         source = ActiveRegion.StandardParticleSource( source_component )
# #     }

# #     std.shared_ptr<MonteCarlo.EventHandler> event_handler(
# #                                  new MonteCarlo.EventHandler( *properties ) )

# #     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory(
# #             new MonteCarlo.ParticleSimulationManagerFactory( model,
# #                                                               source,
# #                                                               event_handler,
# #                                                               properties,
# #                                                               "test_sim",
# #                                                               archive_type,
# #                                                               threads ) )

# #     std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #       factory.getManager()

# #     FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #     next_history = manager.getNextHistory()
# #     rendezvous_number = manager.getNumberOfRendezvous()
# #   }

# #   std.string archive_name( "test_sim_rendezvous_" )
# #   archive_name += Utility.toString( rendezvous_number - 1 )
# #   archive_name += "."
# #   archive_name += archive_type

# #   std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

# #   FRENSIE_REQUIRE_NO_THROW( factory.reset( new MonteCarlo.ParticleSimulationManagerFactory( archive_name, (uint64_t)5, (unsigned)threads ) ) )

# #   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #     factory.getManager()

# #   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), next_history+5 )
# #   FRENSIE_CHECK( manager.getNumberOfRendezvous() > rendezvous_number )
# # }

# # FRENSIE_DATA_UNIT_TEST_INST( ParticleSimulationManager, restart_add_histories(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   COLUMNS()         << "archive_type" << "source_id"
# #   NEW_ROW( "xml" )  <<    "xml"       <<    0
# #   NEW_ROW( "txt" )  <<    "txt"       <<    1
# #   NEW_ROW( "bin" )  <<    "bin"       <<    2
# # #ifdef HAVE_FRENSIE_HDF5
# #   NEW_ROW( "h5fa" ) <<    "h5fa"      <<    3
# # #endif
# # }

# #-----------------------------------------------------------------------------#
# # Check that a particle simulation manager can be restarted
# # FRENSIE_DATA_UNIT_TEST_DECL( ParticleSimulationManager, restart_new_wall_time(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   FETCH_FROM_TABLE( std.string, archive_type )
# #   FETCH_FROM_TABLE( uint32_t, source_id )

# #   uint64_t next_history
# #   uint64_t rendezvous_number

# #   {
# #     std.shared_ptr<MonteCarlo.SimulationProperties> properties(
# #                                         new MonteCarlo.SimulationProperties )
#         properties.setParticleMode( MonteCarlo.PHOTON_MODE )
#         properties.setSimulationWallTime( 0.25 )
#         properties.setMaxRendezvousBatchSize( 10 )

#         model =
# #                                new MonteCarlo.FilledGeometryModel(
#                                 self.data_directory,
#                                 self.scattering_center_definition_database,
#                                 self.material_definition_database,
#                                 properties,
#                                 self.unfilled_model,
#                                 False )

# #     std.shared_ptr<MonteCarlo.ParticleSource> source

# #     {
# #       std.shared_ptr<MonteCarlo.ParticleSourceComponent>
# #         source_component( new MonteCarlo.StandardPhotonSourceComponent(
# #                                                      source_id,
# #                                                      1.0,
# #                                                      unfilled_model,
# #                                                      particle_distribution ) )

#         source = ActiveRegion.StandardParticleSource( source_component )
# #     }

# #     std.shared_ptr<MonteCarlo.EventHandler> event_handler(
# #                                  new MonteCarlo.EventHandler( *properties ) )

# #     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory(
# #             new MonteCarlo.ParticleSimulationManagerFactory( model,
# #                                                               source,
# #                                                               event_handler,
# #                                                               properties,
# #                                                               "test_sim",
# #                                                               archive_type,
# #                                                               threads ) )

# #     std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #       factory.getManager()

# #     FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #     next_history = manager.getNextHistory()
# #     rendezvous_number = manager.getNumberOfRendezvous()
# #   }

# #   std.string archive_name( "test_sim_rendezvous_" )
# #   archive_name += Utility.toString( rendezvous_number - 1 )
# #   archive_name += "."
# #   archive_name += archive_type

# #   std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

# #   FRENSIE_REQUIRE_NO_THROW( factory.reset( new MonteCarlo.ParticleSimulationManagerFactory( archive_name, 0.1, (unsigned)threads ) ) )

# #   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #     factory.getManager()

# #   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #   FRENSIE_CHECK( manager.getNextHistory() > next_history )
# #   FRENSIE_CHECK( manager.getNumberOfRendezvous() > rendezvous_number )
# # }

# # FRENSIE_DATA_UNIT_TEST_INST( ParticleSimulationManager, restart_new_wall_time(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   COLUMNS()         << "archive_type" << "source_id"
# #   NEW_ROW( "xml" )  <<    "xml"       <<    0
# #   NEW_ROW( "txt" )  <<    "txt"       <<    1
# #   NEW_ROW( "bin" )  <<    "bin"       <<    2
# # #ifdef HAVE_FRENSIE_HDF5
# #   NEW_ROW( "h5fa" ) <<    "h5fa"      <<    3
# # #endif
# # }

# #-----------------------------------------------------------------------------#
# # Check that a particle simulation manager can be restarted
# # FRENSIE_DATA_UNIT_TEST_DECL( ParticleSimulationManager,
# #                              restart_add_histories_new_wall_time(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   FETCH_FROM_TABLE( std.string, archive_type )
# #   FETCH_FROM_TABLE( uint32_t, source_id )

# #   uint64_t next_history
# #   uint64_t rendezvous_number

# #   {
# #     std.shared_ptr<MonteCarlo.SimulationProperties> properties(
# #                                         new MonteCarlo.SimulationProperties )
#         properties.setParticleMode( MonteCarlo.PHOTON_MODE )
#         properties.setSimulationWallTime( 0.25 )
#         properties.setMaxRendezvousBatchSize( 10 )

#         model =
# #                                new MonteCarlo.FilledGeometryModel(
#                                 self.data_directory,
#                                 self.scattering_center_definition_database,
#                                 self.material_definition_database,
#                                 properties,
#                                 self.unfilled_model,
#                                 False )

# #     std.shared_ptr<MonteCarlo.ParticleSource> source

# #     {
# #       std.shared_ptr<MonteCarlo.ParticleSourceComponent>
# #         source_component( new MonteCarlo.StandardPhotonSourceComponent(
# #                                                      source_id,
# #                                                      1.0,
# #                                                      unfilled_model,
# #                                                      particle_distribution ) )

#         source = ActiveRegion.StandardParticleSource( source_component )
# #     }

# #     std.shared_ptr<MonteCarlo.EventHandler> event_handler(
# #                                  new MonteCarlo.EventHandler( *properties ) )

# #     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory(
# #             new MonteCarlo.ParticleSimulationManagerFactory( model,
# #                                                               source,
# #                                                               event_handler,
# #                                                               properties,
# #                                                               "test_sim",
# #                                                               archive_type,
# #                                                               threads ) )

# #     std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #       factory.getManager()

# #     FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #     next_history = manager.getNextHistory()
# #     rendezvous_number = manager.getNumberOfRendezvous()
# #   }

# #   std.string archive_name( "test_sim_rendezvous_" )
# #   archive_name += Utility.toString( rendezvous_number - 1 )
# #   archive_name += "."
# #   archive_name += archive_type

# #   std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

# #   FRENSIE_REQUIRE_NO_THROW( factory.reset( new MonteCarlo.ParticleSimulationManagerFactory( archive_name, (uint64_t)5, 0.1, (unsigned)threads ) ) )

# #   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #     factory.getManager()

# #   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), next_history+5 )
# #   FRENSIE_CHECK( manager.getNumberOfRendezvous() > rendezvous_number )
# # }

# # FRENSIE_DATA_UNIT_TEST_INST( ParticleSimulationManager,
# #                              restart_add_histories_new_wall_time(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   COLUMNS()         << "archive_type" << "source_id"
# #   NEW_ROW( "xml" )  <<    "xml"       <<    0
# #   NEW_ROW( "txt" )  <<    "txt"       <<    1
# #   NEW_ROW( "bin" )  <<    "bin"       <<    2
# # #ifdef HAVE_FRENSIE_HDF5
# #   NEW_ROW( "h5fa" ) <<    "h5fa"      <<    3
# # #endif
# # }

# #-----------------------------------------------------------------------------#
# # Check that a particle simulation manager can be restarted
# # FRENSIE_DATA_UNIT_TEST_DECL( ParticleSimulationManager,
# #                              restart_updated_props(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   FETCH_FROM_TABLE( std.string, archive_type )
# #   FETCH_FROM_TABLE( uint32_t, source_id )

# #   uint64_t next_history
# #   uint64_t rendezvous_number

# #   {
# #     std.shared_ptr<MonteCarlo.SimulationProperties> properties(
# #                                         new MonteCarlo.SimulationProperties )
#         properties.setParticleMode( MonteCarlo.PHOTON_MODE )
#         properties.setSimulationWallTime( 0.25 )
#         properties.setMaxRendezvousBatchSize( 10 )

#         model =
# #                                new MonteCarlo.FilledGeometryModel(
#                                 self.data_directory,
#                                 self.scattering_center_definition_database,
#                                 self.material_definition_database,
#                                 properties,
#                                 self.unfilled_model,
#                                 False )

# #     std.shared_ptr<MonteCarlo.ParticleSource> source

# #     {
# #       std.shared_ptr<MonteCarlo.ParticleSourceComponent>
# #         source_component( new MonteCarlo.StandardPhotonSourceComponent(
# #                                                      source_id,
# #                                                      1.0,
# #                                                      unfilled_model,
# #                                                      particle_distribution ) )

#         source = ActiveRegion.StandardParticleSource( source_component )
# #     }

# #     std.shared_ptr<MonteCarlo.EventHandler> event_handler(
# #                                  new MonteCarlo.EventHandler( *properties ) )

# #     std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory(
# #             new MonteCarlo.ParticleSimulationManagerFactory( model,
# #                                                               source,
# #                                                               event_handler,
# #                                                               properties,
# #                                                               "test_sim",
# #                                                               archive_type,
# #                                                               threads ) )

# #     std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #       factory.getManager()

# #     FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #     next_history = manager.getNextHistory()
# #     rendezvous_number = manager.getNumberOfRendezvous()
# #   }

# #   std.string archive_name( "test_sim_rendezvous_" )
# #   archive_name += Utility.toString( rendezvous_number - 1 )
# #   archive_name += "."
# #   archive_name += archive_type

# #   MonteCarlo.SimulationGeneralProperties updated_properties
# #   updated_properties.setNumberOfHistories( 16 )
# #   updated_properties.setMinNumberOfRendezvous( 2 )
# #   updated_properties.setMaxRendezvousBatchSize( 100 )
# #   updated_properties.setMinNumberOfBatchesPerRendezvous( 2 )
# #   updated_properties.setMaxBatchSize( 10 )
# #   updated_properties.setSimulationWallTime( 1.0 )

# #   std.unique_ptr<MonteCarlo.ParticleSimulationManagerFactory> factory

# #   FRENSIE_REQUIRE_NO_THROW( factory.reset( new MonteCarlo.ParticleSimulationManagerFactory( archive_name, updated_properties, (unsigned)threads ) ) )

# #   std.shared_ptr<MonteCarlo.ParticleSimulationManager> manager =
# #     factory.getManager()

# #   FRENSIE_REQUIRE_NO_THROW( manager.runSimulation() )

# #   FRENSIE_CHECK_EQUAL( manager.getNextHistory(), next_history+16 )
# #   FRENSIE_CHECK( manager.getNumberOfRendezvous() > rendezvous_number )
# #   FRENSIE_CHECK_EQUAL( manager.getRendezvousBatchSize(), 8 )
# #   FRENSIE_CHECK_EQUAL( manager.getBatchSize(), 4 )
# # }

# # FRENSIE_DATA_UNIT_TEST_INST( ParticleSimulationManager, restart_updated_props(self):
#         "*Test MonteCarlo.Manager.ParticleSimulationManager getThresholdEnergy method"
# #   COLUMNS()         << "archive_type" << "source_id"
# #   NEW_ROW( "xml" )  <<    "xml"       <<    0
# #   NEW_ROW( "txt" )  <<    "txt"       <<    1
# #   NEW_ROW( "bin" )  <<    "bin"       <<    2
# # #ifdef HAVE_FRENSIE_HDF5
# #   NEW_ROW( "h5fa" ) <<    "h5fa"      <<    3
# # #endif
# # }


#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(ParticleSimulationManagerTestCase))


    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing MonteCarlo.Manager.ParticleSimulationManager \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstMonteCarlo.Manager.ParticleSimulationManager.py
#-----------------------------------------------------------------------------#
