#! ${PYTHON_EXECUTABLE}
#-----------------------------------------------------------------------------#
## Geometry.ROOT.Root class unit tests
#  \file   tstGeometry.ROOT.Root.py
#  \author Alex Robinson
#  \brief  Unit tests for the Geometry.ROOT.Root class 
#-----------------------------------------------------------------------------#

# System imports
import numpy
import sys
import unittest
from optparse import *

# Parse the command-line arguments
parser = OptionParser()
parser.add_option("-v", "--verbosity", type="int", dest="verbosity", default=2,
                  help="set the verbosity level [default 2]")
parser.add_option("-r", "--rootfile", type="string", dest="rootfile",
                  help="set the Root file that Root will read")
options,args = parser.parse_args()

from testingHelpers import importPyFrensieModuleFromBuildDir
Geometry = importPyFrensieModuleFromBuildDir('Geometry')
ROOT = importPyFrensieModuleFromBuildDir('Geometry.ROOT')

#-----------------------------------------------------------------------------#
# Tests.
#-----------------------------------------------------------------------------#
# Test the Root class (pre-initialization)
class RootPreInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.ROOT.Root class (pre-initialization)"

    def setUp(self):
        self.geom = ROOT.Root

    def testSetMaterialPropertyName(self):
        "*Test Geometry.ROOT.Root setMaterialPropertyName method"
        default_property = self.geom.getMaterialPropertyName()
        self.geom.setMaterialPropertyName( "material" )
        self.assertEqual(self.geom.getMaterialPropertyName(), "material")
        self.geom.setMaterialPropertyName( default_property )

    def testSetVoidMaterialName(self):
        "*Test Geometry.ROOT.Root setVoidMaterialName method"
        default_name = self.geom.getVoidMaterialName()
        self.geom.setVoidMaterialName( "empty" )
        self.assertEqual(self.geom.getVoidMaterialName(), "empty")
        self.geom.setVoidMaterialName( default_name )

    def testSetTerminalMaterialName(self):
        "*Test Geometry.ROOT.Root setTerminalMaterialName method"
        default_name = self.geom.getTerminalMaterialName()
        self.geom.setTerminalMaterialName( "terminal_mat" )
        self.assertEqual(self.geom.getTerminalMaterialName(), "terminal_mat")
        self.geom.setTerminalMaterialName( default_name )

#-----------------------------------------------------------------------------#
# Test the Root class (post-initialization)
class RootPostInitTestCase(unittest.TestCase):
    "TestCase class for Geometry.ROOT.Root class (post-initialization)"
    @classmethod
    def setUpClass(cls):
        cls.geom = ROOT.Root
        cls.geom.initialize(options.rootfile)

    def testGetMaterialIds(self):
        "*Test Geometry.ROOT.Root getMaterialIds method"
        mat_ids = self.geom.getMaterialIds()
        self.assertEqual(len(mat_ids), 1)
        self.assertTrue(1 in mat_ids)

    def testDoesCellExist(self):
        "*Test Geometry.ROOT.Root doesCellExist method"
        self.assertTrue(self.geom.doesCellExist( 1 ))
        self.assertTrue(self.geom.doesCellExist( 2 ))
        self.assertTrue(self.geom.doesCellExist( 3 ))
        self.assertFalse(self.geom.doesCellExist( 4 ))

    def testGetCellVolume(self):
        "*Test Geometry.ROOT.Root getCellVolume method"
        self.assertAlmostEqual(self.geom.getCellVolume( 1 ), 934.550153050213, delta=1e-9)
        self.assertAlmostEqual(self.geom.getCellVolume( 2 ), 65.4498469497874, delta=1e-9)
        self.assertAlmostEqual(self.geom.getCellVolume( 3 ), 1744.0, delta=1e-9)

    def testIsTerminationCell(self):
        "*Test Geometry.ROOT.Root getCellVolume method"
        self.assertFalse(self.geom.isTerminationCell( 1 ))
        self.assertFalse(self.geom.isTerminationCell( 2 ))
        self.assertTrue(self.geom.isTerminationCell( 3 ))

    def testIsVoidCell(self):
        "*Test Geometry.ROOT.Root isVoidCell method"
        self.assertTrue(self.geom.isVoidCell( 1 ))
        self.assertFalse(self.geom.isVoidCell( 2 ))
        self.assertFalse(self.geom.isVoidCell( 3 ))

    def testGetCells(self):
        "*Test Geometry.ROOT.Root getCells method"
        # All cells except termination cell
        cells = self.geom.getCells()
        self.assertEqual(len(cells), 2)
        self.assertTrue(1 in cells)
        self.assertTrue(2 in cells)
        
        # All cells except void and termination cells
        cells = self.geom.getCells( False )
        self.assertEqual(len(cells), 1)
        self.assertTrue(2 in cells)

        # All cells except void cells
        cells = self.geom.getCells( False, True )
        self.assertEqual(len(cells), 2)
        self.assertTrue(2 in cells)
        self.assertTrue(3 in cells)

        # All cells
        cells = self.geom.getCells( True, True )
        self.assertEqual(len(cells), 3)
        self.assertTrue(1 in cells)
        self.assertTrue(2 in cells)
        self.assertTrue(3 in cells)

    def testGetCellMaterialNames(self):
        "*Test Geometry.ROOT.Root getCellMaterialNames method"
        cell_mat_names = self.geom.getCellMaterialNames()
        self.assertEqual(len(cell_mat_names), 3)
        self.assertTrue(1 in cell_mat_names)
        self.assertTrue(2 in cell_mat_names)
        self.assertTrue(3 in cell_mat_names)
        self.assertEqual(cell_mat_names[1], "void")
        self.assertEqual(cell_mat_names[2], "mat_1")
        self.assertEqual(cell_mat_names[3], "graveyard")

    def testGetCellMaterialIds(self):
        "*Test Geometry.ROOT.Root getCellMaterialIds method"
        cell_mat_ids = self.geom.getCellMaterialIds()
        self.assertEqual(len(cell_mat_ids), 1)
        self.assertTrue(2 in cell_mat_ids)
        self.assertEqual(cell_mat_ids[2], 1)

    def testGetCellDensities(self):
        "*Test Geometry.ROOT.Root getCellDensities method"
        cell_densities = self.geom.getCellDensities()
        self.assertEqual(len(cell_densities), 1)
        self.assertTrue(2 in cell_densities)
        self.assertEqual(cell_densities[2], 1)

    def testGetPointLocation(self):
        "*Test Geometry.ROOT.Root getPointLocation method"
        # Point inside cell 2
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        location = self.geom.getPointLocation( ray, 2 )
        self.assertEqual( location, Geometry.POINT_INSIDE_CELL )
        location = self.geom.getPointLocation( ray, 1 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 3 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )

        # Point on boundary between cell 2 and cell 1
        ray = Geometry.Ray( (0.0, 0.0, 2.5), (0.0, 0.0, 1.0) )
        location = self.geom.getPointLocation( ray, 2 )
        self.assertEqual( location, Geometry.POINT_INSIDE_CELL )
        location = self.geom.getPointLocation( ray, 1 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 3 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )

        # Point in cell 1
        ray = Geometry.Ray( (0.0, 0.0, 4.0), (0.0, 0.0, 1.0) )
        location = self.geom.getPointLocation( ray, 2 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 1 )
        self.assertEqual( location, Geometry.POINT_INSIDE_CELL )
        location = self.geom.getPointLocation( ray, 3 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )

        # Point on boundary between cell 1 and cell 3
        ray = Geometry.Ray( [0.0, 0.0, 5.0], [0.0, 0.0, 1.0] )
        location = self.geom.getPointLocation( ray, 2 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 1 )
        self.assertEqual( location, Geometry.POINT_INSIDE_CELL )
        location = self.geom.getPointLocation( ray, 3 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )

        # Point in cell 3
        ray = Geometry.Ray( [0.0, 0.0, 6.0], [0.0, 0.0, 1.0] )
        location = self.geom.getPointLocation( ray, 2 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 1 )
        self.assertEqual( location, Geometry.POINT_OUTSIDE_CELL )
        location = self.geom.getPointLocation( ray, 3 )
        self.assertEqual( location, Geometry.POINT_INSIDE_CELL )

    def testFindCellContainingExternalRay(self):
        "*Test Geometry.ROOT.Root findCellContainingExternalRay method"
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 2)

        # Check that direction is used to determine cell containment
        ray = Geometry.Ray( (0.0, 0.0, 2.5), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 1)

        ray = Geometry.Ray( (0.0, 0.0, 2.5), (0.0, 0.0, -1.0) )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 2)

    def testFireExternalRay(self):
        "*Test Geometry.ROOT.Root fireExternalRay method"
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        distance = self.geom.fireExternalRay( ray )
        self.assertAlmostEqual(distance, 2.5, delta=1e-9)

    def testExternalRayTrace(self):
        "*Test that an external ray trace can be done with Geometry.ROOT.Root"
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 2)
        
        # Fire the ray
        distance = self.geom.fireExternalRay( ray )
        ray.advanceHead( distance )

        # Find the new cell
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 1)

        # Fire the ray
        distance = self.geom.fireExternalRay( ray )
        ray.advanceHead( distance )

        # Find the new cell
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertEqual(cell, 3)

    def testSetInternalRay(self):
        "*Test Geometry.ROOT.Root setInternalRay method"
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        self.geom.setInternalRay( ray )
        position = self.geom.getInternalRayPosition()
        direction = self.geom.getInternalRayDirection()
        self.assertEqual(position[0], 0.0)
        self.assertEqual(position[1], 0.0)
        self.assertEqual(position[2], 0.0)
        self.assertEqual(direction[0], 0.0)
        self.assertEqual(direction[1], 0.0)
        self.assertEqual(direction[2], 1.0)

        self.geom.setInternalRay( (1.0, 1.0, 1.0), (1.0, 0.0, 0.0) )
        position = self.geom.getInternalRayPosition()
        direction = self.geom.getInternalRayDirection()
        self.assertEqual(position[0], 1.0)
        self.assertEqual(position[1], 1.0)
        self.assertEqual(position[2], 1.0)
        self.assertEqual(direction[0], 1.0)
        self.assertEqual(direction[1], 0.0)
        self.assertEqual(direction[2], 0.0)

    def testIsInternalRaySet(self):
        "*Test Geometry.ROOT.Root isInternalRaySet method"
        ray = Geometry.Ray( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingExternalRay( ray )
        self.assertFalse(self.geom.isInternalRaySet())

        # Set the internal ray
        self.geom.setInternalRay( ray )
        self.assertTrue(self.geom.isInternalRaySet())

        # Fire an external ray
        self.geom.fireExternalRay( ray )
        self.assertFalse(self.geom.isInternalRaySet())

        # Set the internal ray
        self.geom.setInternalRay( ray )
        self.assertTrue(self.geom.isInternalRaySet())

    def testChangeInternalRayDirection(self):
        "*Test Geometry.ROOT.Root changeInternalRayDirection method"
        self.geom.setInternalRay( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        self.geom.changeInternalRayDirection( 1.0, 0.0, 0.0 )
        direction = self.geom.getInternalRayDirection()
        self.assertEqual( direction[0], 1.0 )
        self.assertEqual( direction[1], 0.0 )
        self.assertEqual( direction[2], 0.0 )

        self.geom.changeInternalRayDirection( (0.0, 1.0, 0.0) )
        direction = self.geom.getInternalRayDirection()
        self.assertEqual( direction[0], 0.0 )
        self.assertEqual( direction[1], 1.0 )
        self.assertEqual( direction[2], 0.0 )

    def testFindCellContainingInternalRay(self):
        "*Test Geometry.ROOT.Root findCellContainingInternalRay method"
        self.geom.setInternalRay( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 2)

        self.geom.setInternalRay( (0.0, 0.0, 3.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 1)

        self.geom.setInternalRay( (0.0, 0.0, 6.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 3)

    def testFireInternalRay(self):
        "*Test Geometry.ROOT.Root fireInternalRay method"
        self.geom.setInternalRay( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        distance = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 2.5, delta=1e-9)

    def testInternalRayTrace(self):
        "*Test that an internal ray trace can be done with Geometry.ROOT.Root"
        self.geom.setInternalRay( (0.0, 0.0, 0.0), (0.0, 0.0, 1.0) )
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 2)

        # Fire the ray
        distance = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 2.5, delta=1e-9)

        # Advance the ray to the cell boundary
        self.geom.advanceInternalRayToCellBoundary()

        # Find the new cell
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 1)

        # Fire the ray
        distance = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 2.499999, delta=1e-6)

        # Advance the ray a substep
        self.geom.advanceInternalRayBySubstep( 0.5*distance )

        # Change the ray direction
        self.geom.changeInternalRayDirection( 0.0, 1.0, 0.0 )

        # Fire the ray
        distance = self.geom.fireInternalRay()
        self.assertAlmostEqual(distance, 5.0, delta=1e-9)

        # Advance the ray to the cell boundary
        self.geom.advanceInternalRayToCellBoundary()

        # Find the new cell
        cell = self.geom.findCellContainingInternalRay()
        self.assertEqual(cell, 3)


#-----------------------------------------------------------------------------#
# Custom main
#-----------------------------------------------------------------------------#
if __name__ == "__main__":

    # Create the test suite object
    suite = unittest.TestSuite()

    # Add the test cases to the test suite
    suite.addTest(unittest.makeSuite(RootPreInitTestCase))
    suite.addTest(unittest.makeSuite(RootPostInitTestCase))

    print >>sys.stderr, \
        "\n**************************\n" + \
        "Testing Geometry.ROOT.Root \n" + \
        "**************************\n"
    result = unittest.TextTestRunner(verbosity=options.verbosity).run(suite)

    errs_plus_fails = len(result.errors) + len(result.failures)

    if errs_plus_fails == 0:
        print "End Result: TEST PASSED"

    # Delete the suite
    del suite

    # Exit
    sys.exit(errs_plus_fails)

#-----------------------------------------------------------------------------#
# end tstGeometry.ROOT.Root.py
#-----------------------------------------------------------------------------#

